{"version":3,"file":"static/js/main.js","sources":["webpack://assessments/./src/routes/index.css?3638","/home/fadhili/Documents/apps/ex/exf/src/api/authApi.ts","/home/fadhili/Documents/apps/ex/exf/src/api/roles.ts","/home/fadhili/Documents/apps/ex/exf/src/api/roles_components.ts","/home/fadhili/Documents/apps/ex/exf/src/api/users.ts","/home/fadhili/Documents/apps/ex/exf/src/components/LoginForm.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/Modal.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/ProtectedComponent.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/Roles.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/RolesComponents.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/SidePanel.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/Signup.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/UserProfileDropdown.tsx","/home/fadhili/Documents/apps/ex/exf/src/components/Users.tsx","/home/fadhili/Documents/apps/ex/exf/src/context/AuthContext.tsx","/home/fadhili/Documents/apps/ex/exf/src/modern.runtime.ts","/home/fadhili/Documents/apps/ex/exf/src/pages/Settings.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/dashboard/Dashboard.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/layout.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/api/pay1.ts","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/api/paymentPostResponse.ts","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/components/ErrorResponse.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/components/Modal.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/components/PaymentPostResponseTable.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/components/pay1.tsx","/home/fadhili/Documents/apps/ex/exf/src/routes/mupayapi/pages/ApiTracking.tsx","/home/fadhili/Documents/apps/ex/exf"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1730795010822\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.0.5_@swc+helpers@0.5.13/node_modules/@rspack/core/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","// src/api/authApi.ts\n\nconst BASE_URL = process.env.MODERN_API_BASE_URL || 'http://localhost:8001';\n\nconst api = async (endpoint: string, method: string, body?: any) => {\n  const response = await fetch(`${BASE_URL}/${endpoint}`, {\n    method,\n    headers: {\n      'Content-Type': 'application/json', // Change to application/json if your backend expects JSON\n    },\n    body: body ? JSON.stringify(body) : undefined, // Use JSON.stringify if sending JSON\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const registerUser = (userData: any) => api('register', 'POST', userData);\n\nexport const loginUser = (userData: any) => api('login', 'POST', userData);\n\nexport const logoutUser = () => api('logout', 'POST'); // Added logout endpoint\n\nexport const requestPasswordReset = (email: string) => api('request-password-reset', 'POST', { email });\n\nexport const resetPassword = (token: string, newPassword: string) => api('reset-password', 'POST', { reset_token: token, new_password: newPassword });\n\nexport const verifyEmail = (token: string) => api('verify-email', 'POST', { token });\n","import axios from 'axios';\n\nconst API_BASE_URL = process.env.MODERN_API_BASE_URL3 || 'http://localhost:8001/api';\n\n// Create a role\nexport const createRole = async (role: { role_id: string; role_name: string }) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/roles`, role);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating role:\", error);\n    throw error;\n  }\n};\n\n// Get all roles\nexport const getAllRoles = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/roles`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching roles:\", error);\n    throw error;\n  }\n};\n\n// Assign role to user\nexport const assignUserRole = async (userRole: { username: string; role_id: string }) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/assign-role`, userRole);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error assigning role to user:\", error);\n    throw error;\n  }\n};\n\n// Get all user roles\nexport const getUserRoles = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/user-roles`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user roles:\", error);\n    throw error;\n  }\n};\n","// usersf/src/api/roles_components.ts\nimport axios from 'axios';\n\nconst MODERN_API_BASE_URL = process.env.MODERN_API_BASE_URL || 'http://localhost:8001';\n\nconst api = axios.create({\n  baseURL: MODERN_API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const createComponent = async (data: { component_name: string, component_path: string }) => {\n  return await api.post('/components', data);\n};\n\nexport const getAllComponents = async () => {\n  return await api.get('/components');\n};\n\nexport const updateComponent = async (id: number, data: { component_name: string, component_path: string }) => {\n  return await api.put(`/components/${id}`, data);\n};\n\nexport const deleteComponent = async (id: number) => {\n  return await api.delete(`/components/${id}`);\n};\n\nexport const deleteAllComponents = async () => {\n  return await api.post('/components/delete_all');\n};\n\nexport const truncateComponents = async () => {\n  return await api.post('/components/truncate');\n};\n\nexport const assignRoleToComponent = async (data: { role_id: number, component_id: number }) => {\n  return await api.post('/roles_components', data);\n};\n\nexport const getAllRolesComponents = async () => {\n  return await api.get('/roles_components');\n};\n\nexport const updateRoleComponent = async (id: number, data: { role_id: number, component_id: number }) => {\n  return await api.put(`/roles_components/${id}`, data);\n};\n\nexport const deleteRoleComponent = async (id: number) => {\n  return await api.delete(`/roles_components/${id}`);\n};\n\nexport const deleteAllRoleComponents = async () => {\n  return await api.post('/roles_components/delete_all');\n};\n\nexport const truncateRolesComponents = async () => {\n  return await api.post('/roles_components/truncate');\n};\n","// src/api/users.ts\nconst MODERN_API_BASE_URL = process.env.MODERN_API_BASE_URL || 'http://localhost:8001';\n\nexport interface User {\n  user_id?: number; // Include user_id in the User interface\n  username: string;\n  email: string;\n  firstname: string;\n  lastname: string;\n  city: string;\n  password: string;\n}\n\n// Helper function to check response status and handle errors\nasync function handleResponse(response: Response) {\n  if (!response.ok) {\n    const errorMessage = await response.text();\n    throw new Error(`HTTP error! status: ${response.status}, message: ${errorMessage}`);\n  }\n  return await response.json(); // Directly parse JSON response\n}\n\n// Create a new user\nexport async function createUser(user: User): Promise<User> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/user`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(user),\n  });\n  return await handleResponse(response);\n}\n\n// Get a user by ID\nexport async function getUser(id: number): Promise<User> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/user?id=${id}`);\n  return await handleResponse(response);\n}\n\n// Get all users\nexport async function getAllUsers(): Promise<User[]> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/users`);\n  return await handleResponse(response);\n}\n\n// Update a user\nexport async function updateUser(id: number, user: User): Promise<User> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/user?id=${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(user),\n  });\n  return await handleResponse(response);\n}\n\n// Delete a user by ID\nexport async function deleteUser(id: number): Promise<void> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/user?id=${id}`, {\n    method: 'DELETE',\n  });\n  await handleResponse(response);\n}\n\n// Delete all users\nexport async function deleteAllUsers(): Promise<void> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/delete-all-users`, {\n    method: 'DELETE',\n  });\n  await handleResponse(response);\n}\n\n// Truncate users table\nexport async function truncateUsersTable(): Promise<void> {\n  const response = await fetch(`${MODERN_API_BASE_URL}/truncate-users`, {\n    method: 'POST',\n  });\n  await handleResponse(response);\n}\n","// src/components/LoginForm.tsx\nimport { useState } from 'react';\nimport { useNavigate, useLocation } from '@modern-js/runtime/router';\nimport { loginUser } from '../api/authApi';\nimport { getUser } from '../api/users';\nimport { getUserRoles } from '../api/roles';\n\nconst LoginForm = () => {\n  const [formData, setFormData] = useState({ username: '', password: '' });\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await loginUser(formData);\n      console.log('Login response:', response);\n\n      if (!response.token || !response.user_id) {\n        throw new Error('Login response is missing token or user_id');\n      }\n\n      localStorage.setItem('token', response.token);\n      const user = await getUser(response.user_id);\n      console.log('User details:', user);\n\n      const userRoles = await getUserRoles();\n      console.log('User roles:', userRoles);\n\n      const role = userRoles[user.username];\n      console.log('Selected role:', role);\n\n      if (role && role.role_id) {\n        localStorage.setItem('role_id', String(role.role_id));\n      } else {\n        throw new Error('Role ID not found');\n      }\n\n      const redirectPath = location.state?.from || '/';\n      setError(null);\n      navigate(redirectPath);\n    } catch (err) {\n      setError('Failed to login');\n      console.error('Login error:', err);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"p-4\">\n      <h2 className=\"text-xl mb-4\">Login</h2>\n      {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n      <div className=\"mb-4\">\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={formData.username}\n          onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n          className=\"input w-full p-2 mb-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={formData.password}\n          onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n          className=\"input w-full p-2 mb-6 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        className=\"btn-primary w-full p-3 text-white bg-primary-600 rounded hover:bg-primary-500 transition duration-200\"\n      >\n        Login\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","// src/components/Modal.tsx\nimport React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center z-50\">\n      <div className=\"absolute inset-0 bg-black opacity-50\" onClick={onClose}></div>\n      <div className=\"relative bg-white rounded-lg shadow-lg p-8 w-full max-w-md\">\n        <button\n          className=\"absolute top-2 right-2 text-gray-600 hover:text-gray-900 focus:outline-none\"\n          onClick={onClose}\n        >\n          &times;\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","// src/components/ProtectedComponent.tsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from '@modern-js/runtime/router';\nimport { getUser } from '../api/users';\nimport { getAllRolesComponents, getAllComponents } from '../api/roles_components';\nimport { getUserRoles } from '@/api/roles';\nimport { useAuth } from '../context/AuthContext'; // Import the AuthContext\n\ninterface ProtectedComponentProps {\n  component: React.ComponentType;\n  componentPath: string;\n}\n\nconst ProtectedComponent: React.FC<ProtectedComponentProps> = ({ component: Component, componentPath }) => {\n  const { isAuthenticated, login } = useAuth(); // Get isAuthenticated and login from AuthContext\n  const [isAuthorized, setIsAuthorized] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const storedRoleId = localStorage.getItem('role_id');\n\n        if (!token) {\n          console.log(\"No token found, navigating to login.\");\n          navigate('#login', { state: { from: location.pathname } }); // Navigate to the login page using hash\n          return;\n        }\n\n        // Check if role_id is in localStorage\n        let role_id = storedRoleId;\n\n        if (!role_id) {\n          // If not found in localStorage, fetch the user's roles from API\n          const userRoles = await getUserRoles();\n          console.log('User Roles:', userRoles);\n\n          const rolesArray = Array.isArray(userRoles) ? userRoles : Object.values(userRoles);\n\n          if (!Array.isArray(rolesArray)) {\n            throw new Error('User roles data is not in a valid format');\n          }\n\n          // Fetch user details (assuming the user ID is stored or fetched)\n          const user = await getUser(1); // Replace '1' with the correct user ID\n          console.log(\"User details:\", user);\n\n          // Find the role for the logged-in user\n          const userRole = rolesArray.find((role: any) => role.user_id === user.user_id);\n\n          if (!userRole || !userRole.role_id) {\n            console.log(\"User role not found, navigating to unauthorized.\");\n            navigate('#unauthorized');\n            return;\n          }\n\n          role_id = userRole.role_id;\n        }\n\n        if (!role_id) {\n          console.log(\"Role ID is missing, navigating to unauthorized.\");\n          setIsAuthorized(false);\n          navigate('#unauthorized');\n          return;\n        }\n\n        // Fetch all role-component mappings\n        const rolesComponents = await getAllRolesComponents();\n        console.log(\"Roles-Components mapping:\", rolesComponents.data);\n\n        // Filter components assigned to this role\n        const componentsForRole = rolesComponents.data.filter(\n          (roleComp: any) => roleComp.role_id === role_id\n        );\n\n        console.log(`Components assigned to role ${role_id}:`, componentsForRole);\n\n        // Get all components\n        const allComponents = await getAllComponents();\n        console.log(\"All components:\", allComponents.data); // Fix: Access 'data' property of response\n\n        // Check if the component is assigned to this role\n        const isComponentAssigned = componentsForRole.some((roleComp: any) => {\n          // Match the component by ID\n          const matchedComponent = allComponents.data.find( // Fix: Access 'data' property of response\n            (comp: any) => comp.id === roleComp.component_id\n            \n          );\n          console.log(matchedComponent);\n          // If a match is found, check if the component path matches\n          return matchedComponent && matchedComponent.component_path === componentPath;\n          \n        });\n        console.log(componentPath);\n        // If the component is assigned or no restrictions exist, authorize access\n        if (isComponentAssigned || componentsForRole.length === 0) {\n          setIsAuthorized(true);\n          console.log(\"Access granted to component:\", componentPath);\n        } else {\n          console.log(\"Access denied, navigating to unauthorized.\");\n          setIsAuthorized(false);\n          navigate('#unauthorized');\n        }\n      } catch (error) {\n        console.error('Error checking access:', error);\n        navigate('#error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [componentPath, navigate, location.pathname]);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      login(); // Call login when authenticated\n    }\n  }, [isAuthenticated, login]);\n\n  if (loading) return <div>Loading...</div>;\n\n  return isAuthorized ? <Component /> : null;\n};\n\nexport default ProtectedComponent;\n","// usersf/src/components/Roles.tsx\nimport React, { useEffect, useState } from 'react';\nimport { createRole, getAllRoles, assignUserRole, getUserRoles } from '../api/roles';\nimport { getAllUsers } from '../api/users'; // Assuming you have this function to fetch users\n\ninterface Role {\n  role_id: string;\n  role_name: string;\n}\n\ninterface UserRole {\n  email: string;\n  role_id: string;\n  role_name: string;\n}\n\ninterface User {\n  username: string; // Adjust based on your user data structure\n  email: string; // Adjust based on your user data structure\n}\n\nconst Roles: React.FC = () => {\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [filteredRoles, setFilteredRoles] = useState<Role[]>([]);\n  const [userRoles, setUserRoles] = useState<UserRole[]>([]);\n  const [users, setUsers] = useState<User[]>([]); // Added state for users\n  const [newRole, setNewRole] = useState({ role_id: '', role_name: '' });\n  const [assignRole, setAssignRole] = useState({ username: '', role_id: '' });\n  const [activeTab, setActiveTab] = useState<'create' | 'available' | 'assign' | 'userRoles'>('create');\n  const [isRoleDropdownOpen, setIsRoleDropdownOpen] = useState(false);\n  const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false); // State for user dropdown\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]); // State for filtered users\n\n  useEffect(() => {\n    fetchRoles();\n    fetchUserRoles();\n    fetchUsers(); // Fetch users on component mount\n  }, []);\n\n  const convertObjectToArray = (data: any): any[] => {\n    if (typeof data === 'object' && !Array.isArray(data)) {\n      return Object.values(data);\n    }\n    return data;\n  };\n\n  const fetchRoles = async () => {\n    try {\n      let rolesData = await getAllRoles();\n      rolesData = convertObjectToArray(rolesData);\n      if (Array.isArray(rolesData)) {\n        setRoles(rolesData);\n        setFilteredRoles(rolesData); // Initialize the filtered list\n      } else {\n        console.error('Roles data is not an array', rolesData);\n      }\n    } catch (error) {\n      console.error('Failed to fetch roles', error);\n    }\n  };\n\n  const fetchUsers = async () => { // Fetch users function\n    try {\n      let usersData = await getAllUsers(); // Adjust based on your API\n      usersData = convertObjectToArray(usersData);\n      if (Array.isArray(usersData)) {\n        setUsers(usersData);\n        setFilteredUsers(usersData); // Initialize the filtered users list\n      } else {\n        console.error('Users data is not an array', usersData);\n      }\n    } catch (error) {\n      console.error('Failed to fetch users', error);\n    }\n  };\n\n  const fetchUserRoles = async () => {\n    try {\n      let userRolesData = await getUserRoles();\n      userRolesData = convertObjectToArray(userRolesData);\n      if (Array.isArray(userRolesData)) {\n        setUserRoles(userRolesData);\n      } else {\n        console.error('User roles data is not an array', userRolesData);\n      }\n    } catch (error) {\n      console.error('Failed to fetch user roles', error);\n    }\n  };\n\n  const handleCreateRole = async () => {\n    try {\n      const response = await createRole(newRole);\n      alert(response.message);\n      fetchRoles(); // Refresh roles list\n    } catch (error) {\n      console.error('Error creating role', error);\n    }\n  };\n\n  const handleAssignUserRole = async () => {\n    try {\n      const response = await assignUserRole(assignRole);\n      alert(response.message);\n      fetchUserRoles(); // Refresh user roles list\n    } catch (error) {\n      console.error('Error assigning role to user', error);\n    }\n  };\n\n  const handleRoleSearch = (value: string) => {\n    setAssignRole({ ...assignRole, role_id: value });\n    setFilteredRoles(\n      roles.filter(role =>\n        role.role_id.toLowerCase().includes(value.toLowerCase()) || role.role_name.toLowerCase().includes(value.toLowerCase())\n      )\n    );\n  };\n\n  const handleUserSearch = (value: string) => { // Handle user search\n    setAssignRole({ ...assignRole, username: value });\n    setFilteredUsers(\n      users.filter(user =>\n        user.username.toLowerCase().includes(value.toLowerCase()) // Adjust to match user data structure\n      )\n    );\n  };\n\n  const selectRole = (role_id: string) => {\n    setAssignRole({ ...assignRole, role_id });\n    setIsRoleDropdownOpen(false);\n  };\n\n  const selectUser = (username: string) => { // Select user from dropdown\n    setAssignRole({ ...assignRole, username });\n    setIsUserDropdownOpen(false);\n  };\n\n  return (\n    <div className=\"roles-management container mx-auto px-4 py-8 text-white\">\n      <h2 className=\"text-3xl font-bold text-center text-primary mb-8\">Roles Management</h2>\n\n      {/* Horizontal Navigation */}\n      <div className=\"flex justify-center mb-6\">\n        <button\n          onClick={() => setActiveTab('create')}\n          className={`px-4 py-2 mx-2 rounded-lg ${activeTab === 'create' ? 'bg-primary text-white' : 'bg-secondary text-gray-300'} hover:bg-primary-dark transition-all`}\n        >\n          Create New Role\n        </button>\n        <button\n          onClick={() => setActiveTab('available')}\n          className={`px-4 py-2 mx-2 rounded-lg ${activeTab === 'available' ? 'bg-primary text-white' : 'bg-secondary text-gray-300'} hover:bg-primary-dark transition-all`}\n        >\n          Available Roles\n        </button>\n        <button\n          onClick={() => setActiveTab('assign')}\n          className={`px-4 py-2 mx-2 rounded-lg ${activeTab === 'assign' ? 'bg-primary text-white' : 'bg-secondary text-gray-300'} hover:bg-primary-dark transition-all`}\n        >\n          Assign Role to Users\n        </button>\n        <button\n          onClick={() => setActiveTab('userRoles')}\n          className={`px-4 py-2 mx-2 rounded-lg ${activeTab === 'userRoles' ? 'bg-primary text-white' : 'bg-secondary text-gray-300'} hover:bg-primary-dark transition-all`}\n        >\n          User Roles\n        </button>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'create' && (\n        <div className=\"bg-secondary p-6 rounded-lg shadow-md\">\n          <h3 className=\"text-xl font-semibold mb-4\">Create New Role</h3>\n          <div className=\"space-y-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Role ID\"\n              value={newRole.role_id}\n              onChange={(e) => setNewRole({ ...newRole, role_id: e.target.value })}\n              className=\"w-full py-2 px-4 rounded-lg bg-gray-100 text-black focus:outline-none shadow-sm\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Role Name\"\n              value={newRole.role_name}\n              onChange={(e) => setNewRole({ ...newRole, role_name: e.target.value })}\n              className=\"w-full py-2 px-4 rounded-lg bg-gray-100 text-black focus:outline-none shadow-sm\"\n            />\n            <button\n              onClick={handleCreateRole}\n              className=\"w-full py-2 bg-primary text-white rounded-lg shadow-md hover:bg-primary-dark transition-all\"\n            >\n              Create Role\n            </button>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'available' && (\n        <div className=\"bg-secondary p-6 rounded-lg shadow-md\">\n          <h3 className=\"text-xl font-semibold mb-4\">Available Roles</h3>\n          {roles.length > 0 ? (\n            <ul className=\"space-y-2\">\n              {roles.map((role) => (\n                <li key={role.role_id} className=\"flex justify-between items-center p-3 bg-gray-800 rounded-lg shadow-sm\">\n                  <span>Role ID: {role.role_id}</span>\n                  <span>Role Name: {role.role_name}</span>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No roles available.</p>\n          )}\n        </div>\n      )}\n\n      {activeTab === 'assign' && (\n        <div className=\"bg-secondary p-6 rounded-lg shadow-md\">\n          <h3 className=\"text-xl font-semibold mb-4\">Assign Role to User</h3>\n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Username\"\n                value={assignRole.username}\n                onChange={(e) => handleUserSearch(e.target.value)} // Update to filter users\n                className=\"w-full py-2 px-4 rounded-lg bg-gray-100 text-black focus:outline-none shadow-sm\"\n                onFocus={() => setIsUserDropdownOpen(true)} // Open dropdown on focus\n                onBlur={() => setTimeout(() => setIsUserDropdownOpen(false), 200)} // Delay closing dropdown\n              />\n              {isUserDropdownOpen && (\n                <ul className=\"absolute z-10 bg-white text-primary border border-gray-300 rounded-lg shadow-md max-h-60 overflow-y-auto w-full\">\n                  {filteredUsers.map((user) => (\n                    <li\n                      key={user.username}\n                      onClick={() => selectUser(user.username)} // Set selected user\n                      className=\"cursor-pointer hover:bg-gray-100 px-4 py-2\"\n                    >\n                      {user.username}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Role ID\"\n                value={assignRole.role_id}\n                onChange={(e) => handleRoleSearch(e.target.value)} // Update to filter roles\n                className=\"w-full py-2 px-4 rounded-lg bg-gray-100 text-black focus:outline-none shadow-sm\"\n                onFocus={() => setIsRoleDropdownOpen(true)} // Open dropdown on focus\n                onBlur={() => setTimeout(() => setIsRoleDropdownOpen(false), 200)} // Delay closing dropdown\n              />\n              {isRoleDropdownOpen && (\n                <ul className=\"absolute z-10 bg-white text-primary border border-gray-300 rounded-lg shadow-md max-h-60 overflow-y-auto w-full\">\n                  {filteredRoles.map((role) => (\n                    <li\n                      key={role.role_id}\n                      onClick={() => selectRole(role.role_id)} // Set selected role\n                      className=\"cursor-pointer hover:bg-gray-100 px-4 py-2\"\n                    >\n                      {role.role_id} - {role.role_name}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n            <button\n              onClick={handleAssignUserRole}\n              className=\"w-full py-2 bg-primary text-white rounded-lg shadow-md hover:bg-primary-dark transition-all\"\n            >\n              Assign Role\n            </button>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'userRoles' && (\n        <div className=\"bg-secondary p-6 rounded-lg shadow-md\">\n          <h3 className=\"text-xl font-semibold mb-4\">User Roles</h3>\n          {userRoles.length > 0 ? (\n            <ul className=\"space-y-2\">\n              {userRoles.map((userRole) => (\n                <li key={userRole.email} className=\"flex justify-between items-center p-3 bg-gray-800 rounded-lg shadow-sm\">\n                  <span>{userRole.email}</span>\n                  <span>{userRole.role_name}</span>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No user roles assigned.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Roles;\n","// usersf/src/components/RolesComponents.tsx\nimport React, { useEffect, useState } from 'react';\nimport {\n  createComponent,\n  getAllComponents,\n  updateComponent,\n  deleteComponent,\n  deleteAllComponents,\n  truncateComponents,\n  assignRoleToComponent,\n  getAllRolesComponents,\n  updateRoleComponent,\n  deleteRoleComponent,\n  deleteAllRoleComponents,\n  truncateRolesComponents,\n} from '../api/roles_components';\nimport 'tailwindcss/tailwind.css';\n\nimport { getAllRoles } from '../api/roles'; \n\ninterface Role {\n  role_id: number;\n  role_name: string;\n}\n\ninterface Component {\n  id: number;\n  component_name: string;\n  component_path: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface RoleComponentMapping {\n  id: number;\n  role_id: number;\n  component_id: number;\n  component_path: string;\n  created_at: string;\n  updated_at: string;\n}\n\nconst RolesComponents = () => {\n  const [components, setComponents] = useState<Component[] | null>(null);\n  const [rolesComponents, setRolesComponents] = useState<RoleComponentMapping[] | null>(null);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [filteredRoles, setFilteredRoles] = useState<Role[]>([]);\n  const [newComponent, setNewComponent] = useState({ component_name: '', component_path: '' });\n  const [selectedRole, setSelectedRole] = useState({ role_id: '', component_id: '' });\n  const [activeTab, setActiveTab] = useState<'create' | 'list' | 'assign' | 'mappings'>('create');\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  // Function to convert objects to arrays (if needed)\n  const convertObjectToArray = (obj: Record<string, any>): Role[] => {\n    return Object.keys(obj).map((key) => ({ id: key, ...obj[key] }));\n  };\n\n  useEffect(() => {\n    fetchComponents();\n    fetchRolesComponents();\n    fetchRoles(); // Ensure roles are fetched\n  }, []);\n\n  // Fetch Roles logic remains unchanged\n  const fetchRoles = async () => {\n    try {\n      let rolesData = await getAllRoles();\n      console.log(\"Fetched Roles Data:\", rolesData); // Log the fetched data\n      rolesData = convertObjectToArray(rolesData);\n      if (Array.isArray(rolesData)) {\n        setRoles(rolesData);\n        setFilteredRoles(rolesData); // Initialize the filtered list\n      } else {\n        console.error('Roles data is not an array', rolesData);\n      }\n    } catch (error) {\n      console.error('Failed to fetch roles', error);\n    }\n  };\n\n  const fetchComponents = async () => {\n    try {\n      const result = await getAllComponents();\n      setComponents(result.data || []);\n    } catch (error) {\n      console.error('Failed to fetch components:', error);\n      setComponents([]); // Fallback to empty array in case of error\n    }\n  };\n\n  const fetchRolesComponents = async () => {\n    try {\n      const result = await getAllRolesComponents();\n      setRolesComponents(result.data || []);\n    } catch (error) {\n      console.error('Failed to fetch roles-components mappings:', error);\n      setRolesComponents([]); // Fallback to empty array in case of error\n    }\n  };\n\n  // Map component ID's to names\n  const getComponentNameById = (id: number): string => {\n    if (!components) return 'Unknown Component';\n    const component = components?.find(comp => comp.id === id);\n    return component ? component.component_name : 'Unknown Component';\n  };\n  \n\n  // Hardcoded component names and paths\n  const hardcodedComponents = [\n    { name: 'Dashboard', path: 'src/routes/dashboard/Dashboard.tsx' },\n    { name: 'Profile', path: 'src/components/UserProfileDropdown.tsx' },\n    { name: 'Settings', path: 'src/pages/Settings.tsx' },\n    { name: 'Roles', path: 'src/components/Roles.tsx' },\n    { name: 'Roles Components', path: 'src/components/RolesComponents.tsx' },\n    { name: 'Users', path: 'src/components/Users.tsx' },\n    { name: 'Payment Post Response', path: 'src/routes/mupayapi/components/PaymentPostResponseTable.tsx' },\n    { name: 'CRDB Payment Test', path: 'src/routes/mupayapi/components/pay1.tsx' },\n    { name: 'API Tracking', path: 'src/routes/mupayapi/pages/ApiTracking.tsx' },\n    \n  ];\n\n  const handleComponentNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setNewComponent({ ...newComponent, component_name: value });\n    setShowDropdown(value.length > 0); // Show dropdown if input is not empty\n  };\n\n  const handleComponentSelect = (name: string, path: string) => {\n    setNewComponent({ component_name: name, component_path: path });\n    setShowDropdown(false); // Hide dropdown after selection\n  };\n\n  const handleCreateComponent = async () => {\n    await createComponent(newComponent);\n    fetchComponents();\n  };\n\n  const handleUpdateComponent = async (id: number) => {\n    await updateComponent(id, newComponent);\n    fetchComponents();\n  };\n\n  const handleDeleteComponent = async (id: number) => {\n    await deleteComponent(id);\n    fetchComponents();\n  };\n\n  const handleDeleteAllComponents = async () => {\n    await deleteAllComponents();\n    fetchComponents();\n  };\n\n  const handleTruncateComponents = async () => {\n    await truncateComponents();\n    fetchComponents();\n  };\n\n  const handleAssignRoleToComponent = async () => {\n    await assignRoleToComponent({\n      role_id: parseInt(selectedRole.role_id),\n      component_id: parseInt(selectedRole.component_id),\n    });\n    fetchRolesComponents();\n  };\n\n  const handleUpdateRoleComponent = async (id: number) => {\n    await updateRoleComponent(id, {\n      role_id: parseInt(selectedRole.role_id),\n      component_id: parseInt(selectedRole.component_id),\n    });\n    fetchRolesComponents();\n  };\n\n  const handleDeleteRoleComponent = async (id: number) => {\n    await deleteRoleComponent(id);\n    fetchRolesComponents();\n  };\n\n  const handleDeleteAllRoleComponents = async () => {\n    await deleteAllRoleComponents();\n    fetchRolesComponents();\n  };\n\n  const handleTruncateRolesComponents = async () => {\n    await truncateRolesComponents();\n    fetchRolesComponents();\n  };\n\n  {console.log('Roles State:', roles)}\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Roles & Components Management</h1>\n\n      {/* Tab Navigation */}\n      <div className=\"flex border-b mb-4\">\n        <button\n          className={`px-4 py-2 focus:outline-none ${activeTab === 'create' ? 'border-b-2 border-blue-500' : ''}`}\n          onClick={() => setActiveTab('create')}\n        >\n          Create a Component\n        </button>\n        <button\n          className={`px-4 py-2 focus:outline-none ${activeTab === 'list' ? 'border-b-2 border-blue-500' : ''}`}\n          onClick={() => setActiveTab('list')}\n        >\n          Components List\n        </button>\n        <button\n          className={`px-4 py-2 focus:outline-none ${activeTab === 'assign' ? 'border-b-2 border-blue-500' : ''}`}\n          onClick={() => setActiveTab('assign')}\n        >\n          Assign Role to Component\n        </button>\n        <button\n          className={`px-4 py-2 focus:outline-none ${activeTab === 'mappings' ? 'border-b-2 border-blue-500' : ''}`}\n          onClick={() => setActiveTab('mappings')}\n        >\n          Roles-Components Mappings\n        </button>\n      </div>\n\n      {/* Content */}\n      {activeTab === 'create' && (\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-semibold mb-2\">Create a Component</h2>\n          <input\n            className=\"border p-2 rounded mb-2 w-full\"\n            placeholder=\"Component Name\"\n            value={newComponent.component_name}\n            onChange={handleComponentNameChange}\n            onFocus={() => setShowDropdown(true)}\n            onBlur={() => setShowDropdown(false)}\n          />\n          {showDropdown && (\n            <div className=\"relative\">\n              <ul className=\"absolute z-10 bg-white text-primary border border-gray-300 rounded-lg shadow-md mt-1 w-full\">\n                {hardcodedComponents\n                  .filter(({ name }) =>\n                    name.toLowerCase().includes(newComponent.component_name.toLowerCase())\n                  )\n                  .map(({ name, path }) => (\n                    <li\n                      key={name}\n                      className=\"p-2 hover:bg-blue-500 hover:text-white cursor-pointer\"\n                      onMouseDown={() => handleComponentSelect(name, path)} // Using onMouseDown to prevent blur\n                    >\n                      {name}\n                    </li>\n                  ))}\n              </ul>\n            </div>\n          )}\n\n\n          <input\n            className=\"border p-2 rounded mb-2 w-full\"\n            placeholder=\"Component Path\"\n            value={newComponent.component_path}\n            readOnly\n          />\n          <button\n            className=\"bg-blue-500 text-white p-2 rounded\"\n            onClick={handleCreateComponent}\n          >\n            Create Component\n          </button>\n        </div>\n      )}\n\n      {activeTab === 'list' && (\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-semibold mb-2\">Components List</h2>\n          <div className=\"space-y-4\">\n            {components && components.map((component) => (\n              <div key={component.id} className=\"border p-4 rounded\">\n                <p>Name: {component.component_name}</p>\n                <p>Path: {component.component_path}</p>\n                <button\n                  className=\"bg-yellow-500 text-white p-2 rounded mt-2\"\n                  onClick={() => handleUpdateComponent(component.id)}\n                >\n                  Update\n                </button>\n                <button\n                  className=\"bg-red-500 text-white p-2 rounded mt-2\"\n                  onClick={() => handleDeleteComponent(component.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            ))}\n          </div>\n          <button\n            className=\"bg-red-600 text-white p-2 rounded mt-4\"\n            onClick={handleDeleteAllComponents}\n          >\n            Delete All Components\n          </button>\n          <button\n            className=\"bg-gray-500 text-white p-2 rounded mt-2\"\n            onClick={handleTruncateComponents}\n          >\n            Truncate Components\n          </button>\n        </div>\n      )}\n\n      {activeTab === 'assign' && (\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-semibold mb-2\">Assign Role to Component</h2>\n\n          <select\n            className=\"border p-2 rounded mb-2 w-full\"\n            value={selectedRole.role_id}\n            onChange={(e) => setSelectedRole({ ...selectedRole, role_id: e.target.value })}\n          >\n            <option value=\"\">Select Role</option>\n            {roles.length > 0 ? roles.map((role) => (\n              <option key={role.role_id} value={role.role_id}>\n                {role.role_name}\n              </option>\n            )) : <option disabled>No roles available</option>}\n          </select>\n          <select\n            className=\"border p-2 rounded mb-2 w-full\"\n            value={selectedRole.component_id}\n            onChange={(e) => setSelectedRole({ ...selectedRole, component_id: e.target.value })}\n          >\n            <option value=\"\">Select Component</option>\n            {components && components.map((component) => (\n              <option key={component.id} value={component.id}>\n                {component.component_name}\n              </option>\n            ))}\n          </select>\n          <button\n            className=\"bg-blue-500 text-white p-2 rounded\"\n            onClick={handleAssignRoleToComponent}\n          >\n            Assign Role to Component\n          </button>\n        </div>\n      )}\n\n      {activeTab === 'mappings' && (\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-semibold mb-2\">Roles-Components Mappings</h2>\n          <div className=\"space-y-4\">\n          {rolesComponents && rolesComponents.map((mapping) => (\n            <div key={mapping.id} className=\"border p-4 rounded\">\n              <p>Role ID: {mapping.role_id}</p> {/* role id */}\n              <p>Role Name: {roles.find(role => role.role_id === mapping.role_id)?.role_name || 'Unknown Role'}</p> {/* role name*/}\n              <p>Component Name: {getComponentNameById(mapping.component_id)}</p> {/* component name */}\n              <p>Component Path: {components?.find(comp => comp.id === mapping.component_id)?.component_path || 'Unknown Path'}</p>\n              <button\n                className=\"bg-yellow-500 text-white p-2 rounded mt-2\"\n                onClick={() => handleUpdateRoleComponent(mapping.id)}\n              >\n                Update Mapping\n              </button>\n              <button\n                className=\"bg-red-500 text-white p-2 rounded mt-2\"\n                onClick={() => handleDeleteRoleComponent(mapping.id)}\n              >\n                Delete Mapping\n              </button>\n            </div>\n          ))}\n\n          </div>\n          <button\n            className=\"bg-red-600 text-white p-2 rounded mt-4\"\n            onClick={handleDeleteAllRoleComponents}\n          >\n            Delete All Mappings\n          </button>\n          <button\n            className=\"bg-gray-500 text-white p-2 rounded mt-2\"\n            onClick={handleTruncateRolesComponents}\n          >\n            Truncate Mappings\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RolesComponents;\n","// src/components/SidePanel.tsx\nimport { useState } from 'react';\nimport { FaBars, FaTimes } from 'react-icons/fa';\n\nconst SidePanel = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const togglePanel = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <>\n      {/* SidePanel */}\n      <div\n        className={`fixed top-0 left-0 h-screen bg-secondary text-white transition-transform duration-300 transform ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        } w-64 md:w-1/4 lg:w-1/5 z-40`}\n        style={{\n          willChange: 'transform',\n        }}\n      >\n        <div className=\"p-4 pt-12\"> {/* Added top padding */}\n          <h2 className=\"text-2xl mb-6\">Navigation</h2>\n          <ul>\n            <li className=\"mb-3\">\n              <a href=\"#dashboard\" className=\"text-lg\">\n                Dashboard\n              </a>\n            </li>\n            <li className=\"mb-3\">\n              <a href=\"#settings\" className=\"text-lg\">\n                Settings\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Toggler Icon */}\n      <div\n        onClick={togglePanel}\n        className=\"p-2 bg-primary text-white rounded-md focus:outline-none z-50 cursor-pointer mt-2 ml-2\"\n      >\n        {isOpen ? <FaTimes className=\"text-lg\" /> : <FaBars className=\"text-lg\" />}\n      </div>\n\n      {/* Overlay for mobile to close panel */}\n      {isOpen && (\n        <div\n          onClick={togglePanel}\n          className=\"fixed top-0 left-0 w-full h-full bg-black opacity-50 z-30 md:hidden\"\n        ></div>\n      )}\n    </>\n  );\n};\n\nexport default SidePanel;\n","// src/components/Signup.tsx\n\nimport React, { useState } from 'react';\nimport { registerUser } from '../api/authApi';\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({ username: '', password: '', email: '' });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await registerUser(formData);\n      setSuccess('Registration successful');\n      setError('');\n    } catch (error) {\n      setError('Registration failed');\n      setSuccess('');\n    }\n  };\n\n  return (\n    <div className=\"p-4 max-w-md mx-auto bg-white shadow rounded\">\n      <h2 className=\"text-2xl font-bold mb-4\">Sign Up</h2>\n      {error && <p className=\"text-red-500\">{error}</p>}\n      {success && <p className=\"text-green-500\">{success}</p>}\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700\">Username</label>\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={formData.username}\n            onChange={handleChange}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded\"\n            required\n          />\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded\"\n            required\n          />\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded\"\n            required\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full bg-[#e68f24] text-white px-4 py-2 rounded hover:bg-[#cc6e00] focus:outline-none\"\n        >\n          Sign Up\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n","// src/components/UserProfileDropdown.tsx\nimport React, { useState, useEffect } from 'react';\nimport { FaUser } from 'react-icons/fa';\nimport { logoutUser } from '../api/authApi';\nimport { useNavigate, useLocation } from '@modern-js/runtime/router';\nimport Modal from './Modal';\nimport LoginForm from './LoginForm';\nimport Signup from './Signup';\nimport { useAuth } from '../context/AuthContext';\n\nconst UserProfileDropdown = () => {\n  const { isAuthenticated, login, logout } = useAuth(); // Added login for future use if needed\n  const [isOpen, setIsOpen] = useState(false);\n  const [showLoginForm, setShowLoginForm] = useState(false);\n  const [showSignupForm, setShowSignupForm] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const toggleDropdown = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const handleLoginClick = () => {\n    navigate('#login', { state: { from: location.hash } });\n    setIsOpen(false);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logoutUser();\n      localStorage.removeItem('token');\n      localStorage.removeItem('role_id');\n      logout(); // Update context state\n      setIsOpen(false);\n      navigate('#dashboard', { replace: true });\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const handleSignup = () => {\n    setShowSignupForm(true);\n    setIsOpen(false);\n  };\n\n  // Keep auth state updated based on local storage\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      login(); // Update auth context to logged in if token exists\n    }\n  }, [login]);\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={toggleDropdown}\n        className=\"flex items-center justify-center w-8 h-8 bg-[#e68f24] text-white rounded-full shadow hover:bg-[#cc6e00] focus:outline-none\"\n      >\n        <FaUser className=\"text-lg text-white\" />\n      </button>\n      {isOpen && (\n        <div\n          className=\"absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-lg\"\n          style={{ zIndex: 9999 }}\n        >\n          <ul className=\"py-2\">\n            {isAuthenticated ? (\n              <>\n                <li className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\">Profile</li>\n                <li className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\" onClick={handleLogout}>\n                  Logout\n                </li>\n              </>\n            ) : (\n              <>\n                <li className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\" onClick={handleLoginClick}>\n                  Login\n                </li>\n                <li className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\" onClick={handleSignup}>\n                  Sign Up\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n      )}\n\n      {/* Modal for login */}\n      <Modal isOpen={showLoginForm} onClose={() => setShowLoginForm(false)}>\n        <LoginForm />\n      </Modal>\n\n      {/* Modal for signup */}\n      <Modal isOpen={showSignupForm} onClose={() => setShowSignupForm(false)}>\n        <Signup />\n      </Modal>\n    </div>\n  );\n};\n\nexport default UserProfileDropdown;\n","// src/components/Users.tsx\n\nimport { useState, useEffect } from 'react';\nimport {\n  createUser,\n  updateUser,\n  deleteUser,\n  deleteAllUsers,\n  truncateUsersTable,\n  getAllUsers,\n  User,\n} from '../api/users';\n\nconst Users = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [editingUserId, setEditingUserId] = useState<number | null>(null);\n  const [newUser, setNewUser] = useState<User | null>(null);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    loadUsers(); // Load all users on component mount\n  }, []);\n\n  const loadUsers = async () => {\n    const allUsers = await getAllUsers();\n    setUsers(allUsers);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUserId(user.user_id ?? null); // Use user_id or null\n    setEditingUser({ ...user });\n  };\n\n  const handleSaveUser = async () => {\n    if (editingUser && editingUserId !== null) {\n      await updateUser(editingUserId, editingUser);\n      alert('User updated successfully!');\n      setEditingUserId(null);\n      setEditingUser(null);\n      loadUsers();\n    }\n  };\n\n  const handleDeleteUser = async (id: number) => {\n    await deleteUser(id);\n    alert('User deleted successfully!');\n    loadUsers();\n  };\n\n  const handleAddUserRow = () => {\n    setNewUser({\n      user_id: undefined, // Set to undefined; modify as necessary\n      username: '',\n      email: '',\n      firstname: '',\n      lastname: '',\n      city: '',\n      password: '',\n    });\n  };\n\n  const handleSaveNewUser = async () => {\n    if (newUser) {\n      await createUser(newUser);\n      alert('New user added successfully!');\n      setNewUser(null);\n      loadUsers();\n    }\n  };\n\n  const handleDeleteAllUsers = async () => {\n    await deleteAllUsers();\n    alert('All users deleted successfully!');\n    loadUsers();\n  };\n\n  const handleTruncateUsersTable = async () => {\n    await truncateUsersTable();\n    alert('Users table truncated successfully!');\n    loadUsers();\n  };\n\n  return (\n    <div className=\"p-6 bg-gray-100 rounded-lg shadow-md\">\n      <h1 className=\"text-3xl font-bold mb-4\">Users Management</h1>\n\n      {/* Add User Button at the Top */}\n      <div className=\"flex space-x-4 mb-4\">\n        <button onClick={handleAddUserRow} className=\"bg-primary text-white py-2 px-4 rounded\">\n          Add User\n        </button>\n      </div>\n\n      {/* Users List */}\n      <ul className=\"mb-4\">\n        {users.map((user) => (\n          <li\n            key={user.user_id ?? -1} // Use user_id as the key, fallback to -1 if undefined\n            className=\"flex flex-col sm:grid sm:grid-cols-5 gap-2 justify-between items-center p-2 border-b border-gray-300\"\n          >\n            {editingUserId === user.user_id ? (\n              <>\n                <div className=\"flex-1 mb-2 sm:mb-0 sm:col-span-4\">\n                  <input\n                    type=\"text\"\n                    value={editingUser?.username || ''}\n                    onChange={(e) =>\n                      setEditingUser({ ...editingUser!, username: e.target.value })\n                    }\n                    className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                    placeholder=\"Username\"\n                  />\n                  <input\n                    type=\"email\"\n                    value={editingUser?.email || ''}\n                    onChange={(e) =>\n                      setEditingUser({ ...editingUser!, email: e.target.value })\n                    }\n                    className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                    placeholder=\"Email\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={editingUser?.firstname || ''}\n                    onChange={(e) =>\n                      setEditingUser({ ...editingUser!, firstname: e.target.value })\n                    }\n                    className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                    placeholder=\"First Name\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={editingUser?.lastname || ''}\n                    onChange={(e) =>\n                      setEditingUser({ ...editingUser!, lastname: e.target.value })\n                    }\n                    className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                    placeholder=\"Last Name\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={editingUser?.city || ''}\n                    onChange={(e) =>\n                      setEditingUser({ ...editingUser!, city: e.target.value })\n                    }\n                    className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                    placeholder=\"City\"\n                  />\n                </div>\n                {/* Move buttons to the bottom and align to the left */}\n                <div className=\"flex sm:col-span-5 space-x-2\">\n                  <button onClick={handleSaveUser} className=\"bg-secondary text-white py-2 px-4 rounded\">\n                    Save\n                  </button>\n                  <button\n                    onClick={() => {\n                      setEditingUserId(null);\n                      setEditingUser(null);\n                    }}\n                    className=\"bg-gray-500 text-white py-2 px-4 rounded\"\n                  >\n                    Cancel\n                  </button>\n                  <button onClick={() => handleDeleteUser(user.user_id ?? -1)} className=\"bg-red-500 text-white py-2 px-4 rounded\">\n                    Delete\n                  </button>\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"flex-1 mb-2 sm:mb-0 sm:col-span-4\">\n                  <span>\n                    {user.username} ({user.email})\n                  </span>\n                </div>\n                <div className=\"flex sm:col-span-1 space-x-2\">\n                  <button onClick={() => handleEditUser(user)} className=\"bg-secondary text-white py-2 px-4 rounded\">\n                    Edit\n                  </button>\n                  <button onClick={() => handleDeleteUser(user.user_id ?? -1)} className=\"bg-red-500 text-white py-2 px-4 rounded\">\n                    Delete\n                  </button>\n                </div>\n              </>\n            )}\n          </li>\n        ))}\n\n        {/* Add New User Row */}\n        {newUser && (\n          <li\n            key=\"new-user\"\n            className=\"flex flex-col sm:grid sm:grid-cols-5 gap-2 justify-between items-center p-2 border-b border-gray-300\"\n          >\n            <div className=\"flex-1 mb-2 sm:mb-0 sm:col-span-4\">\n              <input\n                type=\"text\"\n                value={newUser.username}\n                onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"Username\"\n              />\n              <input\n                type=\"email\"\n                value={newUser.email}\n                onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"Email\"\n              />\n              <input\n                type=\"text\"\n                value={newUser.firstname}\n                onChange={(e) => setNewUser({ ...newUser, firstname: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"First Name\"\n              />\n              <input\n                type=\"text\"\n                value={newUser.lastname}\n                onChange={(e) => setNewUser({ ...newUser, lastname: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"Last Name\"\n              />\n              <input\n                type=\"text\"\n                value={newUser.city}\n                onChange={(e) => setNewUser({ ...newUser, city: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"City\"\n              />\n              <input\n                type=\"password\"\n                value={newUser.password}\n                onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n                className=\"input p-2 border border-gray-300 rounded mb-2 w-full\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <div className=\"flex sm:col-span-1 space-x-2\">\n              <button onClick={handleSaveNewUser} className=\"bg-secondary text-white py-2 px-4 rounded\">\n                Save\n              </button>\n              <button onClick={() => setNewUser(null)} className=\"bg-gray-500 text-white py-2 px-4 rounded\">\n                Cancel\n              </button>\n            </div>\n          </li>\n        )}\n      </ul>\n\n      {/* Add User Button at the Bottom */}\n      <div className=\"flex space-x-4 mb-4\">\n        <button onClick={handleAddUserRow} className=\"bg-primary text-white py-2 px-4 rounded\">\n          Add User\n        </button>\n      </div>\n\n      {/* Action Buttons at the Bottom */}\n      <div className=\"flex space-x-4 mb-4\">\n        <button onClick={handleDeleteAllUsers} className=\"bg-red-500 text-white py-2 px-4 rounded\">\n          Delete All Users\n        </button>\n        <button onClick={handleTruncateUsersTable} className=\"bg-red-600 text-white py-2 px-4 rounded\">\n          Truncate Users Table\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Users;\n","// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: () => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!localStorage.getItem('token'));\n\n  const login = () => {\n    setIsAuthenticated(true);\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    setIsAuthenticated(!!token);\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","import { defineRuntimeConfig } from '@modern-js/runtime';\n\nexport default defineRuntimeConfig({});\n","// src/pages/Settings.tsx\nimport { FaUsers, FaUserShield, FaCogs } from 'react-icons/fa'; // FaCogs added for RolesComponents\nimport { useState } from 'react';\nimport { useNavigate } from '@modern-js/runtime/router';\n\nconst Settings = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigate = useNavigate();\n\n  const icons = [\n    { name: 'User Manager', icon: <FaUsers className=\"text-5xl\" />, action: () => navigate('#users') },\n    { name: 'User Role Manager', icon: <FaUserShield className=\"text-5xl\" />, action: () => navigate('#roles') },\n    { name: 'Roles-Components Manager', icon: <FaCogs className=\"text-5xl\" />, action: () => navigate('#roles-components') }, // Added RolesComponents Manager\n  ];\n\n  const filteredIcons = icons.filter((icon) =>\n    icon.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex flex-col items-center h-full text-white p-4 overflow-y-auto\">\n      {/* Search Bar */}\n      <div className=\"w-full max-w-md mb-8 mt-2\">\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          placeholder=\"Search settings...\"\n          className=\"w-full py-2 px-4 rounded-full text-black bg-gray-100 outline-none shadow-sm border border-secondary border-opacity-50 placeholder-gray-500 focus:placeholder-transparent transition-all duration-300\"\n          style={{ marginTop: '10px' }}\n        />\n      </div>\n\n      {/* Icon Grid */}\n      <div className=\"grid grid-cols-2 gap-10\">\n        {filteredIcons.map((icon, index) => (\n          <div\n            key={index}\n            className=\"flex flex-col items-center cursor-pointer\"\n            onClick={icon.action}\n          >\n            <div className=\"p-6 bg-primary text-white rounded-full hover:bg-[#e68f24] transition-all duration-300\">\n              {icon.icon}\n            </div>\n            <span className=\"mt-4 text-lg text-primary\">{icon.name}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","// src/pages/Dashboard.tsx\nimport type React from 'react';\n\nconst Dashboard: React.FC = () => {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen\">\n      <h1 className=\"text-2xl font-bold\">Welcome</h1>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","// src/routes/layout.tsx\nimport './index.css';\nimport { NavLink, useLocation, useNavigate } from '@modern-js/runtime/router';\nimport { useEffect, useState } from 'react';\nimport { FaHome, FaCog, FaTable, FaServer } from 'react-icons/fa'; // Import FaServer for ApiTracking\nimport Dashboard from './dashboard/Dashboard';\nimport Users from '../components/Users';\nimport Roles from '../components/Roles';\nimport Settings from '../pages/Settings';\nimport UserProfileDropdown from '../components/UserProfileDropdown';\nimport SidePanel from '../components/SidePanel';\nimport RolesComponents from '../components/RolesComponents';\nimport LoginForm from '../components/LoginForm';\nimport Modal from '../components/Modal';\nimport ProtectedComponent from '../components/ProtectedComponent';\nimport PaymentPostResponseTable from './mupayapi/components/PaymentPostResponseTable';\nimport ApiTracking from './mupayapi/pages/ApiTracking'; // Import ApiTracking\nimport CRDBPaymentTest from './mupayapi/components/pay1'; // Import CRDB Payment Test\nimport { AuthProvider } from '../context/AuthContext';\n\nconst Layout = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [initialLoad, setInitialLoad] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    if (initialLoad) {\n      if (!location.hash) {\n        navigate('#dashboard', { replace: true });\n      }\n      setInitialLoad(false);\n    }\n\n    // Open the modal when navigating to #login\n    if (location.hash === '#login') {\n      setIsModalOpen(true);\n    } else {\n      setIsModalOpen(false);\n    }\n  }, [initialLoad, location.hash, navigate]);\n\n  const handleProtectedRouteAccess = (hash: string, event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    event.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      navigate('#login', { state: { from: hash } });\n    } else {\n      navigate(hash);\n    }\n  };\n\n  const getActiveClass = (hash: string) =>\n    location.hash === hash\n      ? 'text-[#e68f24] border-[#911841]'\n      : 'text-[#911841] border-transparent';\n\n  return (\n    <AuthProvider>\n      <div className=\"relative min-h-screen overflow-hidden\">\n        {/* Navigation Bar */}\n        <nav className=\"fixed top-0 left-0 right-0 bg-white shadow-md z-50\">\n          <div className=\"flex justify-between items-center py-1 px-3 relative\">\n            {/* SidePanel Toggle Icon */}\n            <SidePanel />\n\n            <div className=\"flex items-center space-x-3\">\n              {/* Dashboard and Settings Links */}\n              <NavLink\n                to=\"#dashboard\"\n                className={`flex flex-col items-center ${getActiveClass('#dashboard')}`}\n              >\n                <FaHome className=\"text-lg\" />\n                <span className=\"text-xs\">Dashboard</span>\n              </NavLink>\n              <NavLink\n                to=\"#settings\"\n                className={`flex flex-col items-center ${getActiveClass('#settings')}`}\n                onClick={(event) => handleProtectedRouteAccess('#settings', event)}\n              >\n                <FaCog className=\"text-lg\" />\n                <span className=\"text-xs\">Settings</span>\n              </NavLink>\n              <NavLink\n                to=\"#api-tracking\"\n                className={`flex flex-col items-center ${getActiveClass('#api-tracking')}`}\n                onClick={(event) => handleProtectedRouteAccess('#api-tracking', event)}\n              >\n                <FaServer className=\"text-lg\" />\n                <span className=\"text-xs\">API Tracking</span>\n              </NavLink>\n\n            </div>\n\n            {/* UserProfileDropdown */}\n            <div className=\"relative\">\n              <UserProfileDropdown />\n            </div>\n          </div>\n        </nav>\n\n        {/* Page Content */}\n        <main className=\"pt-16 h-full overflow-auto bg-gray-100\">\n          {location.hash === '#dashboard' && <Dashboard />}\n          {location.hash === '#users' && (\n            <ProtectedComponent component={Users} componentPath=\"src/components/Users.tsx\" />\n          )}\n          {location.hash === '#roles' && (\n            <ProtectedComponent component={Roles} componentPath=\"src/components/Roles.tsx\" />\n          )}\n          {location.hash === '#roles-components' && (\n            <ProtectedComponent component={RolesComponents} componentPath=\"src/components/RolesComponents.tsx\" />\n          )}\n          {location.hash === '#payment-post-response-table' && (\n            <ProtectedComponent component={PaymentPostResponseTable} componentPath=\"src/routes/mupayapi/components/PaymentPostResponseTable.tsx\" />\n          )}\n          {location.hash === '#api-tracking' && (\n            <ProtectedComponent component={ApiTracking} componentPath=\"src/routes/mupayapi/pages/ApiTracking.tsx\" />\n          )}\n          {location.hash === '#crdb-payment-test' && ( // Render CRDB Payment Test\n            <ProtectedComponent component={CRDBPaymentTest} componentPath=\"src/routes/mupayapi/components/pay1.tsx\" />\n          )}\n          {location.hash === '#settings' && (\n            <ProtectedComponent component={Settings} componentPath=\"src/pages/Settings.tsx\" />\n          )}\n          {location.hash === '#unauthorized' && <div>Unauthorized Access</div>}\n          {location.hash === '#error' && <div>An Error Occurred</div>}\n\n          {/* Modal to display the LoginForm */}\n          <Modal isOpen={isModalOpen} onClose={() => navigate('#dashboard')}>\n            <LoginForm />\n          </Modal>\n        </main>\n      </div>\n    </AuthProvider>\n  );\n};\n\nexport default Layout;\n","// api/pay1.ts\nimport axios from 'axios';\n\nconst baseURL = process.env.MODERN_API_BASE_URL_LIVE_CRDB || 'http://localhost:8080';\nconst apiClient = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interface for the request and response bodies\ninterface VerificationRequest {\n  paymentReference: string;\n  token: string;\n  checksum: string;\n  institutionID: string;\n}\n\ninterface VerificationResponse {\n  status: number;\n  statusDesc: string;\n  data: {\n    payerName: string;\n    amount: number;\n    amountType: string;\n    currency: string;\n    paymentReference: string;\n    paymentType: string;\n    paymentDesc: string;\n    payerID: string;\n  };\n}\n\ninterface PaymentPostRequest {\n  payerName: string;\n  amount: string;\n  amountType: string;\n  currency: string;\n  paymentReference: string;\n  paymentType: string;\n  payerMobile: string;\n  paymentDesc: string;\n  payerID: string;\n  transactionRef: string;\n  transactionChannel: string;\n  transactionDate: string;\n  token: string;\n  checksum: string;\n  institutionID: string;\n}\n\ninterface PaymentPostResponse {\n  status: number;\n  statusDesc: string;\n  data: {\n    receipt: string;\n  };\n}\n\n// Functions to handle the requests\nexport const verifyPayment = async (data: VerificationRequest): Promise<VerificationResponse> => {\n  const response = await apiClient.post<VerificationResponse>('/crdb/v1/verification.php', data);\n  return response.data;\n};\n\nexport const postPayment = async (data: PaymentPostRequest): Promise<PaymentPostResponse> => {\n  const response = await apiClient.post<PaymentPostResponse>('/crdb/v1/payment-post.php', data);\n  return response.data;\n};\n","import axios from 'axios';\n\n// Base URL for API\nconst baseURL = process.env.MODERN_API_BASE_URL2 || 'http://localhost:8002';\n\n// PaymentPostResponse interface representing the structure of payment post response\nexport interface PaymentPostResponse {\n  pprno: number;\n  applicant_id: number;\n  receipt: string | null;\n  oreceipt: string | null;\n  status: string | null;\n  status_desc: string | null;\n  muda: string | null;\n  student_id: number | null;\n  pay_type: string | null;\n  payer_name: string | null;\n  invoice_no: string | null;\n  bank_ac: string | null;\n  amount_tzs: number | null;\n  balance_tzs: number | null;\n  aina: string | null;\n  payment_desc: string | null;\n  channeli: string | null;\n  transaction_no: string | null;\n}\n\n// Function to fetch all payment post responses\nexport const fetchPaymentPostResponses = async (): Promise<PaymentPostResponse[]> => {\n  try {\n    const response = await axios.get<PaymentPostResponse[]>(`${baseURL}/paymentpostres`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching payment post responses:', error);\n    throw error; // Rethrow the error for further handling\n  }\n};\n","// src/components/ErrorResponse.tsx\nimport React from 'react';\nimport Modal from './Modal';\n\ninterface ErrorResponseProps {\n  message: string;\n  additionalInfo?: {\n    status?: number;\n    statusDesc?: string;\n    details?: string;\n  };\n  onClose: () => void;\n}\n\nconst ErrorResponse: React.FC<ErrorResponseProps> = ({ message, additionalInfo, onClose }) => {\n  return (\n    <Modal isOpen={true} onClose={onClose}>\n      <h3 className=\"text-lg font-bold text-red-500 mb-4\">Error</h3>\n      <p>{message}</p>\n      {additionalInfo?.statusDesc && (\n        <p className=\"text-red-400 mt-2\">\n          <strong>Status Description:</strong> {additionalInfo.statusDesc}\n        </p>\n      )}\n      {additionalInfo?.details && (\n        <p className=\"text-red-400 mt-2\">\n          <strong>Details:</strong> {additionalInfo.details}\n        </p>\n      )}\n    </Modal>\n  );\n};\n\nexport default ErrorResponse;\n","// src/components/Modal.tsx\nimport React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center z-50\">\n      <div className=\"absolute inset-0 bg-black opacity-50\" onClick={onClose}></div>\n      <div className=\"relative bg-white rounded-lg shadow-lg p-8 w-full max-w-md\">\n        <button\n          className=\"absolute top-2 right-2 text-gray-600 hover:text-gray-900 focus:outline-none\"\n          onClick={onClose}\n        >\n          &times;\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { fetchPaymentPostResponses, PaymentPostResponse } from '../api/paymentPostResponse';\n\nconst PaymentPostResponseTable: React.FC = () => {\n  const [responses, setResponses] = useState<PaymentPostResponse[]>([]);\n  const [filteredResponses, setFilteredResponses] = useState<PaymentPostResponse[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [rowsPerPage] = useState<number>(10); // Showing 10 rows per page\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const topPaginationRef = useRef<HTMLDivElement>(null);\n  const bottomPaginationRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchPaymentPostResponses();\n        setResponses(data);\n        setFilteredResponses(data);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load payment post responses');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Search and filter logic\n  useEffect(() => {\n    const filteredData = responses.filter((response) =>\n      response.payer_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      response.pprno?.toString().toLowerCase().includes(searchQuery.toLowerCase()) || // Convert number to string\n      response.applicant_id?.toString().toLowerCase().includes(searchQuery.toLowerCase()) // Convert number to string\n    );\n    setFilteredResponses(filteredData);\n  }, [searchQuery, responses]);\n\n  // Calculate pagination\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n  const currentResponses = filteredResponses.slice(indexOfFirstRow, indexOfLastRow);\n  const totalPages = Math.ceil(filteredResponses.length / rowsPerPage);\n\n  const maxPageNumbersToShow = 5;\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const getPaginationGroup = () => {\n    let start = Math.floor((currentPage - 1) / maxPageNumbersToShow) * maxPageNumbersToShow;\n    return new Array(Math.min(maxPageNumbersToShow, totalPages - start))\n      .fill(null)\n      .map((_, index) => start + index + 1);\n  };\n\n  // Hide top pagination when bottom pagination is visible\n  const handleScroll = () => {\n    if (bottomPaginationRef.current && topPaginationRef.current) {\n      const bottomPosition = bottomPaginationRef.current.getBoundingClientRect().top;\n      const topPosition = topPaginationRef.current.getBoundingClientRect().bottom;\n\n      if (bottomPosition <= window.innerHeight && topPosition < bottomPosition) {\n        topPaginationRef.current.style.display = 'none';\n      } else {\n        topPaginationRef.current.style.display = 'flex';\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  if (loading) {\n    return <div className=\"text-center p-5\">Loading...</div>;\n  }\n\n  if (error) {\n    return <div className=\"text-center text-red-500 p-5\">{error}</div>;\n  }\n\n  return (\n    <div className=\"p-4\">\n\n      <div className=\"sticky top-0 z-20 bg-transparent\">\n        <div className=\"bg-[#EEF0F1]\"> {/* Apply background to this wrapper div */}\n          {/* Payment Post Responses heading */}\n          <h1 className=\"text-[18px] font-bold mb-4 text-center text-primary sticky top-0 z-20\">\n            Payment Post Responses\n          </h1>\n\n          {/* Search bar */}\n          <div className=\"mb-6 flex justify-center sticky top-[38px] z-10\">\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search by PPR No, Applicant ID, or Payer Name\"\n              className=\"w-[306px] md:w-1/2 p-2 border border-gray-300 rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-primary text-[13px] md:text-base bg-transparent\"\n            />\n          </div>\n\n          {/* Pagination at the top for mobile */}\n          <div className=\"md:hidden mt-4 mb-4 flex justify-center space-x-2 items-center sticky top-[76px] z-10\">\n            {/* Double left arrow */}\n            <button\n              onClick={() => handlePageChange(1)}\n              disabled={currentPage === 1}\n              className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n            >\n              &laquo;\n            </button>\n\n            {/* Single left arrow */}\n            <button\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n              className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n            >\n              &lt;\n            </button>\n\n            {getPaginationGroup().map((page) => (\n              <button\n                key={page}\n                onClick={() => handlePageChange(page)}\n                className={`px-2 py-1 rounded-lg ${\n                  currentPage === page ? 'bg-primary text-white' : 'bg-gray-200'\n                } hover:bg-primary hover:text-white`}\n              >\n                {page}\n              </button>\n            ))}\n\n            {/* Single right arrow */}\n            <button\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n              className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n            >\n              &gt;\n            </button>\n\n            {/* Double right arrow */}\n            <button\n              onClick={() => handlePageChange(totalPages)}\n              disabled={currentPage === totalPages}\n              className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n            >\n              &raquo;\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto px-2 md:px-0\"> {/* Added padding on mobile */}\n        <table className=\"min-w-full border-collapse block md:table bg-white rounded-lg shadow\">\n          {/* Remove table headers for mobile view */}\n          <thead className=\"hidden md:table-header-group bg-secondary text-white\">\n            <tr className=\"border border-gray-300 md:border-none block md:table-row\">\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">PPR No</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Applicant ID</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Receipt</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Status</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Amount (TZS)</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Balance (TZS)</th>\n              <th className=\"block md:table-cell text-left p-2 text-[13px]\">Payer Name</th>\n            </tr>\n          </thead>\n          <tbody className=\"block md:table-row-group\">\n            {currentResponses.map((response) => (\n              <tr key={response.pprno} className=\"border border-gray-300 md:border-none block md:table-row\">\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">PPR No: </span>{response.pprno}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Applicant ID: </span>{response.applicant_id}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Receipt: </span>{response.receipt || 'N/A'}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Status: </span>{response.status || 'N/A'}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Amount (TZS): </span>{response.amount_tzs ?? 'N/A'}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Balance (TZS): </span>{response.balance_tzs ?? 'N/A'}\n                </td>\n                <td className=\"block md:table-cell text-left p-2 text-[13px]\">\n                  <span className=\"md:hidden font-bold text-secondary\">Payer Name: </span>{response.payer_name || 'N/A'}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n\n      {/* Pagination at the bottom */}\n      <div className=\"mt-4 mb-4 flex justify-center space-x-2 items-center\" ref={bottomPaginationRef}>\n        {/* Double left arrow */}\n        <button\n          onClick={() => handlePageChange(1)}\n          disabled={currentPage === 1}\n          className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n        >\n          &laquo;\n        </button>\n\n        {/* Single left arrow */}\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n          className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n        >\n          &lt;\n        </button>\n\n        {getPaginationGroup().map((page) => (\n          <button\n            key={page}\n            onClick={() => handlePageChange(page)}\n            className={`px-2 py-1 rounded-lg ${\n              currentPage === page ? 'bg-primary text-white' : 'bg-gray-200'\n            } hover:bg-primary hover:text-white`}\n          >\n            {page}\n          </button>\n        ))}\n\n        {/* Single right arrow */}\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n          className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n        >\n          &gt;\n        </button>\n\n        {/* Double right arrow */}\n        <button\n          onClick={() => handlePageChange(totalPages)}\n          disabled={currentPage === totalPages}\n          className=\"px-2 py-1 rounded-lg bg-gray-200 hover:bg-primary hover:text-white disabled:bg-gray-300\"\n        >\n          &raquo;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentPostResponseTable;\n","// components/pay1.tsx\nimport React, { useState } from 'react';\nimport { verifyPayment, postPayment } from '../api/pay1';\nimport ErrorResponse from './ErrorResponse';\n\nconst Pay1Component: React.FC = () => {\n  const initialVerificationData = {\n    paymentReference: 'MU82',\n    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJtd2FuemF1bml2ZXJzaXR5IiwiaWF0IjoxNjM0MDIxNTU1fQ.CpmghOT2tMX3L6GCZ-rpGS10A2xoBNUMPKKEsAdUxAQ',\n    checksum: 'eec8eaf4b9e22eac040cd922338f2b80ead4688a',\n    institutionID: '60891604930813',\n  };\n  const initialPaymentPostData = {\n    payerName: 'HENRY, James (M)',\n    amount: '500',\n    amountType: 'FLEXIBLE',\n    currency: 'TZS',\n    paymentReference: 'MU82',\n    paymentType: '50',\n    payerMobile: '0787000000',\n    paymentDesc: 'Tuition Fee',\n    payerID: 'E300/90',\n    transactionRef: 'Fuyet355534233550tl1',\n    transactionChannel: 'IB',\n    transactionDate: '2017-06-30 14:48:42',\n    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJtd2FuemF1bml2ZXJzaXR5IiwiaWF0IjoxNjM0MDIxNTU1fQ.CpmghOT2tMX3L6GCZ-rpGS10A2xoBNUMPKKEsAdUxAQ',\n    checksum: 'eec8eaf4b9e22eac040cd922338f2b80ead4688a',\n    institutionID: '8143',\n  };\n\n  const [verificationData, setVerificationData] = useState(initialVerificationData);\n  const [paymentPostData, setPaymentPostData] = useState(initialPaymentPostData);\n  const [showVerificationFields, setShowVerificationFields] = useState(false);\n  const [editVerification, setEditVerification] = useState(false);\n  const [showPaymentFields, setShowPaymentFields] = useState(false);\n  const [editPayment, setEditPayment] = useState(false);\n  const [verificationResponse, setVerificationResponse] = useState<any>(null);\n  const [paymentResponse, setPaymentResponse] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [errorInfo, setErrorInfo] = useState<{ status?: number; statusDesc?: string; details?: string } | undefined>(undefined);\n  const [loading, setLoading] = useState({ verify: false, post: false });\n\n  const handleVerifyPayment = async () => {\n    setLoading((prev) => ({ ...prev, verify: true }));\n    try {\n      const response = await verifyPayment(verificationData);\n      setVerificationResponse(response);\n      setError(null);\n      setErrorInfo(undefined);\n    } catch (err: any) {\n      console.error('Verification Error:', err);\n      setError('Verification Error');\n      setErrorInfo({\n        status: err.response?.data?.status,\n        statusDesc: err.response?.data?.statusDesc,\n        details: err.response?.data?.message,\n      });\n    } finally {\n      setLoading((prev) => ({ ...prev, verify: false }));\n    }\n  };\n\n  const handlePostPayment = async () => {\n    setLoading((prev) => ({ ...prev, post: true }));\n    try {\n      const response = await postPayment(paymentPostData);\n      setPaymentResponse(response);\n      setError(null);\n      setErrorInfo(undefined);\n    } catch (err: any) {\n      console.error('Payment Post Error:', err);\n      setError('Payment Post Error');\n      setErrorInfo({\n        status: err.response?.data?.status,\n        statusDesc: err.response?.data?.statusDesc,\n        details: err.response?.data?.message,\n      });\n    } finally {\n      setLoading((prev) => ({ ...prev, post: false }));\n    }\n  };\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto bg-gray-50 rounded-lg shadow-md\">\n      <h1 className=\"text-2xl md:text-3xl font-bold mb-4 text-center text-gray-800\">CRDB Payment Testing</h1>\n\n      {/* Verification Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-lg md:text-xl font-semibold mb-2 text-gray-700\">Verify Payment</h2>\n        <p className=\"text-xs md:text-sm text-gray-600\">Reference: {verificationData.paymentReference}</p>\n        <div className=\"flex gap-2 mt-2\">\n          <button\n            className=\"flex-1 bg-primary text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-primary-dark transition duration-200\"\n            onClick={() => setShowVerificationFields(!showVerificationFields)}\n          >\n            Show\n          </button>\n          <button\n            className=\"flex-1 bg-secondary text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-secondary-dark transition duration-200\"\n            onClick={() => setEditVerification(true)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"flex-1 bg-blue-500 text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-blue-600 transition duration-200\"\n            onClick={() => {\n              handleVerifyPayment();\n              setEditVerification(false);\n            }}\n            disabled={loading.verify}\n          >\n            {loading.verify ? 'Loading...' : 'Verify'}\n          </button>\n        </div>\n\n        {showVerificationFields && (\n          <div className=\"mt-4\">\n            {Object.keys(initialVerificationData).map((key) => (\n              <div key={key} className=\"mb-2\">\n                <label className=\"block font-semibold text-xs md:text-sm text-gray-700\">{key}</label>\n                {editVerification ? (\n                  <input\n                    className=\"border p-1 md:p-2 w-full rounded text-xs md:text-sm\"\n                    type=\"text\"\n                    value={verificationData[key as keyof typeof verificationData]}\n                    onChange={(e) => setVerificationData({ ...verificationData, [key]: e.target.value })}\n                  />\n                ) : (\n                  <p className=\"text-gray-600 overflow-x-auto whitespace-pre-line break-words text-xs md:text-sm\">\n                    {verificationData[key as keyof typeof verificationData]}\n                  </p>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n        {verificationResponse && (\n          <pre className=\"mt-4 bg-gray-200 p-2 rounded overflow-auto text-xs md:text-sm\">{JSON.stringify(verificationResponse, null, 2)}</pre>\n        )}\n      </div>\n\n      {/* Payment Section */}\n      <div>\n        <h2 className=\"text-lg md:text-xl font-semibold mb-2 text-gray-700\">Post Payment</h2>\n        <p className=\"text-xs md:text-sm text-gray-600\">Reference: {paymentPostData.paymentReference}</p>\n        <div className=\"flex gap-2 mt-2\">\n          <button\n            className=\"flex-1 bg-primary text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-primary-dark transition duration-200\"\n            onClick={() => setShowPaymentFields(!showPaymentFields)}\n          >\n            Show\n          </button>\n          <button\n            className=\"flex-1 bg-secondary text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-secondary-dark transition duration-200\"\n            onClick={() => setEditPayment(true)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"flex-1 bg-green-500 text-white py-1 md:py-2 rounded text-sm md:text-base hover:bg-green-600 transition duration-200\"\n            onClick={() => {\n              handlePostPayment();\n              setEditPayment(false);\n            }}\n            disabled={loading.post}\n          >\n            {loading.post ? 'Loading...' : 'Post Payment'}\n          </button>\n        </div>\n\n        {showPaymentFields && (\n          <div className=\"mt-4\">\n            {Object.keys(initialPaymentPostData).map((key) => (\n              <div key={key} className=\"mb-2\">\n                <label className=\"block font-semibold text-xs md:text-sm text-gray-700\">{key}</label>\n                {editPayment ? (\n                  <input\n                    className=\"border p-1 md:p-2 w-full rounded text-xs md:text-sm\"\n                    type=\"text\"\n                    value={paymentPostData[key as keyof typeof paymentPostData]}\n                    onChange={(e) => setPaymentPostData({ ...paymentPostData, [key]: e.target.value })}\n                  />\n                ) : (\n                  <p className=\"text-gray-600 overflow-x-auto whitespace-pre-line break-words text-xs md:text-sm\">\n                    {paymentPostData[key as keyof typeof paymentPostData]}\n                  </p>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n        {paymentResponse && (\n          <pre className=\"mt-4 bg-gray-200 p-2 rounded overflow-auto text-xs md:text-sm\">{JSON.stringify(paymentResponse, null, 2)}</pre>\n        )}\n      </div>\n\n      {/* Error Modal */}\n      {error && (\n        <ErrorResponse\n          message={error}\n          additionalInfo={errorInfo}\n          onClose={() => {\n            setError(null);\n            setErrorInfo(undefined);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Pay1Component;\n","// src/pages/ApiTracking.tsx\nimport { useState } from 'react';\nimport { FaFileInvoiceDollar } from 'react-icons/fa'; // Icon for PaymentPostResponseTable\nimport { FaMoneyCheckAlt } from 'react-icons/fa'; // Icon for Pay1\nimport { useNavigate } from '@modern-js/runtime/router';\n\nconst ApiTracking = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigate = useNavigate();\n\n  const icons = [\n    {\n      name: 'Payment Post Response',\n      icon: <FaFileInvoiceDollar className=\"text-xl\" />, // Adjusted size to 13px\n      action: () => navigate('#payment-post-response-table')\n    },\n    {\n      name: 'CRDB Payment Test',\n      icon: <FaMoneyCheckAlt className=\"text-xl\" />, // Icon for Pay1\n      action: () => navigate('#crdb-payment-test')\n    }\n  ];\n\n  const filteredIcons = icons.filter((icon) =>\n    icon.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex flex-col items-center h-full text-black p-4 overflow-y-auto\">\n      {/* Search Bar */}\n      <div className=\"w-full max-w-md mb-8 mt-2\">\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          placeholder=\"Search API tracking...\"\n          className=\"w-full py-2 px-4 rounded-full text-black bg-gray-100 outline-none shadow-sm border border-secondary border-opacity-50 placeholder-gray-500 focus:placeholder-transparent transition-all duration-300\"\n          style={{ marginTop: '10px' }}\n        />\n      </div>\n\n      {/* Icon Grid */}\n      <div className=\"grid grid-cols-2 gap-10\">\n        {filteredIcons.map((icon, index) => (\n          <div\n            key={index}\n            className=\"flex flex-col items-center cursor-pointer\"\n            onClick={icon.action}\n          >\n            <div className=\"flex flex-col items-center\">\n              <div className=\"p-4 bg-primary text-white rounded-full hover:bg-[#e68f24] transition-all duration-300\">\n                {icon.icon}\n              </div>\n              <span className=\"mt-2 text-xs text-primary text-center\">{icon.name}</span> {/* Adjusted size to 13px */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ApiTracking;\n","import \"core-js\";"],"names":[],"mappings":"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}