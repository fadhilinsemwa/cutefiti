"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var adapterCopy_exports = {};
__export(adapterCopy_exports, {
  builderPluginAdpaterCopy: () => builderPluginAdpaterCopy
});
module.exports = __toCommonJS(adapterCopy_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_fs_extra = __toESM(require("@modern-js/utils/fs-extra"));
var import_shared = require("../shared");
const builderPluginAdpaterCopy = (options) => ({
  name: "builder-plugin-adapter-rspack-copy",
  setup(api) {
    let publicPath;
    api.modifyBundlerChain((chain, { CHAIN_ID }) => {
      chain.plugin(CHAIN_ID.PLUGIN.COPY).tap((args) => {
        var _args_;
        return [
          {
            patterns: [
              ...((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.patterns) || [],
              ...createConfigBuiltinCopy(options)
            ]
          }
        ];
      });
    });
    api.modifyRspackConfig((config) => {
      var _config_output;
      publicPath = (_config_output = config.output) === null || _config_output === void 0 ? void 0 : _config_output.publicPath;
    });
    api.onDevCompileDone(async () => {
      await transformHtmlFiles();
    });
    api.onAfterBuild(async () => {
      await transformHtmlFiles();
    });
    async function transformHtmlFiles() {
      var _normalizedConfig_output_distPath;
      const { normalizedConfig } = options;
      const publicDir = import_path.default.resolve(((_normalizedConfig_output_distPath = normalizedConfig.output.distPath) === null || _normalizedConfig_output_distPath === void 0 ? void 0 : _normalizedConfig_output_distPath.root) || "./dist", "./public");
      if (!import_fs_extra.default.existsSync(publicDir) || !import_fs_extra.default.statSync(publicDir).isDirectory()) {
        return;
      }
      const HTML_REGEXP = /\.html?$/;
      const filepaths = (await import_fs_extra.default.readdir(publicDir)).map((file) => import_path.default.resolve(publicDir, file));
      await Promise.all(filepaths.filter((file) => HTML_REGEXP.test(file)).map(async (file) => {
        const content = await import_fs_extra.default.readFile(file, "utf-8");
        if (publicPath && typeof publicPath === "string") {
          await import_fs_extra.default.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, (0, import_utils.removeTailSlash)(publicPath)));
        } else {
          import_utils.logger.warn(`Expect get a string from \`publicPath\`, but receive \`${typeof publicPath}\`.`);
          await import_fs_extra.default.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, (0, import_utils.removeTailSlash)("/")));
        }
      }));
    }
  }
});
function createConfigBuiltinCopy(options) {
  const { normalizedConfig, appContext } = options;
  const { publicDir } = (0, import_shared.createCopyInfo)(appContext, normalizedConfig);
  return [
    {
      from: "**/*",
      to: "public",
      context: publicDir,
      noErrorOnMissing: true
    }
  ];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builderPluginAdpaterCopy
});
