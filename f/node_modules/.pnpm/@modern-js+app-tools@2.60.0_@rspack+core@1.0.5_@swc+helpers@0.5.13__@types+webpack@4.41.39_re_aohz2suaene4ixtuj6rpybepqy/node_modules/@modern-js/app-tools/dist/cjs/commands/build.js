"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var build_exports = {};
__export(build_exports, {
  build: () => build
});
module.exports = __toCommonJS(build_exports);
var import_core = require("@modern-js/core");
var import_utils = require("@modern-js/utils");
var import_config = require("../utils/config");
var import_loadPlugins = require("../utils/loadPlugins");
var import_register = require("../utils/register");
var import_routes = require("../utils/routes");
const build = async (api, options) => {
  var _resolvedConfig_source;
  if (options === null || options === void 0 ? void 0 : options.analyze) {
    process.env.BUNDLE_ANALYZE = "true";
  }
  let resolvedConfig = api.useResolvedConfigContext();
  const appContext = api.useAppContext();
  const hookRunners = api.useHookRunners();
  await (0, import_loadPlugins.loadServerPlugins)(api, appContext.appDirectory, appContext.metaName);
  if (appContext.moduleType && appContext.moduleType === "module") {
    var _resolvedConfig_source1;
    const { registerEsm } = await import("../esm/register-esm.mjs");
    await registerEsm({
      appDir: appContext.appDirectory,
      distDir: appContext.distDirectory,
      alias: (_resolvedConfig_source1 = resolvedConfig.source) === null || _resolvedConfig_source1 === void 0 ? void 0 : _resolvedConfig_source1.alias
    });
  }
  await (0, import_register.registerCompiler)(appContext.appDirectory, appContext.distDirectory, resolvedConfig === null || resolvedConfig === void 0 ? void 0 : (_resolvedConfig_source = resolvedConfig.source) === null || _resolvedConfig_source === void 0 ? void 0 : _resolvedConfig_source.alias);
  const { apiOnly } = appContext;
  if (apiOnly) {
    const { appDirectory: appDirectory2, distDirectory: distDirectory2, serverConfigFile: serverConfigFile2 } = appContext;
    await hookRunners.beforeBuild({
      // "null" bundlerConfigs
      bundlerConfigs: void 0
    });
    await (0, import_config.buildServerConfig)({
      appDirectory: appDirectory2,
      distDirectory: distDirectory2,
      configFile: serverConfigFile2
    });
    await (0, import_routes.generateRoutes)(appContext);
    await hookRunners.afterBuild({
      // "null" stats
      stats: void 0
    });
    return;
  }
  resolvedConfig = {
    ...resolvedConfig,
    cliOptions: options
  };
  import_core.ResolvedConfigContext.set(resolvedConfig);
  const { distDirectory, appDirectory, serverConfigFile } = appContext;
  await (0, import_config.buildServerConfig)({
    appDirectory,
    distDirectory,
    configFile: serverConfigFile
  });
  import_utils.logger.info("Starting production build...");
  if (!appContext.builder) {
    throw new Error("Expect the Builder to have been initialized, But the appContext.builder received `undefined`");
  }
  await appContext.builder.build();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  build
});
