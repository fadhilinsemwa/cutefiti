"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var commands_exports = {};
__export(commands_exports, {
  buildCommand: () => buildCommand,
  deployCommand: () => deployCommand,
  devCommand: () => devCommand,
  inspectCommand: () => inspectCommand,
  newCommand: () => newCommand,
  serverCommand: () => serverCommand,
  upgradeCommand: () => upgradeCommand
});
module.exports = __toCommonJS(commands_exports);
var import_uni_builder = require("@modern-js/uni-builder");
var import_utils = require("@modern-js/utils");
var import_locale = require("../locale");
const devCommand = async (program, api) => {
  const runner = api.useHookRunners();
  const devToolMetas = await runner.registerDev();
  const devProgram = program.command("dev").alias("start").usage("[options]").description(import_locale.i18n.t(import_locale.localeKeys.command.dev.describe)).option("-c --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).option("-e --entry [entry...]", import_locale.i18n.t(import_locale.localeKeys.command.dev.entry)).option("--analyze", import_locale.i18n.t(import_locale.localeKeys.command.shared.analyze)).option("--api-only", import_locale.i18n.t(import_locale.localeKeys.command.dev.apiOnly)).option("--web-only", import_locale.i18n.t(import_locale.localeKeys.command.dev.webOnly)).action(async (options) => {
    const { dev } = await import("./dev.js");
    await dev(api, options);
  });
  for (const meta of devToolMetas) {
    if (!meta.subCommands) {
      continue;
    }
    for (const subCmd of meta.subCommands) {
      devProgram.command(subCmd).action(async (options = {}) => {
        const { appDirectory } = api.useAppContext();
        const { isTypescript } = await import("@modern-js/utils");
        await runner.beforeDevTask(meta);
        await meta.action(options, {
          isTsProject: isTypescript(appDirectory)
        });
      });
    }
  }
};
const buildCommand = async (program, api) => {
  const runner = api.useHookRunners();
  const platformBuilders = await runner.registerBuildPlatform();
  const buildProgram = program.command("build").usage("[options]").description(import_locale.i18n.t(import_locale.localeKeys.command.build.describe)).option("-c --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).option("--analyze", import_locale.i18n.t(import_locale.localeKeys.command.shared.analyze)).action(async (options) => {
    const { build } = await import("./build.js");
    await build(api, options);
  });
  for (const platformBuilder of platformBuilders) {
    const platforms = (0, import_uni_builder.castArray)(platformBuilder.platform);
    for (const platform of platforms) {
      buildProgram.command(platform).action(async () => {
        const { appDirectory } = api.useAppContext();
        const { isTypescript } = await import("@modern-js/utils");
        await runner.beforeBuildPlatform(platformBuilders);
        await platformBuilder.build(platform, {
          isTsProject: isTypescript(appDirectory)
        });
      });
    }
  }
};
const serverCommand = (program, api) => {
  program.command("serve").usage("[options]").description(import_locale.i18n.t(import_locale.localeKeys.command.serve.describe)).option("--api-only", import_locale.i18n.t(import_locale.localeKeys.command.dev.apiOnly)).option("-c --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).action(async () => {
    const { start } = await import("./serve.js");
    await start(api);
  });
};
const deployCommand = (program, api) => {
  program.command("deploy").usage("[options]").option("-c --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).option("-s --skip-build", import_locale.i18n.t(import_locale.localeKeys.command.shared.skipBuild)).description(import_locale.i18n.t(import_locale.localeKeys.command.deploy.describe)).action(async (options) => {
    if (!options.skipBuild) {
      const { build } = await import("./build.js");
      await build(api);
    }
    const { deploy } = await import("./deploy.js");
    await deploy(api, options);
    process.exit(0);
  });
};
const newCommand = (program, locale) => {
  program.command("new").usage("[options]").description(import_locale.i18n.t(import_locale.localeKeys.command.new.describe)).option("--config-file <configFile>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).option("--lang <lang>", import_locale.i18n.t(import_locale.localeKeys.command.new.lang)).option("-c, --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.new.config)).option("-d, --debug", import_locale.i18n.t(import_locale.localeKeys.command.new.debug), false).option("--dist-tag <tag>", import_locale.i18n.t(import_locale.localeKeys.command.new.distTag)).option("--registry", import_locale.i18n.t(import_locale.localeKeys.command.new.registry)).option("--no-need-install", import_locale.i18n.t(import_locale.localeKeys.command.shared.noNeedInstall)).action(async (options) => {
    await (0, import_utils.newAction)({
      ...options,
      locale: options.lang || locale
    }, "mwa");
  });
};
const inspectCommand = (program, api) => {
  program.command("inspect").description("inspect the internal configs").option(`--env <env>`, import_locale.i18n.t(import_locale.localeKeys.command.inspect.env), "development").option("--output <output>", import_locale.i18n.t(import_locale.localeKeys.command.inspect.output), "./").option("--verbose", import_locale.i18n.t(import_locale.localeKeys.command.inspect.verbose)).option("-c --config <config>", import_locale.i18n.t(import_locale.localeKeys.command.shared.config)).action(async (options) => {
    const { inspect } = await import("./inspect.js");
    inspect(api, options);
  });
};
const upgradeCommand = (program) => {
  program.command("upgrade").allowUnknownOption().option("-h --help", "Show help").action(async () => {
    await (0, import_utils.upgradeAction)();
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildCommand,
  deployCommand,
  devCommand,
  inspectCommand,
  newCommand,
  serverCommand,
  upgradeCommand
});
