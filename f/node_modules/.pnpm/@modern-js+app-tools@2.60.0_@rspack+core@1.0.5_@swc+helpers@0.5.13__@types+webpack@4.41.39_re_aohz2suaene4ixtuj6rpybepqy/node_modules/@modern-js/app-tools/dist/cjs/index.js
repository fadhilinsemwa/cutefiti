"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  appTools: () => appTools,
  default: () => src_default,
  dev: () => import_dev.dev,
  mergeConfig: () => import_core.mergeConfig
});
module.exports = __toCommonJS(src_exports);
var import_path = __toESM(require("path"));
var import_language_detector = require("@modern-js/plugin-i18n/language-detector");
var import_plugin_lint = require("@modern-js/plugin-lint");
var import_utils = require("@modern-js/utils");
var import_hooks = require("./hooks");
var import_locale = require("./locale");
var import_analyze = __toESM(require("./plugins/analyze"));
var import_deploy = __toESM(require("./plugins/deploy"));
var import_initialize = __toESM(require("./plugins/initialize"));
var import_serverBuild = __toESM(require("./plugins/serverBuild"));
var import_commands = require("./commands");
var import_generateWatchFiles = require("./utils/generateWatchFiles");
var import_restart = require("./utils/restart");
var import_dev = require("./commands/dev");
var import_core = require("@modern-js/core");
__reExport(src_exports, require("./defineConfig"), module.exports);
__reExport(src_exports, require("./types"), module.exports);
const appTools = (options = {
  // default webpack to be compatible with original projects
  bundler: "webpack"
}) => ({
  name: "@modern-js/app-tools",
  post: [
    "@modern-js/plugin-initialize",
    "@modern-js/plugin-analyze",
    "@modern-js/plugin-ssr",
    "@modern-js/plugin-document",
    "@modern-js/plugin-state",
    "@modern-js/plugin-router",
    "@modern-js/plugin-router-v5",
    "@modern-js/plugin-polyfill"
  ],
  registerHook: import_hooks.hooks,
  usePlugins: [
    (0, import_initialize.default)({
      bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
        "rspack",
        "experimental-rspack"
      ].includes(options.bundler) ? "rspack" : "webpack"
    }),
    (0, import_analyze.default)({
      bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
        "rspack",
        "experimental-rspack"
      ].includes(options.bundler) ? "rspack" : "webpack"
    }),
    (0, import_serverBuild.default)(),
    (0, import_plugin_lint.lintPlugin)(),
    (0, import_deploy.default)()
  ],
  setup: (api) => {
    const appContext = api.useAppContext();
    api.setAppContext({
      ...appContext,
      toolsType: "app-tools"
    });
    const locale = (0, import_language_detector.getLocaleLanguage)();
    import_locale.i18n.changeLanguage({
      locale
    });
    return {
      async beforeConfig() {
        var _userConfig_output;
        const userConfig = api.useConfigContext();
        const appContext2 = api.useAppContext();
        if ((_userConfig_output = userConfig.output) === null || _userConfig_output === void 0 ? void 0 : _userConfig_output.tempDir) {
          api.setAppContext({
            ...appContext2,
            internalDirectory: import_path.default.resolve(appContext2.appDirectory, userConfig.output.tempDir)
          });
        }
      },
      async commands({ program }) {
        await (0, import_commands.devCommand)(program, api);
        await (0, import_commands.buildCommand)(program, api);
        (0, import_commands.serverCommand)(program, api);
        (0, import_commands.deployCommand)(program, api);
        (0, import_commands.newCommand)(program, locale);
        (0, import_commands.inspectCommand)(program, api);
        (0, import_commands.upgradeCommand)(program);
      },
      async prepare() {
        const command = (0, import_utils.getCommand)();
        if (command === "deploy") {
          const isSkipBuild = [
            "-s",
            "--skip-build"
          ].some((tag) => {
            return (0, import_utils.getArgv)().includes(tag);
          });
          if (isSkipBuild) {
            return;
          }
        }
        if (command === "dev" || command === "start" || command === "build" || command === "deploy") {
          const resolvedConfig = api.useResolvedConfigContext();
          if (resolvedConfig.output.cleanDistPath) {
            const appContext2 = api.useAppContext();
            await (0, import_utils.emptyDir)(appContext2.distDirectory);
          }
        }
      },
      async watchFiles() {
        const appContext2 = api.useAppContext();
        const config = api.useResolvedConfigContext();
        return await (0, import_generateWatchFiles.generateWatchFiles)(appContext2, config.source.configDir);
      },
      // 这里会被 core/initWatcher 监听的文件变动触发，如果是 src 目录下的文件变动，则不做 restart
      async fileChange(e) {
        const { filename, eventType, isPrivate } = e;
        if (!isPrivate && (eventType === "change" || eventType === "unlink")) {
          const { closeServer } = await import("./utils/createServer.js");
          await closeServer();
          await (0, import_restart.restart)(api.useHookRunners(), filename);
        }
      },
      async beforeRestart() {
        (0, import_utils.cleanRequireCache)([
          require.resolve("./plugins/analyze")
        ]);
      }
    };
  }
});
var src_default = appTools;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  appTools,
  dev,
  mergeConfig,
  ...require("./defineConfig"),
  ...require("./types")
});
