"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var en_exports = {};
__export(en_exports, {
  EN_LOCALE: () => EN_LOCALE
});
module.exports = __toCommonJS(en_exports);
const EN_LOCALE = {
  command: {
    shared: {
      analyze: "analyze bundle size",
      config: "specify the configuration file, which can be a relative or absolute path",
      skipBuild: "skip the build phase",
      noNeedInstall: "not run install command"
    },
    dev: {
      describe: "starting the dev server",
      entry: "compiler by entry",
      apiOnly: "start api server only",
      webOnly: "start web server only",
      selectEntry: "Please select the entry that needs to be built",
      requireEntry: "You must choose at least one entry"
    },
    build: {
      describe: "build the app for production"
    },
    serve: {
      describe: "preview the production build locally"
    },
    deploy: {
      describe: "deploy the application"
    },
    new: {
      describe: "enable optional features or add a new entry",
      debug: "using debug mode to log something",
      config: "set default generator config(json string)",
      distTag: `use specified tag version for it's generator`,
      registry: "set npm registry url to run npm command",
      lang: "set new command language(en or zh)"
    },
    inspect: {
      env: "specify env mode",
      output: "specify inspect content output path",
      verbose: "show full function definitions in output"
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EN_LOCALE
});
