"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getBundleEntry_exports = {};
__export(getBundleEntry_exports, {
  getBundleEntry: () => getBundleEntry
});
module.exports = __toCommonJS(getBundleEntry_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_getFileSystemEntry = require("./getFileSystemEntry");
var import_utils2 = require("./utils");
const ensureExtensions = (file) => {
  if (!import_path.default.extname(file)) {
    return (0, import_utils.findExists)(import_utils.JS_EXTENSIONS.map((ext) => `${file}${ext}`)) || file;
  }
  return file;
};
const isDirectory = (file) => !import_path.default.extname(file);
const ifAlreadyExists = (entrypoints, checked) => entrypoints.some((entrypoint) => {
  if (ensureExtensions(entrypoint.entry) === ensureExtensions(checked.entry)) {
    checked.entryName = entrypoint.entryName;
    return true;
  }
  if ((0, import_utils2.isSubDirOrEqual)(entrypoint.entry, checked.entry) || (0, import_utils2.isSubDirOrEqual)(checked.entry, entrypoint.entry)) {
    throw new Error(`Entry configuration conflicts
 Your configuration: ${checked.entry}.
 Default entrypoint: ${entrypoint.entry}
 Please reset source.entries or set source.disableDefaultEntries to disable the default entry rules.`);
  }
  return false;
});
const getBundleEntry = async (hookRunners, appContext, config) => {
  const { appDirectory, packageName } = appContext;
  const { disableDefaultEntries, entries, entriesDir, mainEntryName } = config.source;
  const defaults = disableDefaultEntries ? [] : await (0, import_getFileSystemEntry.getFileSystemEntry)(hookRunners, appContext, config);
  if (entries) {
    Object.keys(entries).forEach((name) => {
      const value = entries[name];
      const entryName = typeof value === "string" ? value : value.entry;
      const isAutoMount = typeof value === "string" ? true : !value.disableMount;
      const entrypoint = {
        entryName: name,
        isMainEntry: false,
        entry: (0, import_utils.ensureAbsolutePath)(appDirectory, entryName),
        absoluteEntryDir: isDirectory((0, import_utils.ensureAbsolutePath)(appDirectory, entryName)) ? (0, import_utils.ensureAbsolutePath)(appDirectory, entryName) : import_path.default.dirname((0, import_utils.ensureAbsolutePath)(appDirectory, entryName)),
        isAutoMount,
        customBootstrap: typeof value === "string" ? false : value.customBootstrap && (0, import_utils.ensureAbsolutePath)(appDirectory, value.customBootstrap),
        fileSystemRoutes: import_utils.fs.statSync((0, import_utils.ensureAbsolutePath)(appDirectory, entryName)).isDirectory() ? {} : void 0,
        isCustomSourceEntry: true
      };
      if (!ifAlreadyExists(defaults, entrypoint)) {
        defaults.push(entrypoint);
      }
    });
  }
  if (!disableDefaultEntries) {
    const entriesDirAbs = (0, import_utils.ensureAbsolutePath)(appDirectory, entriesDir || "");
    const found = defaults.find(({ entryName, entry, nestedRoutesEntry = "" }) => entryName === packageName || import_path.default.dirname(entry) === entriesDirAbs || import_path.default.dirname(nestedRoutesEntry) === entriesDirAbs);
    if (found) {
      found.entryName = mainEntryName || import_utils.MAIN_ENTRY_NAME;
      found.isMainEntry = true;
    }
  }
  return defaults;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getBundleEntry
});
