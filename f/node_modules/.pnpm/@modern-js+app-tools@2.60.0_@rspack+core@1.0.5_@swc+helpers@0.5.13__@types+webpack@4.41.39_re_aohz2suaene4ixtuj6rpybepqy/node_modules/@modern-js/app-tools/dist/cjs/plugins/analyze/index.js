"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var analyze_exports = {};
__export(analyze_exports, {
  default: () => analyze_default
});
module.exports = __toCommonJS(analyze_exports);
var path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_builder = require("../../builder");
var import_config = require("../../config");
var import_config2 = require("../../utils/config");
var import_getSelectedEntries = require("../../utils/getSelectedEntries");
var import_printInstructions = require("../../utils/printInstructions");
var import_routes = require("../../utils/routes");
var import_utils2 = require("./utils");
const debug = (0, import_utils.createDebugger)("plugin-analyze");
var analyze_default = ({ bundler }) => ({
  name: "@modern-js/plugin-analyze",
  post: [
    "@modern-js/runtime"
  ],
  setup: (api) => {
    let pagesDir = [];
    let nestedRouteEntries = [];
    return {
      async prepare() {
        var _resolvedConfig_source;
        let appContext = api.useAppContext();
        const resolvedConfig = api.useResolvedConfigContext();
        const hookRunners = api.useHookRunners();
        try {
          if ((0, import_utils2.checkIsBuildCommands)()) {
            import_utils.fs.emptydirSync(appContext.internalDirectory);
          }
        } catch {
        }
        const apiOnly = await (0, import_utils.isApiOnly)(appContext.appDirectory, (_resolvedConfig_source = resolvedConfig.source) === null || _resolvedConfig_source === void 0 ? void 0 : _resolvedConfig_source.entriesDir, appContext.apiDirectory);
        await hookRunners.addRuntimeExports();
        if (apiOnly) {
          const { routes: routes2 } = await hookRunners.modifyServerRoutes({
            routes: []
          });
          debug(`server routes: %o`, routes2);
          appContext = {
            ...api.useAppContext(),
            apiOnly,
            serverRoutes: routes2
          };
          api.setAppContext(appContext);
          return;
        }
        const [{ getBundleEntry }, { getServerRoutes }, { getHtmlTemplate }] = await Promise.all([
          import("./getBundleEntry.js"),
          import("./getServerRoutes.js"),
          import("./getHtmlTemplate.js")
        ]);
        const { entrypoints } = await hookRunners.modifyEntrypoints({
          entrypoints: await getBundleEntry(hookRunners, appContext, resolvedConfig)
        });
        debug(`entrypoints: %o`, entrypoints);
        const initialRoutes = getServerRoutes(entrypoints, {
          appContext,
          config: resolvedConfig
        });
        const { routes } = await hookRunners.modifyServerRoutes({
          routes: initialRoutes
        });
        debug(`server routes: %o`, routes);
        appContext = {
          ...api.useAppContext(),
          entrypoints,
          serverRoutes: routes
        };
        api.setAppContext(appContext);
        nestedRouteEntries = entrypoints.map((point) => point.nestedRoutesEntry).filter(Boolean);
        pagesDir = entrypoints.map((point) => point.entry).filter((entry) => entry && !path.extname(entry)).concat(nestedRouteEntries);
        const htmlTemplates = await getHtmlTemplate(entrypoints, api, {
          appContext,
          config: resolvedConfig
        });
        debug(`html templates: %o`, htmlTemplates);
        await hookRunners.addDefineTypes();
        debug(`add Define Types`);
        let checkedEntries = entrypoints.map((point) => point.entryName);
        if ((0, import_utils.isDevCommand)()) {
          const { entry } = (0, import_utils.minimist)((0, import_utils.getArgv)());
          checkedEntries = await (0, import_getSelectedEntries.getSelectedEntries)(typeof entry === "string" ? entry.split(",") : entry, entrypoints);
        }
        appContext = {
          ...api.useAppContext(),
          entrypoints,
          checkedEntries,
          apiOnly,
          serverRoutes: routes,
          htmlTemplates
        };
        api.setAppContext(appContext);
        if ((0, import_utils2.checkIsBuildCommands)()) {
          await hookRunners.generateEntryCode({
            entrypoints
          });
          const normalizedConfig = api.useResolvedConfigContext();
          const createBuilderForModern = await (0, import_builder.createBuilderGenerator)(bundler);
          const builder = await createBuilderForModern({
            normalizedConfig,
            appContext
          });
          builder.onBeforeBuild(async ({ bundlerConfigs, isFirstCompile }) => {
            if (!isFirstCompile) {
              return;
            }
            const hookRunners2 = api.useHookRunners();
            await (0, import_routes.generateRoutes)(appContext);
            await hookRunners2.beforeBuild({
              bundlerConfigs
            });
          });
          builder.onAfterBuild(async ({ stats }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.afterBuild({
              stats
            });
            await (0, import_config2.emitResolvedConfig)(appContext.appDirectory, normalizedConfig);
          });
          builder.onDevCompileDone(async ({ isFirstCompile }) => {
            const hookRunners2 = api.useHookRunners();
            hookRunners2.afterDev({
              isFirstCompile
            });
            if (isFirstCompile) {
              (0, import_printInstructions.printInstructions)(hookRunners2, appContext, normalizedConfig);
            }
          });
          builder.onBeforeCreateCompiler(async ({ bundlerConfigs }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.beforeCreateCompiler({
              bundlerConfigs
            });
          });
          builder.onAfterCreateCompiler(async ({ compiler }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.afterCreateCompiler({
              compiler
            });
          });
          builder.addPlugins(resolvedConfig.builderPlugins);
          appContext = {
            ...api.useAppContext(),
            builder
          };
          api.setAppContext(appContext);
        }
      },
      watchFiles() {
        return {
          files: pagesDir,
          isPrivate: true
        };
      },
      resolvedConfig({ resolved }) {
        const appContext = api.useAppContext();
        const config = (0, import_config.initialNormalizedConfig)(resolved, appContext, bundler);
        return {
          resolved: config
        };
      }
    };
  }
});
