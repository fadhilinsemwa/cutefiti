"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  checkIsBuildCommands: () => checkIsBuildCommands,
  getServerCombinedModueFile: () => getServerCombinedModueFile,
  isSubDirOrEqual: () => isSubDirOrEqual,
  parseModule: () => parseModule,
  replaceWithAlias: () => replaceWithAlias,
  walkDirectory: () => walkDirectory
});
module.exports = __toCommonJS(utils_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_es_module_lexer = require("es-module-lexer");
var import_esbuild = require("esbuild");
const walkDirectory = (dir) => import_fs.default.readdirSync(dir).reduce((previous, filename) => {
  const filePath = import_path.default.join(dir, filename);
  if (import_fs.default.statSync(filePath).isDirectory()) {
    return [
      ...previous,
      ...walkDirectory(filePath)
    ];
  } else {
    return [
      ...previous,
      filePath
    ];
  }
}, []);
const replaceWithAlias = (base, filePath, alias) => {
  if (filePath.includes(base)) {
    return (0, import_utils.normalizeToPosixPath)(import_path.default.join(alias, import_path.default.relative(base, filePath)));
  } else {
    return filePath;
  }
};
const parseModule = async ({ source, filename }) => {
  let content = source;
  if (import_utils.JS_EXTENSIONS.some((ext) => filename.endsWith(ext))) {
    const result = await (0, import_esbuild.transform)(content, {
      loader: import_path.default.extname(filename).slice(1),
      format: "esm"
    });
    content = result.code;
  }
  return await (0, import_es_module_lexer.parse)(content);
};
const getServerCombinedModueFile = (internalDirectory, entryName) => {
  return import_path.default.join(internalDirectory, entryName, "server-loader-combined.js");
};
const checkIsBuildCommands = () => {
  const buildCommands = [
    "dev",
    "start",
    "build",
    "inspect",
    "deploy",
    "dev-worker"
  ];
  const command = (0, import_utils.getCommand)();
  return buildCommands.includes(command);
};
const isSubDirOrEqual = (parent, child) => {
  if (parent === child) {
    return true;
  }
  const relative = import_path.default.relative(parent, child);
  const isSubdir = relative && !relative.startsWith("..") && !import_path.default.isAbsolute(relative);
  return Boolean(isSubdir);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkIsBuildCommands,
  getServerCombinedModueFile,
  isSubDirOrEqual,
  parseModule,
  replaceWithAlias,
  walkDirectory
});
