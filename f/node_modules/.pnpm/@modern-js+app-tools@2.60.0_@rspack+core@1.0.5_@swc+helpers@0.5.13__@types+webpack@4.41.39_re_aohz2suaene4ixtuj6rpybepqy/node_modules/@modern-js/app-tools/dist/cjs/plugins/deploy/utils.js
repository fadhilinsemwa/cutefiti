"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  genPluginImportsCode: () => genPluginImportsCode,
  getPluginsCode: () => getPluginsCode,
  getProjectUsage: () => getProjectUsage,
  serverAppContenxtTemplate: () => serverAppContenxtTemplate
});
module.exports = __toCommonJS(utils_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
const serverAppContenxtTemplate = (appContext) => {
  const { appDirectory, sharedDirectory, apiDirectory, lambdaDirectory, metaName } = appContext;
  return {
    sharedDirectory: `path.join(__dirname, "${import_path.default.relative(appDirectory, sharedDirectory)}")`,
    apiDirectory: `path.join(__dirname, "${import_path.default.relative(appDirectory, apiDirectory)}")`,
    lambdaDirectory: `path.join(__dirname, "${import_path.default.relative(appDirectory, lambdaDirectory)}")`,
    metaName
  };
};
const getPluginsCode = (plugins) => `[${plugins.map((_, index) => `plugin_${index}()`).join(",")}]`;
const genPluginImportsCode = (plugins) => {
  return plugins.map((plugin, index) => `
      let plugin_${index} = require('${plugin}')
      plugin_${index} = plugin_${index}.default || plugin_${index}
      `).join(";\n");
};
const getProjectUsage = (appDirectory, distDirectory) => {
  const routeJSON = import_path.default.join(distDirectory, import_utils.ROUTE_SPEC_FILE);
  const { routes } = import_utils.fs.readJSONSync(routeJSON);
  let useSSR = false;
  let useAPI = false;
  routes.forEach((route) => {
    if (route.isSSR) {
      useSSR = true;
    }
    if (route.isApi) {
      useAPI = true;
    }
  });
  const useWebServer = (0, import_utils.isDepExists)(appDirectory, "@modern-js/plugin-server");
  return {
    useSSR,
    useAPI,
    useWebServer
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  genPluginImportsCode,
  getPluginsCode,
  getProjectUsage,
  serverAppContenxtTemplate
});
