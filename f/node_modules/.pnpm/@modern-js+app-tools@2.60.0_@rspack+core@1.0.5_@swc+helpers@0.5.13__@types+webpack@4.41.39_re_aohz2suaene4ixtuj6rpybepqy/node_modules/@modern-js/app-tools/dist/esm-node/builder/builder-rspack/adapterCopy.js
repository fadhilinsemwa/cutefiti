import path from "path";
import { logger, removeTailSlash } from "@modern-js/utils";
import fs from "@modern-js/utils/fs-extra";
import { createCopyInfo } from "../shared";
const builderPluginAdpaterCopy = (options) => ({
  name: "builder-plugin-adapter-rspack-copy",
  setup(api) {
    let publicPath;
    api.modifyBundlerChain((chain, { CHAIN_ID }) => {
      chain.plugin(CHAIN_ID.PLUGIN.COPY).tap((args) => {
        var _args_;
        return [
          {
            patterns: [
              ...((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.patterns) || [],
              ...createConfigBuiltinCopy(options)
            ]
          }
        ];
      });
    });
    api.modifyRspackConfig((config) => {
      var _config_output;
      publicPath = (_config_output = config.output) === null || _config_output === void 0 ? void 0 : _config_output.publicPath;
    });
    api.onDevCompileDone(async () => {
      await transformHtmlFiles();
    });
    api.onAfterBuild(async () => {
      await transformHtmlFiles();
    });
    async function transformHtmlFiles() {
      var _normalizedConfig_output_distPath;
      const { normalizedConfig } = options;
      const publicDir = path.resolve(((_normalizedConfig_output_distPath = normalizedConfig.output.distPath) === null || _normalizedConfig_output_distPath === void 0 ? void 0 : _normalizedConfig_output_distPath.root) || "./dist", "./public");
      if (!fs.existsSync(publicDir) || !fs.statSync(publicDir).isDirectory()) {
        return;
      }
      const HTML_REGEXP = /\.html?$/;
      const filepaths = (await fs.readdir(publicDir)).map((file) => path.resolve(publicDir, file));
      await Promise.all(filepaths.filter((file) => HTML_REGEXP.test(file)).map(async (file) => {
        const content = await fs.readFile(file, "utf-8");
        if (publicPath && typeof publicPath === "string") {
          await fs.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, removeTailSlash(publicPath)));
        } else {
          logger.warn(`Expect get a string from \`publicPath\`, but receive \`${typeof publicPath}\`.`);
          await fs.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, removeTailSlash("/")));
        }
      }));
    }
  }
});
function createConfigBuiltinCopy(options) {
  const { normalizedConfig, appContext } = options;
  const { publicDir } = createCopyInfo(appContext, normalizedConfig);
  return [
    {
      from: "**/*",
      to: "public",
      context: publicDir,
      noErrorOnMissing: true
    }
  ];
}
export {
  builderPluginAdpaterCopy
};
