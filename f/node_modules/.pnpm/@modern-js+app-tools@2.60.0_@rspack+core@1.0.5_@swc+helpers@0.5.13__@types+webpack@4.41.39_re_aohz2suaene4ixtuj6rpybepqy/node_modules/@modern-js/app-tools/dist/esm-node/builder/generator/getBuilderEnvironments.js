import { SERVICE_WORKER_ENVIRONMENT_NAME } from "@modern-js/uni-builder";
import { isProd, isSSR, isServiceWorker, isUseSSRBundle } from "@modern-js/utils";
function getBuilderEnvironments(normalizedConfig, appContext) {
  const entries = {};
  const { entrypoints = [], checkedEntries } = appContext;
  for (const { entryName, internalEntry, entry } of entrypoints) {
    if (checkedEntries && !checkedEntries.includes(entryName)) {
      continue;
    }
    const finalEntry = internalEntry || entry;
    if (entryName in entries) {
      entries[entryName].push(finalEntry);
    } else {
      entries[entryName] = [
        finalEntry
      ];
    }
  }
  const serverEntries = {};
  for (const entry in entries) {
    const v = entries[entry];
    serverEntries[entry] = v.map((entry2) => entry2.replace("index.jsx", "index.server.jsx")).map((entry2) => entry2.replace("bootstrap.jsx", "bootstrap.server.jsx"));
  }
  const environments = {
    web: {
      output: {
        target: "web"
      },
      source: {
        entry: entries
      }
    }
  };
  const useNodeTarget = isProd() ? isUseSSRBundle(normalizedConfig) : isSSR(normalizedConfig);
  if (useNodeTarget) {
    environments.node = {
      output: {
        target: "node"
      },
      source: {
        entry: serverEntries
      }
    };
  }
  const useWorkerTarget = isServiceWorker(normalizedConfig);
  if (useWorkerTarget) {
    environments[SERVICE_WORKER_ENVIRONMENT_NAME] = {
      output: {
        target: "web-worker"
      },
      source: {
        entry: serverEntries
      }
    };
  }
  return environments;
}
export {
  getBuilderEnvironments
};
