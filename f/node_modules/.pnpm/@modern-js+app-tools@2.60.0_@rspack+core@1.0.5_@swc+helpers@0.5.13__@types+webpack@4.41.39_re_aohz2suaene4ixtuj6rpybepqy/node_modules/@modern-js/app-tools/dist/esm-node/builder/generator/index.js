import { createUniBuilder } from "@modern-js/uni-builder";
import { mergeRsbuildConfig } from "@rsbuild/core";
import { createBuilderProviderConfig } from "./createBuilderProviderConfig";
import { getBuilderEnvironments } from "./getBuilderEnvironments";
async function generateBuilder(options, bundlerType) {
  const { normalizedConfig, appContext } = options;
  const builderConfig = createBuilderProviderConfig(normalizedConfig, appContext);
  const environments = getBuilderEnvironments(normalizedConfig, appContext);
  builderConfig.environments = builderConfig.environments ? mergeRsbuildConfig(environments, builderConfig.environments) : environments;
  const builder = await createUniBuilder({
    cwd: appContext.appDirectory,
    frameworkConfigPath: appContext.configFile || void 0,
    bundlerType,
    config: builderConfig
  });
  await applyBuilderPlugins(builder, options);
  return builder;
}
async function applyBuilderPlugins(builder, options) {
  const { builderPluginAdapterBasic, builderPluginAdapterHtml, builderPluginAdapterSSR } = await import("../shared/builderPlugins/index.js");
  builder.addPlugins([
    builderPluginAdapterBasic(),
    builderPluginAdapterSSR(options),
    builderPluginAdapterHtml(options)
  ]);
  const { normalizedConfig } = options;
  if (!normalizedConfig.output.disableNodePolyfill) {
    const { pluginNodePolyfill } = await import("@rsbuild/plugin-node-polyfill");
    builder.addPlugins([
      pluginNodePolyfill()
    ]);
  }
}
export {
  generateBuilder
};
