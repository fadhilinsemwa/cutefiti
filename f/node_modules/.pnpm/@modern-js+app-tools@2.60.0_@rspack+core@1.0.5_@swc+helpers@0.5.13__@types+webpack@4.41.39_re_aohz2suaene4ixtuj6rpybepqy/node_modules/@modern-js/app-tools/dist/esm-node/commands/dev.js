import path from "node:path";
import { ResolvedConfigContext } from "@modern-js/core";
import { applyPlugins } from "@modern-js/prod-server";
import { createDevServer } from "@modern-js/server";
import { DEFAULT_DEV_HOST, SERVER_DIR, getMeta, logger } from "@modern-js/utils";
import { buildServerConfig } from "../utils/config";
import { setServer } from "../utils/createServer";
import { loadServerPlugins } from "../utils/loadPlugins";
import { printInstructions } from "../utils/printInstructions";
import { registerCompiler } from "../utils/register";
import { generateRoutes } from "../utils/routes";
const dev = async (api, options, devServerOptions) => {
  var _normalizedConfig_source, _normalizedConfig_tools, _normalizedConfig_dev;
  if (options.analyze) {
    process.env.BUNDLE_ANALYZE = "true";
  }
  let normalizedConfig = api.useResolvedConfigContext();
  const appContext = api.useAppContext();
  const hookRunners = api.useHookRunners();
  if (appContext.moduleType && appContext.moduleType === "module") {
    var _normalizedConfig_source1;
    const { registerEsm } = await import("../esm/register-esm.mjs");
    await registerEsm({
      appDir: appContext.appDirectory,
      distDir: appContext.distDirectory,
      alias: (_normalizedConfig_source1 = normalizedConfig.source) === null || _normalizedConfig_source1 === void 0 ? void 0 : _normalizedConfig_source1.alias
    });
  }
  await registerCompiler(appContext.appDirectory, appContext.distDirectory, normalizedConfig === null || normalizedConfig === void 0 ? void 0 : (_normalizedConfig_source = normalizedConfig.source) === null || _normalizedConfig_source === void 0 ? void 0 : _normalizedConfig_source.alias);
  normalizedConfig = {
    ...normalizedConfig,
    cliOptions: options
  };
  ResolvedConfigContext.set(normalizedConfig);
  const { appDirectory, distDirectory, port, apiOnly, serverConfigFile, metaName, serverRoutes } = appContext;
  await buildServerConfig({
    appDirectory,
    distDirectory,
    configFile: serverConfigFile,
    watch: true
  });
  const meta = getMeta(metaName);
  const serverConfigPath = path.resolve(appDirectory, SERVER_DIR, `${meta}.server`);
  await hookRunners.beforeDev();
  if (!appContext.builder && !apiOnly) {
    throw new Error("Expect the Builder to have been initialized, But the appContext.builder received `undefined`");
  }
  await generateRoutes(appContext);
  const pluginInstances = await loadServerPlugins(api, appDirectory, metaName);
  const serverOptions = {
    metaName,
    dev: {
      port,
      https: normalizedConfig.dev.https,
      host: normalizedConfig.dev.host,
      ...(_normalizedConfig_tools = normalizedConfig.tools) === null || _normalizedConfig_tools === void 0 ? void 0 : _normalizedConfig_tools.devServer
    },
    appContext: {
      appDirectory,
      internalDirectory: appContext.internalDirectory,
      apiDirectory: appContext.apiDirectory,
      lambdaDirectory: appContext.lambdaDirectory,
      sharedDirectory: appContext.sharedDirectory
    },
    serverConfigPath,
    routes: serverRoutes,
    pwd: appDirectory,
    config: normalizedConfig,
    serverConfigFile,
    plugins: pluginInstances,
    ...devServerOptions
  };
  const host = ((_normalizedConfig_dev = normalizedConfig.dev) === null || _normalizedConfig_dev === void 0 ? void 0 : _normalizedConfig_dev.host) || DEFAULT_DEV_HOST;
  if (apiOnly) {
    const { server } = await createDevServer({
      ...serverOptions,
      runCompile: false
    }, (devServerOptions === null || devServerOptions === void 0 ? void 0 : devServerOptions.applyPlugins) || applyPlugins);
    server.listen({
      port,
      host
    }, () => {
      printInstructions(hookRunners, appContext, normalizedConfig);
    });
  } else {
    const { server, afterListen } = await createDevServer({
      ...serverOptions,
      builder: appContext.builder
    }, (devServerOptions === null || devServerOptions === void 0 ? void 0 : devServerOptions.applyPlugins) || applyPlugins);
    server.listen({
      port,
      host
    }, async (err) => {
      if (err) {
        logger.error("Occur error %s, when start dev server", err);
      }
      logger.debug("listen dev server done");
      await afterListen();
    });
    setServer(server);
  }
};
export {
  dev
};
