import { castArray } from "@modern-js/uni-builder";
import { newAction, upgradeAction } from "@modern-js/utils";
import { i18n, localeKeys } from "../locale";
const devCommand = async (program, api) => {
  const runner = api.useHookRunners();
  const devToolMetas = await runner.registerDev();
  const devProgram = program.command("dev").alias("start").usage("[options]").description(i18n.t(localeKeys.command.dev.describe)).option("-c --config <config>", i18n.t(localeKeys.command.shared.config)).option("-e --entry [entry...]", i18n.t(localeKeys.command.dev.entry)).option("--analyze", i18n.t(localeKeys.command.shared.analyze)).option("--api-only", i18n.t(localeKeys.command.dev.apiOnly)).option("--web-only", i18n.t(localeKeys.command.dev.webOnly)).action(async (options) => {
    const { dev } = await import("./dev.js");
    await dev(api, options);
  });
  for (const meta of devToolMetas) {
    if (!meta.subCommands) {
      continue;
    }
    for (const subCmd of meta.subCommands) {
      devProgram.command(subCmd).action(async (options = {}) => {
        const { appDirectory } = api.useAppContext();
        const { isTypescript } = await import("@modern-js/utils");
        await runner.beforeDevTask(meta);
        await meta.action(options, {
          isTsProject: isTypescript(appDirectory)
        });
      });
    }
  }
};
const buildCommand = async (program, api) => {
  const runner = api.useHookRunners();
  const platformBuilders = await runner.registerBuildPlatform();
  const buildProgram = program.command("build").usage("[options]").description(i18n.t(localeKeys.command.build.describe)).option("-c --config <config>", i18n.t(localeKeys.command.shared.config)).option("--analyze", i18n.t(localeKeys.command.shared.analyze)).action(async (options) => {
    const { build } = await import("./build.js");
    await build(api, options);
  });
  for (const platformBuilder of platformBuilders) {
    const platforms = castArray(platformBuilder.platform);
    for (const platform of platforms) {
      buildProgram.command(platform).action(async () => {
        const { appDirectory } = api.useAppContext();
        const { isTypescript } = await import("@modern-js/utils");
        await runner.beforeBuildPlatform(platformBuilders);
        await platformBuilder.build(platform, {
          isTsProject: isTypescript(appDirectory)
        });
      });
    }
  }
};
const serverCommand = (program, api) => {
  program.command("serve").usage("[options]").description(i18n.t(localeKeys.command.serve.describe)).option("--api-only", i18n.t(localeKeys.command.dev.apiOnly)).option("-c --config <config>", i18n.t(localeKeys.command.shared.config)).action(async () => {
    const { start } = await import("./serve.js");
    await start(api);
  });
};
const deployCommand = (program, api) => {
  program.command("deploy").usage("[options]").option("-c --config <config>", i18n.t(localeKeys.command.shared.config)).option("-s --skip-build", i18n.t(localeKeys.command.shared.skipBuild)).description(i18n.t(localeKeys.command.deploy.describe)).action(async (options) => {
    if (!options.skipBuild) {
      const { build } = await import("./build.js");
      await build(api);
    }
    const { deploy } = await import("./deploy.js");
    await deploy(api, options);
    process.exit(0);
  });
};
const newCommand = (program, locale) => {
  program.command("new").usage("[options]").description(i18n.t(localeKeys.command.new.describe)).option("--config-file <configFile>", i18n.t(localeKeys.command.shared.config)).option("--lang <lang>", i18n.t(localeKeys.command.new.lang)).option("-c, --config <config>", i18n.t(localeKeys.command.new.config)).option("-d, --debug", i18n.t(localeKeys.command.new.debug), false).option("--dist-tag <tag>", i18n.t(localeKeys.command.new.distTag)).option("--registry", i18n.t(localeKeys.command.new.registry)).option("--no-need-install", i18n.t(localeKeys.command.shared.noNeedInstall)).action(async (options) => {
    await newAction({
      ...options,
      locale: options.lang || locale
    }, "mwa");
  });
};
const inspectCommand = (program, api) => {
  program.command("inspect").description("inspect the internal configs").option(`--env <env>`, i18n.t(localeKeys.command.inspect.env), "development").option("--output <output>", i18n.t(localeKeys.command.inspect.output), "./").option("--verbose", i18n.t(localeKeys.command.inspect.verbose)).option("-c --config <config>", i18n.t(localeKeys.command.shared.config)).action(async (options) => {
    const { inspect } = await import("./inspect.js");
    inspect(api, options);
  });
};
const upgradeCommand = (program) => {
  program.command("upgrade").allowUnknownOption().option("-h --help", "Show help").action(async () => {
    await upgradeAction();
  });
};
export {
  buildCommand,
  deployCommand,
  devCommand,
  inspectCommand,
  newCommand,
  serverCommand,
  upgradeCommand
};
