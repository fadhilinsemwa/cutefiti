import path from "path";
import { getLocaleLanguage } from "@modern-js/plugin-i18n/language-detector";
import { lintPlugin } from "@modern-js/plugin-lint";
import { cleanRequireCache, emptyDir, getArgv, getCommand } from "@modern-js/utils";
import { hooks } from "./hooks";
import { i18n } from "./locale";
import analyzePlugin from "./plugins/analyze";
import deployPlugin from "./plugins/deploy";
import initializePlugin from "./plugins/initialize";
import serverBuildPlugin from "./plugins/serverBuild";
import { buildCommand, deployCommand, devCommand, inspectCommand, newCommand, serverCommand, upgradeCommand } from "./commands";
import { generateWatchFiles } from "./utils/generateWatchFiles";
import { restart } from "./utils/restart";
import { dev } from "./commands/dev";
import { mergeConfig } from "@modern-js/core";
export * from "./defineConfig";
export * from "./types";
const appTools = (options = {
  // default webpack to be compatible with original projects
  bundler: "webpack"
}) => ({
  name: "@modern-js/app-tools",
  post: [
    "@modern-js/plugin-initialize",
    "@modern-js/plugin-analyze",
    "@modern-js/plugin-ssr",
    "@modern-js/plugin-document",
    "@modern-js/plugin-state",
    "@modern-js/plugin-router",
    "@modern-js/plugin-router-v5",
    "@modern-js/plugin-polyfill"
  ],
  registerHook: hooks,
  usePlugins: [
    initializePlugin({
      bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
        "rspack",
        "experimental-rspack"
      ].includes(options.bundler) ? "rspack" : "webpack"
    }),
    analyzePlugin({
      bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
        "rspack",
        "experimental-rspack"
      ].includes(options.bundler) ? "rspack" : "webpack"
    }),
    serverBuildPlugin(),
    lintPlugin(),
    deployPlugin()
  ],
  setup: (api) => {
    const appContext = api.useAppContext();
    api.setAppContext({
      ...appContext,
      toolsType: "app-tools"
    });
    const locale = getLocaleLanguage();
    i18n.changeLanguage({
      locale
    });
    return {
      async beforeConfig() {
        var _userConfig_output;
        const userConfig = api.useConfigContext();
        const appContext2 = api.useAppContext();
        if ((_userConfig_output = userConfig.output) === null || _userConfig_output === void 0 ? void 0 : _userConfig_output.tempDir) {
          api.setAppContext({
            ...appContext2,
            internalDirectory: path.resolve(appContext2.appDirectory, userConfig.output.tempDir)
          });
        }
      },
      async commands({ program }) {
        await devCommand(program, api);
        await buildCommand(program, api);
        serverCommand(program, api);
        deployCommand(program, api);
        newCommand(program, locale);
        inspectCommand(program, api);
        upgradeCommand(program);
      },
      async prepare() {
        const command = getCommand();
        if (command === "deploy") {
          const isSkipBuild = [
            "-s",
            "--skip-build"
          ].some((tag) => {
            return getArgv().includes(tag);
          });
          if (isSkipBuild) {
            return;
          }
        }
        if (command === "dev" || command === "start" || command === "build" || command === "deploy") {
          const resolvedConfig = api.useResolvedConfigContext();
          if (resolvedConfig.output.cleanDistPath) {
            const appContext2 = api.useAppContext();
            await emptyDir(appContext2.distDirectory);
          }
        }
      },
      async watchFiles() {
        const appContext2 = api.useAppContext();
        const config = api.useResolvedConfigContext();
        return await generateWatchFiles(appContext2, config.source.configDir);
      },
      // 这里会被 core/initWatcher 监听的文件变动触发，如果是 src 目录下的文件变动，则不做 restart
      async fileChange(e) {
        const { filename, eventType, isPrivate } = e;
        if (!isPrivate && (eventType === "change" || eventType === "unlink")) {
          const { closeServer } = await import("./utils/createServer.js");
          await closeServer();
          await restart(api.useHookRunners(), filename);
        }
      },
      async beforeRestart() {
        cleanRequireCache([
          require.resolve("./plugins/analyze")
        ]);
      }
    };
  }
});
var src_default = appTools;
export {
  appTools,
  src_default as default,
  dev,
  mergeConfig
};
