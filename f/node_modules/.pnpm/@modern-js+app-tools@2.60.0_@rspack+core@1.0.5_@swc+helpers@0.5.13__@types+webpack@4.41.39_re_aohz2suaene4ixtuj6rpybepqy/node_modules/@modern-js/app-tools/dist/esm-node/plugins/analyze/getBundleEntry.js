import path from "path";
import { fs, JS_EXTENSIONS, MAIN_ENTRY_NAME, ensureAbsolutePath, findExists } from "@modern-js/utils";
import { getFileSystemEntry } from "./getFileSystemEntry";
import { isSubDirOrEqual } from "./utils";
const ensureExtensions = (file) => {
  if (!path.extname(file)) {
    return findExists(JS_EXTENSIONS.map((ext) => `${file}${ext}`)) || file;
  }
  return file;
};
const isDirectory = (file) => !path.extname(file);
const ifAlreadyExists = (entrypoints, checked) => entrypoints.some((entrypoint) => {
  if (ensureExtensions(entrypoint.entry) === ensureExtensions(checked.entry)) {
    checked.entryName = entrypoint.entryName;
    return true;
  }
  if (isSubDirOrEqual(entrypoint.entry, checked.entry) || isSubDirOrEqual(checked.entry, entrypoint.entry)) {
    throw new Error(`Entry configuration conflicts
 Your configuration: ${checked.entry}.
 Default entrypoint: ${entrypoint.entry}
 Please reset source.entries or set source.disableDefaultEntries to disable the default entry rules.`);
  }
  return false;
});
const getBundleEntry = async (hookRunners, appContext, config) => {
  const { appDirectory, packageName } = appContext;
  const { disableDefaultEntries, entries, entriesDir, mainEntryName } = config.source;
  const defaults = disableDefaultEntries ? [] : await getFileSystemEntry(hookRunners, appContext, config);
  if (entries) {
    Object.keys(entries).forEach((name) => {
      const value = entries[name];
      const entryName = typeof value === "string" ? value : value.entry;
      const isAutoMount = typeof value === "string" ? true : !value.disableMount;
      const entrypoint = {
        entryName: name,
        isMainEntry: false,
        entry: ensureAbsolutePath(appDirectory, entryName),
        absoluteEntryDir: isDirectory(ensureAbsolutePath(appDirectory, entryName)) ? ensureAbsolutePath(appDirectory, entryName) : path.dirname(ensureAbsolutePath(appDirectory, entryName)),
        isAutoMount,
        customBootstrap: typeof value === "string" ? false : value.customBootstrap && ensureAbsolutePath(appDirectory, value.customBootstrap),
        fileSystemRoutes: fs.statSync(ensureAbsolutePath(appDirectory, entryName)).isDirectory() ? {} : void 0,
        isCustomSourceEntry: true
      };
      if (!ifAlreadyExists(defaults, entrypoint)) {
        defaults.push(entrypoint);
      }
    });
  }
  if (!disableDefaultEntries) {
    const entriesDirAbs = ensureAbsolutePath(appDirectory, entriesDir || "");
    const found = defaults.find(({ entryName, entry, nestedRoutesEntry = "" }) => entryName === packageName || path.dirname(entry) === entriesDirAbs || path.dirname(nestedRoutesEntry) === entriesDirAbs);
    if (found) {
      found.entryName = mainEntryName || MAIN_ENTRY_NAME;
      found.isMainEntry = true;
    }
  }
  return defaults;
};
export {
  getBundleEntry
};
