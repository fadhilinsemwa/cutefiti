import path from "path";
import { fs, findExists } from "@modern-js/utils";
import { HTML_PARTIALS_EXTENSIONS, HTML_PARTIALS_FOLDER } from "./constants";
import * as templates from "./templates";
var PartialPosition;
(function(PartialPosition2) {
  PartialPosition2["TOP"] = "top";
  PartialPosition2["HEAD"] = "head";
  PartialPosition2["BODY"] = "body";
  PartialPosition2["BOTTOM"] = "bottom";
  PartialPosition2["INDEX"] = "index";
})(PartialPosition || (PartialPosition = {}));
const findPartials = (dir, entryName, position) => {
  if (fs.existsSync(dir)) {
    const base = findExists(HTML_PARTIALS_EXTENSIONS.map((ext) => path.resolve(dir, `${position}${ext}`)));
    const file = entryName ? findExists(HTML_PARTIALS_EXTENSIONS.map((ext) => path.resolve(dir, entryName, `${position}${ext}`))) || base : base;
    return file ? {
      file,
      content: fs.readFileSync(file, "utf8")
    } : null;
  }
  return null;
};
const getHtmlTemplate = async (entrypoints, api, { appContext, config }) => {
  const { appDirectory, internalDirectory } = appContext;
  const { source: { configDir } } = config;
  const htmlDir = path.resolve(appDirectory, configDir || "", HTML_PARTIALS_FOLDER);
  const htmlTemplates = {};
  const partialsByEntrypoint = {};
  for (const entrypoint of entrypoints) {
    const { entryName, isMainEntry } = entrypoint;
    const name = entrypoints.length === 1 && isMainEntry ? "" : entryName;
    const customIndexTemplate = findPartials(htmlDir, name, "index");
    if (customIndexTemplate) {
      htmlTemplates[entryName] = customIndexTemplate.file;
    } else {
      const hookRunners = api.useHookRunners();
      const { partials } = await hookRunners.htmlPartials({
        entrypoint,
        partials: [
          "top",
          "head",
          "body"
        ].reduce((previous, position) => {
          const found = findPartials(htmlDir, name, position);
          previous[position] = found ? [
            found.content
          ] : [];
          return previous;
        }, {
          top: [],
          head: [],
          body: []
        })
      });
      const templatePath = path.resolve(internalDirectory, entryName, "index.html");
      fs.outputFileSync(templatePath, templates.html(partials), "utf8");
      htmlTemplates[entryName] = templatePath;
      partialsByEntrypoint[entryName] = partials;
      const bottomTemplate = findPartials(htmlDir, name, "bottom");
      if (bottomTemplate) {
        htmlTemplates[`__${entryName}-bottom__`] = bottomTemplate.content;
      }
    }
  }
  api.setAppContext({
    ...api.useAppContext(),
    partialsByEntrypoint
  });
  return htmlTemplates;
};
export {
  getHtmlTemplate
};
