import * as path from "path";
import { fs, createDebugger, getArgv, isApiOnly, isDevCommand, minimist } from "@modern-js/utils";
import { createBuilderGenerator } from "../../builder";
import { initialNormalizedConfig } from "../../config";
import { emitResolvedConfig } from "../../utils/config";
import { getSelectedEntries } from "../../utils/getSelectedEntries";
import { printInstructions } from "../../utils/printInstructions";
import { generateRoutes } from "../../utils/routes";
import { checkIsBuildCommands } from "./utils";
const debug = createDebugger("plugin-analyze");
var analyze_default = ({ bundler }) => ({
  name: "@modern-js/plugin-analyze",
  post: [
    "@modern-js/runtime"
  ],
  setup: (api) => {
    let pagesDir = [];
    let nestedRouteEntries = [];
    return {
      async prepare() {
        var _resolvedConfig_source;
        let appContext = api.useAppContext();
        const resolvedConfig = api.useResolvedConfigContext();
        const hookRunners = api.useHookRunners();
        try {
          if (checkIsBuildCommands()) {
            fs.emptydirSync(appContext.internalDirectory);
          }
        } catch {
        }
        const apiOnly = await isApiOnly(appContext.appDirectory, (_resolvedConfig_source = resolvedConfig.source) === null || _resolvedConfig_source === void 0 ? void 0 : _resolvedConfig_source.entriesDir, appContext.apiDirectory);
        await hookRunners.addRuntimeExports();
        if (apiOnly) {
          const { routes: routes2 } = await hookRunners.modifyServerRoutes({
            routes: []
          });
          debug(`server routes: %o`, routes2);
          appContext = {
            ...api.useAppContext(),
            apiOnly,
            serverRoutes: routes2
          };
          api.setAppContext(appContext);
          return;
        }
        const [{ getBundleEntry }, { getServerRoutes }, { getHtmlTemplate }] = await Promise.all([
          import("./getBundleEntry.js"),
          import("./getServerRoutes.js"),
          import("./getHtmlTemplate.js")
        ]);
        const { entrypoints } = await hookRunners.modifyEntrypoints({
          entrypoints: await getBundleEntry(hookRunners, appContext, resolvedConfig)
        });
        debug(`entrypoints: %o`, entrypoints);
        const initialRoutes = getServerRoutes(entrypoints, {
          appContext,
          config: resolvedConfig
        });
        const { routes } = await hookRunners.modifyServerRoutes({
          routes: initialRoutes
        });
        debug(`server routes: %o`, routes);
        appContext = {
          ...api.useAppContext(),
          entrypoints,
          serverRoutes: routes
        };
        api.setAppContext(appContext);
        nestedRouteEntries = entrypoints.map((point) => point.nestedRoutesEntry).filter(Boolean);
        pagesDir = entrypoints.map((point) => point.entry).filter((entry) => entry && !path.extname(entry)).concat(nestedRouteEntries);
        const htmlTemplates = await getHtmlTemplate(entrypoints, api, {
          appContext,
          config: resolvedConfig
        });
        debug(`html templates: %o`, htmlTemplates);
        await hookRunners.addDefineTypes();
        debug(`add Define Types`);
        let checkedEntries = entrypoints.map((point) => point.entryName);
        if (isDevCommand()) {
          const { entry } = minimist(getArgv());
          checkedEntries = await getSelectedEntries(typeof entry === "string" ? entry.split(",") : entry, entrypoints);
        }
        appContext = {
          ...api.useAppContext(),
          entrypoints,
          checkedEntries,
          apiOnly,
          serverRoutes: routes,
          htmlTemplates
        };
        api.setAppContext(appContext);
        if (checkIsBuildCommands()) {
          await hookRunners.generateEntryCode({
            entrypoints
          });
          const normalizedConfig = api.useResolvedConfigContext();
          const createBuilderForModern = await createBuilderGenerator(bundler);
          const builder = await createBuilderForModern({
            normalizedConfig,
            appContext
          });
          builder.onBeforeBuild(async ({ bundlerConfigs, isFirstCompile }) => {
            if (!isFirstCompile) {
              return;
            }
            const hookRunners2 = api.useHookRunners();
            await generateRoutes(appContext);
            await hookRunners2.beforeBuild({
              bundlerConfigs
            });
          });
          builder.onAfterBuild(async ({ stats }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.afterBuild({
              stats
            });
            await emitResolvedConfig(appContext.appDirectory, normalizedConfig);
          });
          builder.onDevCompileDone(async ({ isFirstCompile }) => {
            const hookRunners2 = api.useHookRunners();
            hookRunners2.afterDev({
              isFirstCompile
            });
            if (isFirstCompile) {
              printInstructions(hookRunners2, appContext, normalizedConfig);
            }
          });
          builder.onBeforeCreateCompiler(async ({ bundlerConfigs }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.beforeCreateCompiler({
              bundlerConfigs
            });
          });
          builder.onAfterCreateCompiler(async ({ compiler }) => {
            const hookRunners2 = api.useHookRunners();
            await hookRunners2.afterCreateCompiler({
              compiler
            });
          });
          builder.addPlugins(resolvedConfig.builderPlugins);
          appContext = {
            ...api.useAppContext(),
            builder
          };
          api.setAppContext(appContext);
        }
      },
      watchFiles() {
        return {
          files: pagesDir,
          isPrivate: true
        };
      },
      resolvedConfig({ resolved }) {
        const appContext = api.useAppContext();
        const config = initialNormalizedConfig(resolved, appContext, bundler);
        return {
          resolved: config
        };
      }
    };
  }
});
export {
  analyze_default as default
};
