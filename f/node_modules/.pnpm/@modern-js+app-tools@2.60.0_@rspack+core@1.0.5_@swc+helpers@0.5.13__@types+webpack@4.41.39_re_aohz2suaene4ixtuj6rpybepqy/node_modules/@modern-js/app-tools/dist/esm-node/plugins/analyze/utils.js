import fs from "fs";
import path from "path";
import { JS_EXTENSIONS, getCommand, normalizeToPosixPath } from "@modern-js/utils";
import { parse } from "es-module-lexer";
import { transform } from "esbuild";
const walkDirectory = (dir) => fs.readdirSync(dir).reduce((previous, filename) => {
  const filePath = path.join(dir, filename);
  if (fs.statSync(filePath).isDirectory()) {
    return [
      ...previous,
      ...walkDirectory(filePath)
    ];
  } else {
    return [
      ...previous,
      filePath
    ];
  }
}, []);
const replaceWithAlias = (base, filePath, alias) => {
  if (filePath.includes(base)) {
    return normalizeToPosixPath(path.join(alias, path.relative(base, filePath)));
  } else {
    return filePath;
  }
};
const parseModule = async ({ source, filename }) => {
  let content = source;
  if (JS_EXTENSIONS.some((ext) => filename.endsWith(ext))) {
    const result = await transform(content, {
      loader: path.extname(filename).slice(1),
      format: "esm"
    });
    content = result.code;
  }
  return await parse(content);
};
const getServerCombinedModueFile = (internalDirectory, entryName) => {
  return path.join(internalDirectory, entryName, "server-loader-combined.js");
};
const checkIsBuildCommands = () => {
  const buildCommands = [
    "dev",
    "start",
    "build",
    "inspect",
    "deploy",
    "dev-worker"
  ];
  const command = getCommand();
  return buildCommands.includes(command);
};
const isSubDirOrEqual = (parent, child) => {
  if (parent === child) {
    return true;
  }
  const relative = path.relative(parent, child);
  const isSubdir = relative && !relative.startsWith("..") && !path.isAbsolute(relative);
  return Boolean(isSubdir);
};
export {
  checkIsBuildCommands,
  getServerCombinedModueFile,
  isSubDirOrEqual,
  parseModule,
  replaceWithAlias,
  walkDirectory
};
