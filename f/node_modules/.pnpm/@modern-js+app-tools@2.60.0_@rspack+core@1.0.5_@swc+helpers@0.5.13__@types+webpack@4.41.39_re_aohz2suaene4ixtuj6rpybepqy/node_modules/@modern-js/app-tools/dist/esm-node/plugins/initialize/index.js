import { ensureAbsolutePath, getPort, isDev, isDevCommand } from "@modern-js/utils";
import { checkIsLegacyConfig, createDefaultConfig, createLegacyDefaultConfig, transformNormalizedConfig } from "../../config";
var initialize_default = ({ bundler }) => ({
  name: "@modern-js/plugin-initialize",
  post: [
    "@modern-js/plugin-ssr",
    "@modern-js/plugin-document",
    "@modern-js/plugin-state",
    "@modern-js/plugin-router",
    "@modern-js/plugin-router-v5",
    "@modern-js/plugin-polyfill"
  ],
  setup(api) {
    const config = () => {
      const appContext = api.useAppContext();
      const userConfig = api.useConfigContext();
      api.setAppContext({
        ...appContext,
        bundlerType: bundler
      });
      return checkIsLegacyConfig(userConfig) ? createLegacyDefaultConfig(appContext) : createDefaultConfig(appContext);
    };
    return {
      config,
      async resolvedConfig({ resolved }) {
        var _resolved_output_distPath;
        let appContext = api.useAppContext();
        const userConfig = api.useConfigContext();
        const port = await getServerPort(resolved);
        appContext = {
          ...appContext,
          port,
          distDirectory: ensureAbsolutePath(appContext.distDirectory, ((_resolved_output_distPath = resolved.output.distPath) === null || _resolved_output_distPath === void 0 ? void 0 : _resolved_output_distPath.root) || "dist")
        };
        api.setAppContext(appContext);
        const normalizedConfig = checkIsLegacyConfig(resolved) ? transformNormalizedConfig(resolved) : resolved;
        resolved._raw = userConfig;
        resolved.server = {
          ...normalizedConfig.server || {},
          port
        };
        var _normalizedConfig_autoLoadPlugins;
        resolved.autoLoadPlugins = (_normalizedConfig_autoLoadPlugins = normalizedConfig.autoLoadPlugins) !== null && _normalizedConfig_autoLoadPlugins !== void 0 ? _normalizedConfig_autoLoadPlugins : false;
        stabilizeConfig(resolved, normalizedConfig, [
          "source",
          "bff",
          "dev",
          "html",
          "output",
          "tools",
          "testing",
          "plugins",
          "builderPlugins",
          "runtime",
          "runtimeByEntries",
          "deploy",
          "performance"
        ]);
        if (bundler === "webpack") {
          resolved.security = normalizedConfig.security || {};
          resolved.experiments = normalizedConfig.experiments;
        }
        return {
          resolved
        };
      }
    };
  }
});
function stabilizeConfig(resolve, config, keys) {
  keys.forEach((key) => {
    resolve[key] = config[key] || {};
  });
}
async function getServerPort(config) {
  const prodPort = Number(process.env.PORT) || config.server.port || 8080;
  if (isDev() && isDevCommand()) {
    return getPort(Number(process.env.PORT) || config.dev.port || prodPort);
  }
  return prodPort;
}
export {
  initialize_default as default
};
