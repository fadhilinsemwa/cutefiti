import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
import { _ as _type_of } from "@swc/helpers/_/_type_of";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import path from "path";
import { logger, removeTailSlash } from "@modern-js/utils";
import fs from "@modern-js/utils/fs-extra";
import { createCopyInfo } from "../shared";
var builderPluginAdpaterCopy = function(options) {
  return {
    name: "builder-plugin-adapter-rspack-copy",
    setup: function setup(api) {
      var publicPath;
      api.modifyBundlerChain(function(chain, param) {
        var CHAIN_ID = param.CHAIN_ID;
        chain.plugin(CHAIN_ID.PLUGIN.COPY).tap(function(args) {
          var _args_;
          return [
            {
              patterns: _to_consumable_array(((_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.patterns) || []).concat(_to_consumable_array(createConfigBuiltinCopy(options)))
            }
          ];
        });
      });
      api.modifyRspackConfig(function(config) {
        var _config_output;
        publicPath = (_config_output = config.output) === null || _config_output === void 0 ? void 0 : _config_output.publicPath;
      });
      api.onDevCompileDone(/* @__PURE__ */ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return [
                4,
                transformHtmlFiles()
              ];
            case 1:
              _state.sent();
              return [
                2
              ];
          }
        });
      }));
      api.onAfterBuild(/* @__PURE__ */ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              return [
                4,
                transformHtmlFiles()
              ];
            case 1:
              _state.sent();
              return [
                2
              ];
          }
        });
      }));
      function transformHtmlFiles() {
        return _transformHtmlFiles.apply(this, arguments);
      }
      function _transformHtmlFiles() {
        _transformHtmlFiles = /** transform public/*.html manaully */
        _async_to_generator(function() {
          var _normalizedConfig_output_distPath, normalizedConfig, publicDir, HTML_REGEXP, filepaths;
          return _ts_generator(this, function(_state) {
            switch (_state.label) {
              case 0:
                normalizedConfig = options.normalizedConfig;
                publicDir = path.resolve(((_normalizedConfig_output_distPath = normalizedConfig.output.distPath) === null || _normalizedConfig_output_distPath === void 0 ? void 0 : _normalizedConfig_output_distPath.root) || "./dist", "./public");
                if (!fs.existsSync(publicDir) || !fs.statSync(publicDir).isDirectory()) {
                  return [
                    2
                  ];
                }
                HTML_REGEXP = /\.html?$/;
                return [
                  4,
                  fs.readdir(publicDir)
                ];
              case 1:
                filepaths = _state.sent().map(function(file) {
                  return path.resolve(publicDir, file);
                });
                return [
                  4,
                  Promise.all(filepaths.filter(function(file) {
                    return HTML_REGEXP.test(file);
                  }).map(function() {
                    var _ref = _async_to_generator(function(file) {
                      var content;
                      return _ts_generator(this, function(_state2) {
                        switch (_state2.label) {
                          case 0:
                            return [
                              4,
                              fs.readFile(file, "utf-8")
                            ];
                          case 1:
                            content = _state2.sent();
                            if (!(publicPath && typeof publicPath === "string"))
                              return [
                                3,
                                3
                              ];
                            return [
                              4,
                              fs.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, removeTailSlash(publicPath)))
                            ];
                          case 2:
                            _state2.sent();
                            return [
                              3,
                              5
                            ];
                          case 3:
                            logger.warn("Expect get a string from `publicPath`, but receive `".concat(typeof publicPath === "undefined" ? "undefined" : _type_of(publicPath), "`."));
                            return [
                              4,
                              fs.writeFile(file, content.replace(/<%=\s*assetPrefix\s*%>/g, removeTailSlash("/")))
                            ];
                          case 4:
                            _state2.sent();
                            _state2.label = 5;
                          case 5:
                            return [
                              2
                            ];
                        }
                      });
                    });
                    return function(file) {
                      return _ref.apply(this, arguments);
                    };
                  }()))
                ];
              case 2:
                _state.sent();
                return [
                  2
                ];
            }
          });
        });
        return _transformHtmlFiles.apply(this, arguments);
      }
    }
  };
};
function createConfigBuiltinCopy(options) {
  var normalizedConfig = options.normalizedConfig, appContext = options.appContext;
  var publicDir = createCopyInfo(appContext, normalizedConfig).publicDir;
  return [
    {
      from: "**/*",
      to: "public",
      context: publicDir,
      noErrorOnMissing: true
    }
  ];
}
export {
  builderPluginAdpaterCopy
};
