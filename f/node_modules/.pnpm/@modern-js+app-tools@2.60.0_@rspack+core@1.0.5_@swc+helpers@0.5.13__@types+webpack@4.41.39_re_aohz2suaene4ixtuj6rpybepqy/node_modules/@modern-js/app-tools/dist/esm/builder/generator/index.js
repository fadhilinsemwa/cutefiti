import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { createUniBuilder } from "@modern-js/uni-builder";
import { mergeRsbuildConfig } from "@rsbuild/core";
import { createBuilderProviderConfig } from "./createBuilderProviderConfig";
import { getBuilderEnvironments } from "./getBuilderEnvironments";
function generateBuilder(options, bundlerType) {
  return _generateBuilder.apply(this, arguments);
}
function _generateBuilder() {
  _generateBuilder = _async_to_generator(function(options, bundlerType) {
    var normalizedConfig, appContext, builderConfig, environments, builder;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          normalizedConfig = options.normalizedConfig, appContext = options.appContext;
          builderConfig = createBuilderProviderConfig(normalizedConfig, appContext);
          environments = getBuilderEnvironments(normalizedConfig, appContext);
          builderConfig.environments = builderConfig.environments ? mergeRsbuildConfig(environments, builderConfig.environments) : environments;
          return [
            4,
            createUniBuilder({
              cwd: appContext.appDirectory,
              frameworkConfigPath: appContext.configFile || void 0,
              bundlerType,
              config: builderConfig
            })
          ];
        case 1:
          builder = _state.sent();
          return [
            4,
            applyBuilderPlugins(builder, options)
          ];
        case 2:
          _state.sent();
          return [
            2,
            builder
          ];
      }
    });
  });
  return _generateBuilder.apply(this, arguments);
}
function applyBuilderPlugins(builder, options) {
  return _applyBuilderPlugins.apply(this, arguments);
}
function _applyBuilderPlugins() {
  _applyBuilderPlugins = _async_to_generator(function(builder, options) {
    var _ref, builderPluginAdapterBasic, builderPluginAdapterHtml, builderPluginAdapterSSR, normalizedConfig, pluginNodePolyfill;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return [
            4,
            import("../shared/builderPlugins/index.js")
          ];
        case 1:
          _ref = _state.sent(), builderPluginAdapterBasic = _ref.builderPluginAdapterBasic, builderPluginAdapterHtml = _ref.builderPluginAdapterHtml, builderPluginAdapterSSR = _ref.builderPluginAdapterSSR;
          builder.addPlugins([
            builderPluginAdapterBasic(),
            builderPluginAdapterSSR(options),
            builderPluginAdapterHtml(options)
          ]);
          normalizedConfig = options.normalizedConfig;
          if (!!normalizedConfig.output.disableNodePolyfill)
            return [
              3,
              3
            ];
          return [
            4,
            import("@rsbuild/plugin-node-polyfill")
          ];
        case 2:
          pluginNodePolyfill = _state.sent().pluginNodePolyfill;
          builder.addPlugins([
            pluginNodePolyfill()
          ]);
          _state.label = 3;
        case 3:
          return [
            2
          ];
      }
    });
  });
  return _applyBuilderPlugins.apply(this, arguments);
}
export {
  generateBuilder
};
