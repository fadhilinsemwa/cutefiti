import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import path from "path";
import { getLocaleLanguage } from "@modern-js/plugin-i18n/language-detector";
import { lintPlugin } from "@modern-js/plugin-lint";
import { cleanRequireCache, emptyDir, getArgv, getCommand } from "@modern-js/utils";
import { hooks } from "./hooks";
import { i18n } from "./locale";
import analyzePlugin from "./plugins/analyze";
import deployPlugin from "./plugins/deploy";
import initializePlugin from "./plugins/initialize";
import serverBuildPlugin from "./plugins/serverBuild";
import { buildCommand, deployCommand, devCommand, inspectCommand, newCommand, serverCommand, upgradeCommand } from "./commands";
import { generateWatchFiles } from "./utils/generateWatchFiles";
import { restart } from "./utils/restart";
import { dev } from "./commands/dev";
import { mergeConfig } from "@modern-js/core";
export * from "./defineConfig";
export * from "./types";
var appTools = function() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    // default webpack to be compatible with original projects
    bundler: "webpack"
  };
  return {
    name: "@modern-js/app-tools",
    post: [
      "@modern-js/plugin-initialize",
      "@modern-js/plugin-analyze",
      "@modern-js/plugin-ssr",
      "@modern-js/plugin-document",
      "@modern-js/plugin-state",
      "@modern-js/plugin-router",
      "@modern-js/plugin-router-v5",
      "@modern-js/plugin-polyfill"
    ],
    registerHook: hooks,
    usePlugins: [
      initializePlugin({
        bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
          "rspack",
          "experimental-rspack"
        ].includes(options.bundler) ? "rspack" : "webpack"
      }),
      analyzePlugin({
        bundler: (options === null || options === void 0 ? void 0 : options.bundler) && [
          "rspack",
          "experimental-rspack"
        ].includes(options.bundler) ? "rspack" : "webpack"
      }),
      serverBuildPlugin(),
      lintPlugin(),
      deployPlugin()
    ],
    setup: function(api) {
      var appContext = api.useAppContext();
      api.setAppContext(_object_spread_props(_object_spread({}, appContext), {
        toolsType: "app-tools"
      }));
      var locale = getLocaleLanguage();
      i18n.changeLanguage({
        locale
      });
      return {
        beforeConfig: function beforeConfig() {
          return _async_to_generator(function() {
            var _userConfig_output, userConfig, appContext2;
            return _ts_generator(this, function(_state) {
              userConfig = api.useConfigContext();
              appContext2 = api.useAppContext();
              if ((_userConfig_output = userConfig.output) === null || _userConfig_output === void 0 ? void 0 : _userConfig_output.tempDir) {
                api.setAppContext(_object_spread_props(_object_spread({}, appContext2), {
                  internalDirectory: path.resolve(appContext2.appDirectory, userConfig.output.tempDir)
                }));
              }
              return [
                2
              ];
            });
          })();
        },
        commands: function commands(param) {
          var program = param.program;
          return _async_to_generator(function() {
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  return [
                    4,
                    devCommand(program, api)
                  ];
                case 1:
                  _state.sent();
                  return [
                    4,
                    buildCommand(program, api)
                  ];
                case 2:
                  _state.sent();
                  serverCommand(program, api);
                  deployCommand(program, api);
                  newCommand(program, locale);
                  inspectCommand(program, api);
                  upgradeCommand(program);
                  return [
                    2
                  ];
              }
            });
          })();
        },
        prepare: function prepare() {
          return _async_to_generator(function() {
            var command, isSkipBuild, resolvedConfig, appContext2;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  command = getCommand();
                  if (command === "deploy") {
                    isSkipBuild = [
                      "-s",
                      "--skip-build"
                    ].some(function(tag) {
                      return getArgv().includes(tag);
                    });
                    if (isSkipBuild) {
                      return [
                        2
                      ];
                    }
                  }
                  if (!(command === "dev" || command === "start" || command === "build" || command === "deploy"))
                    return [
                      3,
                      2
                    ];
                  resolvedConfig = api.useResolvedConfigContext();
                  if (!resolvedConfig.output.cleanDistPath)
                    return [
                      3,
                      2
                    ];
                  appContext2 = api.useAppContext();
                  return [
                    4,
                    emptyDir(appContext2.distDirectory)
                  ];
                case 1:
                  _state.sent();
                  _state.label = 2;
                case 2:
                  return [
                    2
                  ];
              }
            });
          })();
        },
        watchFiles: function watchFiles() {
          return _async_to_generator(function() {
            var appContext2, config;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  appContext2 = api.useAppContext();
                  config = api.useResolvedConfigContext();
                  return [
                    4,
                    generateWatchFiles(appContext2, config.source.configDir)
                  ];
                case 1:
                  return [
                    2,
                    _state.sent()
                  ];
              }
            });
          })();
        },
        fileChange: (
          // 这里会被 core/initWatcher 监听的文件变动触发，如果是 src 目录下的文件变动，则不做 restart
          function fileChange(e) {
            return _async_to_generator(function() {
              var filename, eventType, isPrivate, closeServer;
              return _ts_generator(this, function(_state) {
                switch (_state.label) {
                  case 0:
                    filename = e.filename, eventType = e.eventType, isPrivate = e.isPrivate;
                    if (!(!isPrivate && (eventType === "change" || eventType === "unlink")))
                      return [
                        3,
                        4
                      ];
                    return [
                      4,
                      import("./utils/createServer.js")
                    ];
                  case 1:
                    closeServer = _state.sent().closeServer;
                    return [
                      4,
                      closeServer()
                    ];
                  case 2:
                    _state.sent();
                    return [
                      4,
                      restart(api.useHookRunners(), filename)
                    ];
                  case 3:
                    _state.sent();
                    _state.label = 4;
                  case 4:
                    return [
                      2
                    ];
                }
              });
            })();
          }
        ),
        beforeRestart: function beforeRestart() {
          return _async_to_generator(function() {
            return _ts_generator(this, function(_state) {
              cleanRequireCache([
                require.resolve("./plugins/analyze")
              ]);
              return [
                2
              ];
            });
          })();
        }
      };
    }
  };
};
var src_default = appTools;
export {
  appTools,
  src_default as default,
  dev,
  mergeConfig
};
