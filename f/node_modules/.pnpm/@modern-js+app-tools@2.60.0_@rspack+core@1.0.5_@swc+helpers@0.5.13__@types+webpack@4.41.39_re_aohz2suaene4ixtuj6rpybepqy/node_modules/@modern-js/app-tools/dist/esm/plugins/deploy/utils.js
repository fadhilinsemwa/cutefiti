import path from "path";
import { ROUTE_SPEC_FILE, fs as fse, isDepExists } from "@modern-js/utils";
var serverAppContenxtTemplate = function(appContext) {
  var appDirectory = appContext.appDirectory, sharedDirectory = appContext.sharedDirectory, apiDirectory = appContext.apiDirectory, lambdaDirectory = appContext.lambdaDirectory, metaName = appContext.metaName;
  return {
    sharedDirectory: 'path.join(__dirname, "'.concat(path.relative(appDirectory, sharedDirectory), '")'),
    apiDirectory: 'path.join(__dirname, "'.concat(path.relative(appDirectory, apiDirectory), '")'),
    lambdaDirectory: 'path.join(__dirname, "'.concat(path.relative(appDirectory, lambdaDirectory), '")'),
    metaName
  };
};
var getPluginsCode = function(plugins) {
  return "[".concat(plugins.map(function(_, index) {
    return "plugin_".concat(index, "()");
  }).join(","), "]");
};
var genPluginImportsCode = function(plugins) {
  return plugins.map(function(plugin, index) {
    return "\n      let plugin_".concat(index, " = require('").concat(plugin, "')\n      plugin_").concat(index, " = plugin_").concat(index, ".default || plugin_").concat(index, "\n      ");
  }).join(";\n");
};
var getProjectUsage = function(appDirectory, distDirectory) {
  var routeJSON = path.join(distDirectory, ROUTE_SPEC_FILE);
  var routes = fse.readJSONSync(routeJSON).routes;
  var useSSR = false;
  var useAPI = false;
  routes.forEach(function(route) {
    if (route.isSSR) {
      useSSR = true;
    }
    if (route.isApi) {
      useAPI = true;
    }
  });
  var useWebServer = isDepExists(appDirectory, "@modern-js/plugin-server");
  return {
    useSSR,
    useAPI,
    useWebServer
  };
};
export {
  genPluginImportsCode,
  getPluginsCode,
  getProjectUsage,
  serverAppContenxtTemplate
};
