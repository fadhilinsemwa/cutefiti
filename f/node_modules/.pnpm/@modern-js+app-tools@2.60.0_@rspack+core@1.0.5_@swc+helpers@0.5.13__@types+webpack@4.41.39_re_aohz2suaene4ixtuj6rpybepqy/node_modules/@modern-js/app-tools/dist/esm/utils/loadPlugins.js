import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { loadServerPlugins as loadServerPluginInstances } from "@modern-js/prod-server";
function getServerPlugins(api) {
  return _getServerPlugins.apply(this, arguments);
}
function _getServerPlugins() {
  _getServerPlugins = _async_to_generator(function(api) {
    var metaName, runner, plugins, filtedPlugins;
    var _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          metaName = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : "modern-js";
          runner = api.useHookRunners();
          return [
            4,
            runner._internalServerPlugins({
              plugins: []
            })
          ];
        case 1:
          plugins = _state.sent().plugins;
          filtedPlugins = plugins.filter(function(plugin) {
            return plugin.name.includes(metaName);
          });
          api.setAppContext(_object_spread_props(_object_spread({}, api.useAppContext()), {
            serverPlugins: filtedPlugins
          }));
          return [
            2,
            filtedPlugins
          ];
      }
    });
  });
  return _getServerPlugins.apply(this, arguments);
}
function loadServerPlugins(api, appDirectory, metaName) {
  return _loadServerPlugins.apply(this, arguments);
}
function _loadServerPlugins() {
  _loadServerPlugins = _async_to_generator(function(api, appDirectory, metaName) {
    var plugins, instances;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return [
            4,
            getServerPlugins(api, metaName)
          ];
        case 1:
          plugins = _state.sent();
          return [
            4,
            loadServerPluginInstances(plugins, appDirectory)
          ];
        case 2:
          instances = _state.sent();
          return [
            2,
            instances
          ];
      }
    });
  });
  return _loadServerPlugins.apply(this, arguments);
}
export {
  getServerPlugins,
  loadServerPlugins
};
