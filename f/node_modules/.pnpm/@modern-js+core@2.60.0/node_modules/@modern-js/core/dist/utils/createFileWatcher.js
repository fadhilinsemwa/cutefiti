"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createFileWatcher_exports = {};
__export(createFileWatcher_exports, {
  createFileWatcher: () => createFileWatcher
});
module.exports = __toCommonJS(createFileWatcher_exports);
var import_crypto = __toESM(require("crypto"));
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
const debug = (0, import_utils.createDebugger)("watch-files");
const hashMap = /* @__PURE__ */ new Map();
const md5 = (data) => import_crypto.default.createHash("md5").update(data).digest("hex");
const createFileWatcher = async (appContext, hooksRunner) => {
  if ((0, import_utils.isDevCommand)()) {
    const { appDirectory } = appContext;
    const extraFiles = await hooksRunner.watchFiles();
    const watched = extraFiles.filter((extra) => {
      return Array.isArray(extra);
    }).flat();
    const privateWatched = extraFiles.filter((extra) => {
      return !Array.isArray(extra) && extra.isPrivate;
    }).map((extra) => {
      return extra.files;
    }).flat();
    const isPrivate = (filename) => privateWatched.some((ff) => {
      return path.resolve(appDirectory, filename).startsWith(ff);
    });
    debug(`watched: %o`, watched);
    const watcher = import_utils.chokidar.watch([
      ...watched,
      ...privateWatched
    ], {
      cwd: appDirectory,
      ignoreInitial: true,
      ignorePermissionErrors: true,
      ignored: [
        /node_modules/,
        "**/__test__/**",
        "**/*.test.(js|jsx|ts|tsx)",
        "**/*.spec.(js|jsx|ts|tsx)",
        "**/*.stories.(js|jsx|ts|tsx)"
      ]
    });
    watcher.on("change", (changed) => {
      const lastHash = hashMap.get(changed);
      const currentHash = md5(fs.readFileSync(path.join(appDirectory, changed), "utf8"));
      if (currentHash !== lastHash) {
        debug(`file change: %s`, changed);
        hashMap.set(changed, currentHash);
        hooksRunner.fileChange({
          filename: changed,
          eventType: "change",
          isPrivate: isPrivate(changed)
        });
      }
    });
    watcher.on("add", (changed) => {
      debug(`add file: %s`, changed);
      const currentHash = md5(fs.readFileSync(path.join(appDirectory, changed), "utf8"));
      hashMap.set(changed, currentHash);
      hooksRunner.fileChange({
        filename: changed,
        eventType: "add",
        isPrivate: isPrivate(changed)
      });
    });
    watcher.on("unlink", (changed) => {
      debug(`remove file: %s`, changed);
      if (hashMap.has(changed)) {
        hashMap.delete(changed);
      }
      hooksRunner.fileChange({
        filename: changed,
        eventType: "unlink",
        isPrivate: isPrivate(changed)
      });
    });
    watcher.on("error", (err) => {
      throw err;
    });
    return watcher;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createFileWatcher
});
