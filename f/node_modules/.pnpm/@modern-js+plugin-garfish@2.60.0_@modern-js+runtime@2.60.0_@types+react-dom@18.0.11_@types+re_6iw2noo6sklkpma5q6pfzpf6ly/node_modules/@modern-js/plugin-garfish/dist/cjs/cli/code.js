"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var code_exports = {};
__export(code_exports, {
  ENTRY_BOOTSTRAP_FILE_NAME: () => ENTRY_BOOTSTRAP_FILE_NAME,
  generateCode: () => generateCode
});
module.exports = __toCommonJS(code_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var template = __toESM(require("./template"));
var import_utils2 = require("./utils");
const ENTRY_POINT_FILE_NAME = "index.jsx";
const ENTRY_BOOTSTRAP_FILE_NAME = "bootstrap.jsx";
const generateCode = async (entrypoints, appContext, config, appendEntryCode) => {
  const { mountId } = config.html;
  const { enableAsyncEntry } = config.source;
  const { internalDirectory, internalSrcAlias, metaName, srcDirectory } = appContext;
  await Promise.all(entrypoints.map(async (entrypoint) => {
    const { entryName, isAutoMount, entry, customEntry, customBootstrap } = entrypoint;
    const appendCode = await appendEntryCode({
      entrypoint
    });
    if (isAutoMount) {
      const indexCode = template.index({
        srcDirectory,
        internalSrcAlias,
        metaName,
        entry,
        entryName,
        customEntry,
        customBootstrap,
        mountId,
        appendCode
      });
      const indexFile = import_path.default.resolve(internalDirectory, `./${entryName}/${ENTRY_POINT_FILE_NAME}`);
      import_utils.fs.outputFileSync(indexFile, indexCode, "utf8");
      if (enableAsyncEntry) {
        const bootstrapFile = import_path.default.resolve(internalDirectory, `./${entryName}/${ENTRY_BOOTSTRAP_FILE_NAME}`);
        import_utils.fs.outputFileSync(bootstrapFile, (0, import_utils2.generateAsyncEntryCode)(appendCode), "utf8");
      }
    }
  }));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ENTRY_BOOTSTRAP_FILE_NAME,
  generateCode
});
