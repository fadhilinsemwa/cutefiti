"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var loadable_exports = {};
__export(loadable_exports, {
  Loadable: () => Loadable
});
module.exports = __toCommonJS(loadable_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_react = require("react");
var import_util = require("../util");
const DEFAULT_LOADABLE = {
  delay: 200,
  timeout: 1e4,
  loading: null
};
function Loadable(WrapComponent) {
  return function(defaultLoadable) {
    return function Lodable(props) {
      var _props_loadable;
      const { loadable = defaultLoadable !== null && defaultLoadable !== void 0 ? defaultLoadable : DEFAULT_LOADABLE, ...otherProps } = props;
      let delayTimer = null;
      let timeoutTimer = null;
      const [state, setState] = (0, import_react.useState)(() => {
        const { delay, timeout } = loadable;
        const initState = {
          error: null,
          pastDelay: false,
          timedOut: false,
          isLoading: false
        };
        if (typeof delay === "number") {
          if (delay === 0) {
            initState.pastDelay = true;
          } else {
            delayTimer = setTimeout(() => {
              setStateWithMountCheck({
                pastDelay: true
              });
            }, delay);
          }
        }
        if (typeof timeout === "number") {
          timeoutTimer = setTimeout(() => {
            setStateWithMountCheck({
              timedOut: true
            });
          }, timeout);
        }
        return initState;
      });
      const LoadingComponent = (_props_loadable = props.loadable) === null || _props_loadable === void 0 ? void 0 : _props_loadable.loading;
      (0, import_react.useEffect)(() => {
        (0, import_util.logger)("Loadable render state", {
          state,
          props: otherProps,
          loadable,
          defaultLoadable
        });
        return () => {
          setStateWithMountCheck({
            isLoading: false,
            error: null
          });
          if (delayTimer) {
            clearTimeout(delayTimer);
            delayTimer = null;
          }
          if (timeoutTimer) {
            clearTimeout(timeoutTimer);
            timeoutTimer = null;
          }
        };
      }, []);
      const retry = (0, import_react.useCallback)(() => {
        setState({
          ...state,
          error: null,
          isLoading: true,
          timedOut: false
        });
      }, [
        state
      ]);
      const setStateWithMountCheck = (0, import_react.useCallback)((newState) => {
        setState((state2) => ({
          ...state2,
          ...newState
        }));
      }, [
        state
      ]);
      const showLoading = (state.isLoading || state.error) && LoadingComponent;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [
          showLoading && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(LoadingComponent, {
            isLoading: state.isLoading,
            pastDelay: state.pastDelay,
            timedOut: state.timedOut,
            error: state === null || state === void 0 ? void 0 : state.error,
            retry
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WrapComponent, {
            style: {
              display: showLoading ? "none" : "block"
            },
            setLoadingState: (props2) => {
              if (props2.error && !LoadingComponent) {
                throw props2.error;
              }
              setStateWithMountCheck(props2);
            },
            ...otherProps
          })
        ]
      });
    };
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Loadable
});
