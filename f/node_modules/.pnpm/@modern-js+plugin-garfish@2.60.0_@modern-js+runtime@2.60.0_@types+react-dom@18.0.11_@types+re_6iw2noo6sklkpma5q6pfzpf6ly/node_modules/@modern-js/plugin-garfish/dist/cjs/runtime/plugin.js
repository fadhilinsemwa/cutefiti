"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var plugin_exports = {};
__export(plugin_exports, {
  default: () => plugin_default,
  garfishPlugin: () => garfishPlugin
});
module.exports = __toCommonJS(plugin_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_merge = require("@modern-js/runtime-utils/merge");
var import_garfish = __toESM(require("garfish"));
var import_react = __toESM(require("react"));
var import_util = require("../util");
var import_Context = require("./utils/Context");
var import_MApp = require("./utils/MApp");
var import_apps = require("./utils/apps");
var import_setExternal = __toESM(require("./utils/setExternal"));
async function initOptions(manifest = {}, options = {}) {
  var _window_modern_manifest, _window, _window_modern_manifest1, _window1;
  let apps = options.apps || [];
  if (manifest === null || manifest === void 0 ? void 0 : manifest.modules) {
    if ((manifest === null || manifest === void 0 ? void 0 : manifest.modules.length) > 0) {
      apps = manifest === null || manifest === void 0 ? void 0 : manifest.modules;
    }
    (0, import_util.logger)("manifest modules", apps);
  }
  if (manifest === null || manifest === void 0 ? void 0 : manifest.getAppList) {
    const getAppList = await (manifest === null || manifest === void 0 ? void 0 : manifest.getAppList(manifest));
    if (getAppList.length > 0) {
      apps = getAppList;
    }
    (0, import_util.logger)("getAppList modules", apps);
  }
  if (((_window = window) === null || _window === void 0 ? void 0 : (_window_modern_manifest = _window.modern_manifest) === null || _window_modern_manifest === void 0 ? void 0 : _window_modern_manifest.modules) && ((_window1 = window) === null || _window1 === void 0 ? void 0 : (_window_modern_manifest1 = _window1.modern_manifest) === null || _window_modern_manifest1 === void 0 ? void 0 : _window_modern_manifest1.modules.length) > 0) {
    var _window_modern_manifest2, _window2;
    apps = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window_modern_manifest2 = _window2.modern_manifest) === null || _window_modern_manifest2 === void 0 ? void 0 : _window_modern_manifest2.modules;
    (0, import_util.logger)("modern_manifest", apps);
  }
  return {
    ...options,
    apps
  };
}
const garfishPlugin = (userConfig = {}) => ({
  name: "@modern-js/garfish-plugin",
  setup: (api) => {
    (0, import_setExternal.default)();
    return {
      wrapRoot(App) {
        const pluginConfig = api.useRuntimeConfigContext();
        const config = (0, import_merge.merge)(pluginConfig.garfish || {}, userConfig);
        const { manifest, ...options } = config;
        (0, import_util.logger)("createPlugin", config);
        const promise = initOptions(manifest, options);
        class GetMicroFrontendApp extends import_react.default.Component {
          render() {
            (0, import_util.logger)("GarfishProvider state", this.state);
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_Context.GarfishProvider, {
              value: this.state,
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(App, {
                ...this.props
              })
            });
          }
          constructor(props) {
            super(props), this.state = {
              MApp: () => {
                (0, import_util.logger)("MApp init Component Render");
                return /* @__PURE__ */ import_react.default.createElement("div");
              },
              apps: new Proxy({}, {
                get() {
                  return () => /* @__PURE__ */ import_react.default.createElement("div");
                }
              }),
              appInfoList: []
            };
            const load = async () => {
              import_garfish.default.setOptions({
                ...options,
                insulationVariable: [
                  ...options.insulationVariable || [],
                  "_SERVER_DATA"
                ],
                apps: []
              });
              const GarfishConfig = await promise;
              const { appInfoList, apps } = (0, import_apps.generateApps)(GarfishConfig, manifest);
              import_garfish.default.registerApp(appInfoList);
              const MApp = (0, import_MApp.generateMApp)(GarfishConfig, manifest);
              (0, import_util.logger)("initOptions result", {
                manifest,
                GarfishConfig
              });
              (0, import_util.logger)("generateApps", {
                MApp,
                apps,
                appInfoList
              });
              this.setState({
                MApp,
                apps,
                appInfoList
              });
            };
            load();
          }
        }
        return GetMicroFrontendApp;
      }
    };
  }
});
var plugin_default = garfishPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  garfishPlugin
});
