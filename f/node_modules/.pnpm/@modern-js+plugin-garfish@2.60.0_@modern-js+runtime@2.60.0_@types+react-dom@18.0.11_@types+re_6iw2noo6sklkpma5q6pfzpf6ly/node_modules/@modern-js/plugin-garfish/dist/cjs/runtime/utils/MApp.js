"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MApp_exports = {};
__export(MApp_exports, {
  generateMApp: () => generateMApp
});
module.exports = __toCommonJS(MApp_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_garfish = __toESM(require("garfish"));
var import_react = __toESM(require("react"));
var import_util = require("../../util");
var import_loadable = require("../loadable");
function generateMApp(options, manifest) {
  class MApp extends import_react.default.Component {
    componentDidMount() {
      const { domId } = this.state;
      const { setLoadingState } = this.props;
      const { beforeLoad, beforeMount, errorLoadApp, errorMountApp, errorUnmountApp } = options;
      import_garfish.default.router.setRouterConfig({
        listening: true
      });
      const garfishOptions = {
        domGetter: `#${domId}`,
        beforeLoad(appInfo, ...args) {
          (0, import_util.logger)("MApp beforeLoad", [
            appInfo
          ]);
          if (appInfo.activeWhen) {
            setLoadingState({
              isLoading: true,
              error: null
            });
          }
          return beforeLoad === null || beforeLoad === void 0 ? void 0 : beforeLoad(appInfo, ...args);
        },
        beforeMount(appInfo, ...args) {
          (0, import_util.logger)("MApp beforeMount", args);
          if (appInfo.activeWhen) {
            setLoadingState({
              isLoading: false
            });
          }
          return beforeMount === null || beforeMount === void 0 ? void 0 : beforeMount(appInfo, ...args);
        },
        errorLoadApp(error, appInfo, ...args) {
          (0, import_util.logger)("MApp errorLoadApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorLoadApp === null || errorLoadApp === void 0 ? void 0 : errorLoadApp(error, appInfo, ...args);
        },
        errorMountApp(error, appInfo, ...args) {
          (0, import_util.logger)("MApp errorMountApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorMountApp === null || errorMountApp === void 0 ? void 0 : errorMountApp(error, appInfo, ...args);
        },
        errorUnmountApp(error, appInfo, ...args) {
          (0, import_util.logger)("MApp errorUnmountApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorUnmountApp === null || errorUnmountApp === void 0 ? void 0 : errorUnmountApp(error, appInfo, ...args);
        },
        customLoader: (provider) => {
          const { render, destroy, SubModuleComponent, jupiter_submodule_app_key } = provider;
          const componetRenderMode = (manifest === null || manifest === void 0 ? void 0 : manifest.componentRender) && (SubModuleComponent || jupiter_submodule_app_key);
          return {
            mount: (appInfo) => {
              const transferProps = this.filterTransferProps();
              appInfo.props = {
                ...appInfo.props,
                ...transferProps
              };
              if (componetRenderMode) {
                this.setState({
                  SubModuleComponent: SubModuleComponent !== null && SubModuleComponent !== void 0 ? SubModuleComponent : jupiter_submodule_app_key
                });
                return void 0;
              } else {
                (0, import_util.logger)("MicroApp customer render", appInfo);
                return render === null || render === void 0 ? void 0 : render.apply(provider, [
                  appInfo
                ]);
              }
            },
            unmount: (appInfo) => {
              const transferProps = this.filterTransferProps();
              appInfo.props = {
                ...appInfo.props,
                ...transferProps
              };
              if (componetRenderMode) {
                return void 0;
              }
              (0, import_util.logger)("MicroApp customer destroy", appInfo);
              return destroy === null || destroy === void 0 ? void 0 : destroy.apply(provider, [
                appInfo
              ]);
            }
          };
        }
      };
      (0, import_util.logger)("MApp componentDidMount", {
        garfishRunning: import_garfish.default.running,
        garfishOptions
      });
      if (!import_garfish.default.running) {
        import_garfish.default.run(garfishOptions);
      }
    }
    componentWillUnmount() {
      import_garfish.default.router.setRouterConfig({
        listening: false
      });
      (0, import_util.logger)("MApp componentWillUnmount");
    }
    filterTransferProps() {
      const { style, setLoadingState, ...others } = this.props;
      return others;
    }
    render() {
      const { style } = this.props;
      const { SubModuleComponent } = this.state;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        style: {
          ...style
        },
        id: (0, import_util.generateSubAppContainerKey)(),
        children: SubModuleComponent && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SubModuleComponent, {})
      });
    }
    constructor(...args) {
      super(...args), this.state = {
        domId: (0, import_util.generateSubAppContainerKey)()
      };
    }
  }
  return (0, import_loadable.Loadable)(MApp)(manifest === null || manifest === void 0 ? void 0 : manifest.loadable);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateMApp
});
