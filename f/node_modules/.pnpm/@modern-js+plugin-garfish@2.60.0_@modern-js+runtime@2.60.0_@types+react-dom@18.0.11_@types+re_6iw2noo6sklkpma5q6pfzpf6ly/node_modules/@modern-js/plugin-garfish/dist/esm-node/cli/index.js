import { createAsyncWorkflow } from "@modern-js/plugin";
import { createRuntimeExportsUtils, getEntryOptions } from "@modern-js/utils";
import { logger } from "../util";
import { generateCode } from "./code";
import { getRuntimeConfig, setRuntimeConfig } from "./utils";
const externals = {
  "react-dom": "react-dom",
  react: "react"
};
function getDefaultMicroFrontedConfig(microFrontend) {
  if (microFrontend === true) {
    return {
      enableHtmlEntry: true,
      externalBasicLibrary: false,
      moduleApp: ""
    };
  }
  return {
    enableHtmlEntry: true,
    externalBasicLibrary: false,
    ...microFrontend
  };
}
const appendEntryCode = createAsyncWorkflow();
const garfishPlugin = () => ({
  name: "@modern-js/plugin-garfish",
  pre: [
    "@modern-js/runtime"
  ],
  registerHook: {
    appendEntryCode
  },
  setup: (api) => {
    return {
      _internalRuntimePlugins({ entrypoint, plugins }) {
        const userConfig = api.useResolvedConfigContext();
        const { packageName, metaName } = api.useAppContext();
        const runtimeConfig = getEntryOptions(entrypoint.entryName, entrypoint.isMainEntry, userConfig.runtime, userConfig.runtimeByEntries, packageName);
        if (runtimeConfig === null || runtimeConfig === void 0 ? void 0 : runtimeConfig.masterApp) {
          plugins.push({
            name: "garfish",
            path: `@${metaName}/plugin-garfish/runtime`,
            config: (runtimeConfig === null || runtimeConfig === void 0 ? void 0 : runtimeConfig.masterApp) || {}
          });
        }
        return {
          entrypoint,
          plugins
        };
      },
      resolvedConfig: async (config) => {
        const { resolved } = config;
        const { masterApp, router } = getRuntimeConfig(resolved);
        const nConfig = {
          resolved: {
            ...resolved
          }
        };
        if (masterApp) {
          var _useConfig_server, _router_historyOptions;
          const useConfig = api.useConfigContext();
          const baseUrl = useConfig === null || useConfig === void 0 ? void 0 : (_useConfig_server = useConfig.server) === null || _useConfig_server === void 0 ? void 0 : _useConfig_server.baseUrl;
          if (Array.isArray(baseUrl)) {
            throw new Error("Now Micro-Front-End mode dose not support multiple baseUrl, you can set it as a string");
          }
          setRuntimeConfig(nConfig.resolved, "masterApp", Object.assign(typeof masterApp === "object" ? {
            ...masterApp
          } : {}, {
            basename: baseUrl || (router === null || router === void 0 ? void 0 : (_router_historyOptions = router.historyOptions) === null || _router_historyOptions === void 0 ? void 0 : _router_historyOptions.basename) || (router === null || router === void 0 ? void 0 : router.basename) || "/"
          }));
        }
        logger(`resolvedConfig`, {
          output: nConfig.resolved.output,
          runtime: nConfig.resolved.runtime,
          deploy: nConfig.resolved.deploy,
          server: nConfig.resolved.server
        });
        return nConfig;
      },
      config() {
        var _useConfig_output, _useConfig_deploy;
        const useConfig = api.useConfigContext();
        const { metaName, packageName } = api.useAppContext();
        logger("useConfig", useConfig);
        let disableCssExtract = ((_useConfig_output = useConfig.output) === null || _useConfig_output === void 0 ? void 0 : _useConfig_output.disableCssExtract) || false;
        if ((_useConfig_deploy = useConfig.deploy) === null || _useConfig_deploy === void 0 ? void 0 : _useConfig_deploy.microFrontend) {
          var _useConfig_deploy1;
          const { enableHtmlEntry } = getDefaultMicroFrontedConfig((_useConfig_deploy1 = useConfig.deploy) === null || _useConfig_deploy1 === void 0 ? void 0 : _useConfig_deploy1.microFrontend);
          if (!enableHtmlEntry) {
            disableCssExtract = true;
          }
        }
        return {
          output: {
            disableCssExtract
          },
          source: {
            alias: {
              [`@${metaName}/runtime/garfish`]: `@${metaName}/plugin-garfish/runtime`
            }
          },
          tools: {
            devServer: {
              headers: {
                "Access-Control-Allow-Origin": "*"
              }
            },
            bundlerChain: (chain, { env, CHAIN_ID, bundler }) => {
              var _resolveOptions_deploy, _resolveConfig_resolve;
              if (bundler.BannerPlugin) {
                chain.plugin("garfish-banner").use(bundler.BannerPlugin, [
                  {
                    banner: "Micro front-end"
                  }
                ]);
              }
              const resolveOptions = api.useResolvedConfigContext();
              if (resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_deploy = resolveOptions.deploy) === null || _resolveOptions_deploy === void 0 ? void 0 : _resolveOptions_deploy.microFrontend) {
                var _resolveOptions_dev, _useConfig_dev, _resolveOptions_server, _resolveOptions_deploy1;
                chain.output.libraryTarget("umd");
                const DEFAULT_ASSET_PREFIX = "/";
                const resolvedAssetPrefix = (_resolveOptions_dev = resolveOptions.dev) === null || _resolveOptions_dev === void 0 ? void 0 : _resolveOptions_dev.assetPrefix;
                const isUsingDefaultAssetPrefix = !((_useConfig_dev = useConfig.dev) === null || _useConfig_dev === void 0 ? void 0 : _useConfig_dev.assetPrefix) && (!resolvedAssetPrefix || resolvedAssetPrefix === DEFAULT_ASSET_PREFIX);
                if (isUsingDefaultAssetPrefix && (resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_server = resolveOptions.server) === null || _resolveOptions_server === void 0 ? void 0 : _resolveOptions_server.port) && env === "development") {
                  chain.output.publicPath(`//localhost:${resolveOptions.server.port}/`);
                }
                const { enableHtmlEntry, externalBasicLibrary } = getDefaultMicroFrontedConfig((_resolveOptions_deploy1 = resolveOptions.deploy) === null || _resolveOptions_deploy1 === void 0 ? void 0 : _resolveOptions_deploy1.microFrontend);
                if (externalBasicLibrary) {
                  chain.externals(externals);
                }
                if (!enableHtmlEntry) {
                  chain.output.filename("index.js");
                  chain.plugins.delete(`${CHAIN_ID.PLUGIN.HTML}-main`);
                  chain.optimization.runtimeChunk(false);
                  chain.optimization.splitChunks({
                    chunks: "async"
                  });
                }
              }
              const uniqueName = chain.output.get("uniqueName");
              if (!uniqueName) {
                chain.output.uniqueName(packageName);
              }
              const resolveConfig = chain.toConfig();
              logger("bundlerConfig", {
                output: resolveConfig.output,
                externals: resolveConfig.externals,
                env,
                alias: (_resolveConfig_resolve = resolveConfig.resolve) === null || _resolveConfig_resolve === void 0 ? void 0 : _resolveConfig_resolve.alias,
                plugins: resolveConfig.plugins
              });
            }
          }
        };
      },
      addRuntimeExports() {
        const config = api.useResolvedConfigContext();
        const { masterApp } = getRuntimeConfig(config);
        const { internalDirectory, metaName } = api.useAppContext();
        const pluginsExportsUtils = createRuntimeExportsUtils(internalDirectory, "plugins");
        if (masterApp) {
          const addExportStatement = `export { default as garfish, default as masterApp } from '${metaName}/plugin-garfish/runtime'`;
          logger("exportStatement", addExportStatement);
          pluginsExportsUtils.addExport(addExportStatement);
        }
      },
      async generateEntryCode({ entrypoints }) {
        var _resolveOptions_deploy;
        const resolveOptions = api.useResolvedConfigContext();
        if (resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_deploy = resolveOptions.deploy) === null || _resolveOptions_deploy === void 0 ? void 0 : _resolveOptions_deploy.microFrontend) {
          const appContext = api.useAppContext();
          const resolvedConfig = api.useResolvedConfigContext();
          const { appendEntryCode: appendEntryCode2 } = api.useHookRunners();
          await generateCode(entrypoints, appContext, resolvedConfig, appendEntryCode2);
        }
      }
    };
  }
});
var cli_default = garfishPlugin;
export {
  cli_default as default,
  externals,
  garfishPlugin,
  getDefaultMicroFrontedConfig
};
