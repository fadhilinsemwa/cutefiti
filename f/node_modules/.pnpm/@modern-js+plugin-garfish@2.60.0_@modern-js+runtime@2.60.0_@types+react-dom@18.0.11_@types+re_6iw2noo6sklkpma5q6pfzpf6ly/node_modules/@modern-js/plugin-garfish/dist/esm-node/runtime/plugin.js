import { jsx as _jsx } from "react/jsx-runtime";
import { merge } from "@modern-js/runtime-utils/merge";
import GarfishInstance from "garfish";
import React from "react";
import { logger } from "../util";
import { GarfishProvider } from "./utils/Context";
import { generateMApp } from "./utils/MApp";
import { generateApps } from "./utils/apps";
import setExternal from "./utils/setExternal";
async function initOptions(manifest = {}, options = {}) {
  var _window_modern_manifest, _window, _window_modern_manifest1, _window1;
  let apps = options.apps || [];
  if (manifest === null || manifest === void 0 ? void 0 : manifest.modules) {
    if ((manifest === null || manifest === void 0 ? void 0 : manifest.modules.length) > 0) {
      apps = manifest === null || manifest === void 0 ? void 0 : manifest.modules;
    }
    logger("manifest modules", apps);
  }
  if (manifest === null || manifest === void 0 ? void 0 : manifest.getAppList) {
    const getAppList = await (manifest === null || manifest === void 0 ? void 0 : manifest.getAppList(manifest));
    if (getAppList.length > 0) {
      apps = getAppList;
    }
    logger("getAppList modules", apps);
  }
  if (((_window = window) === null || _window === void 0 ? void 0 : (_window_modern_manifest = _window.modern_manifest) === null || _window_modern_manifest === void 0 ? void 0 : _window_modern_manifest.modules) && ((_window1 = window) === null || _window1 === void 0 ? void 0 : (_window_modern_manifest1 = _window1.modern_manifest) === null || _window_modern_manifest1 === void 0 ? void 0 : _window_modern_manifest1.modules.length) > 0) {
    var _window_modern_manifest2, _window2;
    apps = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window_modern_manifest2 = _window2.modern_manifest) === null || _window_modern_manifest2 === void 0 ? void 0 : _window_modern_manifest2.modules;
    logger("modern_manifest", apps);
  }
  return {
    ...options,
    apps
  };
}
const garfishPlugin = (userConfig = {}) => ({
  name: "@modern-js/garfish-plugin",
  setup: (api) => {
    setExternal();
    return {
      wrapRoot(App) {
        const pluginConfig = api.useRuntimeConfigContext();
        const config = merge(pluginConfig.garfish || {}, userConfig);
        const { manifest, ...options } = config;
        logger("createPlugin", config);
        const promise = initOptions(manifest, options);
        class GetMicroFrontendApp extends React.Component {
          render() {
            logger("GarfishProvider state", this.state);
            return /* @__PURE__ */ _jsx(GarfishProvider, {
              value: this.state,
              children: /* @__PURE__ */ _jsx(App, {
                ...this.props
              })
            });
          }
          constructor(props) {
            super(props), this.state = {
              MApp: () => {
                logger("MApp init Component Render");
                return /* @__PURE__ */ React.createElement("div");
              },
              apps: new Proxy({}, {
                get() {
                  return () => /* @__PURE__ */ React.createElement("div");
                }
              }),
              appInfoList: []
            };
            const load = async () => {
              GarfishInstance.setOptions({
                ...options,
                insulationVariable: [
                  ...options.insulationVariable || [],
                  "_SERVER_DATA"
                ],
                apps: []
              });
              const GarfishConfig = await promise;
              const { appInfoList, apps } = generateApps(GarfishConfig, manifest);
              GarfishInstance.registerApp(appInfoList);
              const MApp = generateMApp(GarfishConfig, manifest);
              logger("initOptions result", {
                manifest,
                GarfishConfig
              });
              logger("generateApps", {
                MApp,
                apps,
                appInfoList
              });
              this.setState({
                MApp,
                apps,
                appInfoList
              });
            };
            load();
          }
        }
        return GetMicroFrontendApp;
      }
    };
  }
});
var plugin_default = garfishPlugin;
export {
  plugin_default as default,
  garfishPlugin
};
