import { jsx as _jsx } from "react/jsx-runtime";
import { render } from "@meta/runtime/browser";
import { createRoot } from "@meta/runtime/react";
import { createPortal, unmountComponentAtNode } from "react-dom";
function createProvider(id, { customBootstrap, beforeRender } = {}) {
  return ({ basename, dom }) => {
    let root = null;
    return {
      async render({ basename: basename2, dom: dom2, props }) {
        const ModernRoot = createRoot(null);
        if (customBootstrap) {
          root = await customBootstrap(ModernRoot, () => render(/* @__PURE__ */ _jsx(ModernRoot, {
            basename: basename2,
            ...props
          }), dom2));
        } else {
          if (beforeRender) {
            await beforeRender(ModernRoot, {
              basename: basename2,
              ...props
            });
          }
          root = await render(/* @__PURE__ */ _jsx(ModernRoot, {
            basename: basename2,
            ...props
          }), dom2);
        }
      },
      destroy({ dom: dom2 }) {
        const node = dom2.querySelector(`#${id || "root"}`) || dom2;
        if (node) {
          if (process.env.IS_REACT18 === "true") {
            root.unmount();
          } else {
            unmountComponentAtNode(node);
          }
        }
      },
      // 兼容旧版本
      SubModuleComponent: (props) => {
        const ModernRoot = createRoot(null);
        return /* @__PURE__ */ createPortal(/* @__PURE__ */ _jsx(ModernRoot, {
          basename,
          ...props
        }), dom.querySelector(`#${id || "root"}`) || dom);
      },
      jupiter_submodule_app_key: (props) => {
        const ModernRoot = createRoot(null);
        return /* @__PURE__ */ createPortal(/* @__PURE__ */ _jsx(ModernRoot, {
          basename,
          ...props
        }), dom.querySelector(`#${id || "root"}`) || dom);
      }
    };
  };
}
export {
  createProvider
};
