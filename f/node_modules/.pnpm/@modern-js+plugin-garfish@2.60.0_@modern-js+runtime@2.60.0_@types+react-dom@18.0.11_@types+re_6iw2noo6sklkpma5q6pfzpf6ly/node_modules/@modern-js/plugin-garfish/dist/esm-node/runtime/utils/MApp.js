import { jsx as _jsx } from "react/jsx-runtime";
import Garfish from "garfish";
import React from "react";
import { generateSubAppContainerKey, logger } from "../../util";
import { Loadable } from "../loadable";
function generateMApp(options, manifest) {
  class MApp extends React.Component {
    componentDidMount() {
      const { domId } = this.state;
      const { setLoadingState } = this.props;
      const { beforeLoad, beforeMount, errorLoadApp, errorMountApp, errorUnmountApp } = options;
      Garfish.router.setRouterConfig({
        listening: true
      });
      const garfishOptions = {
        domGetter: `#${domId}`,
        beforeLoad(appInfo, ...args) {
          logger("MApp beforeLoad", [
            appInfo
          ]);
          if (appInfo.activeWhen) {
            setLoadingState({
              isLoading: true,
              error: null
            });
          }
          return beforeLoad === null || beforeLoad === void 0 ? void 0 : beforeLoad(appInfo, ...args);
        },
        beforeMount(appInfo, ...args) {
          logger("MApp beforeMount", args);
          if (appInfo.activeWhen) {
            setLoadingState({
              isLoading: false
            });
          }
          return beforeMount === null || beforeMount === void 0 ? void 0 : beforeMount(appInfo, ...args);
        },
        errorLoadApp(error, appInfo, ...args) {
          logger("MApp errorLoadApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorLoadApp === null || errorLoadApp === void 0 ? void 0 : errorLoadApp(error, appInfo, ...args);
        },
        errorMountApp(error, appInfo, ...args) {
          logger("MApp errorMountApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorMountApp === null || errorMountApp === void 0 ? void 0 : errorMountApp(error, appInfo, ...args);
        },
        errorUnmountApp(error, appInfo, ...args) {
          logger("MApp errorUnmountApp", error, args);
          if (appInfo.activeWhen) {
            setLoadingState({
              error
            });
          }
          return errorUnmountApp === null || errorUnmountApp === void 0 ? void 0 : errorUnmountApp(error, appInfo, ...args);
        },
        customLoader: (provider) => {
          const { render, destroy, SubModuleComponent, jupiter_submodule_app_key } = provider;
          const componetRenderMode = (manifest === null || manifest === void 0 ? void 0 : manifest.componentRender) && (SubModuleComponent || jupiter_submodule_app_key);
          return {
            mount: (appInfo) => {
              const transferProps = this.filterTransferProps();
              appInfo.props = {
                ...appInfo.props,
                ...transferProps
              };
              if (componetRenderMode) {
                this.setState({
                  SubModuleComponent: SubModuleComponent !== null && SubModuleComponent !== void 0 ? SubModuleComponent : jupiter_submodule_app_key
                });
                return void 0;
              } else {
                logger("MicroApp customer render", appInfo);
                return render === null || render === void 0 ? void 0 : render.apply(provider, [
                  appInfo
                ]);
              }
            },
            unmount: (appInfo) => {
              const transferProps = this.filterTransferProps();
              appInfo.props = {
                ...appInfo.props,
                ...transferProps
              };
              if (componetRenderMode) {
                return void 0;
              }
              logger("MicroApp customer destroy", appInfo);
              return destroy === null || destroy === void 0 ? void 0 : destroy.apply(provider, [
                appInfo
              ]);
            }
          };
        }
      };
      logger("MApp componentDidMount", {
        garfishRunning: Garfish.running,
        garfishOptions
      });
      if (!Garfish.running) {
        Garfish.run(garfishOptions);
      }
    }
    componentWillUnmount() {
      Garfish.router.setRouterConfig({
        listening: false
      });
      logger("MApp componentWillUnmount");
    }
    filterTransferProps() {
      const { style, setLoadingState, ...others } = this.props;
      return others;
    }
    render() {
      const { style } = this.props;
      const { SubModuleComponent } = this.state;
      return /* @__PURE__ */ _jsx("div", {
        style: {
          ...style
        },
        id: generateSubAppContainerKey(),
        children: SubModuleComponent && /* @__PURE__ */ _jsx(SubModuleComponent, {})
      });
    }
    constructor(...args) {
      super(...args), this.state = {
        domId: generateSubAppContainerKey()
      };
    }
  }
  return Loadable(MApp)(manifest === null || manifest === void 0 ? void 0 : manifest.loadable);
}
export {
  generateMApp
};
