import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _define_property } from "@swc/helpers/_/_define_property";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _type_of } from "@swc/helpers/_/_type_of";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { createAsyncWorkflow } from "@modern-js/plugin";
import { createRuntimeExportsUtils, getEntryOptions } from "@modern-js/utils";
import { logger } from "../util";
import { generateCode } from "./code";
import { getRuntimeConfig, setRuntimeConfig } from "./utils";
var externals = {
  "react-dom": "react-dom",
  react: "react"
};
function getDefaultMicroFrontedConfig(microFrontend) {
  if (microFrontend === true) {
    return {
      enableHtmlEntry: true,
      externalBasicLibrary: false,
      moduleApp: ""
    };
  }
  return _object_spread({
    enableHtmlEntry: true,
    externalBasicLibrary: false
  }, microFrontend);
}
var appendEntryCode = createAsyncWorkflow();
var garfishPlugin = function() {
  return {
    name: "@modern-js/plugin-garfish",
    pre: [
      "@modern-js/runtime"
    ],
    registerHook: {
      appendEntryCode
    },
    setup: function(api) {
      return {
        _internalRuntimePlugins: function _internalRuntimePlugins(param) {
          var entrypoint = param.entrypoint, plugins = param.plugins;
          var userConfig = api.useResolvedConfigContext();
          var _api_useAppContext = api.useAppContext(), packageName = _api_useAppContext.packageName, metaName = _api_useAppContext.metaName;
          var runtimeConfig = getEntryOptions(entrypoint.entryName, entrypoint.isMainEntry, userConfig.runtime, userConfig.runtimeByEntries, packageName);
          if (runtimeConfig === null || runtimeConfig === void 0 ? void 0 : runtimeConfig.masterApp) {
            plugins.push({
              name: "garfish",
              path: "@".concat(metaName, "/plugin-garfish/runtime"),
              config: (runtimeConfig === null || runtimeConfig === void 0 ? void 0 : runtimeConfig.masterApp) || {}
            });
          }
          return {
            entrypoint,
            plugins
          };
        },
        resolvedConfig: function() {
          var _ref = _async_to_generator(function(config) {
            var resolved, _getRuntimeConfig, masterApp, router, nConfig, _useConfig_server, _router_historyOptions, useConfig, baseUrl;
            return _ts_generator(this, function(_state) {
              resolved = config.resolved;
              _getRuntimeConfig = getRuntimeConfig(resolved), masterApp = _getRuntimeConfig.masterApp, router = _getRuntimeConfig.router;
              nConfig = {
                resolved: _object_spread({}, resolved)
              };
              if (masterApp) {
                ;
                useConfig = api.useConfigContext();
                baseUrl = useConfig === null || useConfig === void 0 ? void 0 : (_useConfig_server = useConfig.server) === null || _useConfig_server === void 0 ? void 0 : _useConfig_server.baseUrl;
                if (Array.isArray(baseUrl)) {
                  throw new Error("Now Micro-Front-End mode dose not support multiple baseUrl, you can set it as a string");
                }
                setRuntimeConfig(nConfig.resolved, "masterApp", Object.assign((typeof masterApp === "undefined" ? "undefined" : _type_of(masterApp)) === "object" ? _object_spread({}, masterApp) : {}, {
                  basename: baseUrl || (router === null || router === void 0 ? void 0 : (_router_historyOptions = router.historyOptions) === null || _router_historyOptions === void 0 ? void 0 : _router_historyOptions.basename) || (router === null || router === void 0 ? void 0 : router.basename) || "/"
                }));
              }
              logger("resolvedConfig", {
                output: nConfig.resolved.output,
                runtime: nConfig.resolved.runtime,
                deploy: nConfig.resolved.deploy,
                server: nConfig.resolved.server
              });
              return [
                2,
                nConfig
              ];
            });
          });
          return function(config) {
            return _ref.apply(this, arguments);
          };
        }(),
        config: function config() {
          var _useConfig_output, _useConfig_deploy;
          var useConfig = api.useConfigContext();
          var _api_useAppContext = api.useAppContext(), metaName = _api_useAppContext.metaName, packageName = _api_useAppContext.packageName;
          logger("useConfig", useConfig);
          var disableCssExtract = ((_useConfig_output = useConfig.output) === null || _useConfig_output === void 0 ? void 0 : _useConfig_output.disableCssExtract) || false;
          if ((_useConfig_deploy = useConfig.deploy) === null || _useConfig_deploy === void 0 ? void 0 : _useConfig_deploy.microFrontend) {
            var _useConfig_deploy1;
            var enableHtmlEntry = getDefaultMicroFrontedConfig((_useConfig_deploy1 = useConfig.deploy) === null || _useConfig_deploy1 === void 0 ? void 0 : _useConfig_deploy1.microFrontend).enableHtmlEntry;
            if (!enableHtmlEntry) {
              disableCssExtract = true;
            }
          }
          return {
            output: {
              disableCssExtract
            },
            source: {
              alias: _define_property({}, "@".concat(metaName, "/runtime/garfish"), "@".concat(metaName, "/plugin-garfish/runtime"))
            },
            tools: {
              devServer: {
                headers: {
                  "Access-Control-Allow-Origin": "*"
                }
              },
              bundlerChain: function(chain, param) {
                var env = param.env, CHAIN_ID = param.CHAIN_ID, bundler = param.bundler;
                var _resolveOptions_deploy, _resolveConfig_resolve;
                if (bundler.BannerPlugin) {
                  chain.plugin("garfish-banner").use(bundler.BannerPlugin, [
                    {
                      banner: "Micro front-end"
                    }
                  ]);
                }
                var resolveOptions = api.useResolvedConfigContext();
                if (resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_deploy = resolveOptions.deploy) === null || _resolveOptions_deploy === void 0 ? void 0 : _resolveOptions_deploy.microFrontend) {
                  var _resolveOptions_dev, _useConfig_dev, _resolveOptions_server, _resolveOptions_deploy1;
                  chain.output.libraryTarget("umd");
                  var DEFAULT_ASSET_PREFIX = "/";
                  var resolvedAssetPrefix = (_resolveOptions_dev = resolveOptions.dev) === null || _resolveOptions_dev === void 0 ? void 0 : _resolveOptions_dev.assetPrefix;
                  var isUsingDefaultAssetPrefix = !((_useConfig_dev = useConfig.dev) === null || _useConfig_dev === void 0 ? void 0 : _useConfig_dev.assetPrefix) && (!resolvedAssetPrefix || resolvedAssetPrefix === DEFAULT_ASSET_PREFIX);
                  if (isUsingDefaultAssetPrefix && (resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_server = resolveOptions.server) === null || _resolveOptions_server === void 0 ? void 0 : _resolveOptions_server.port) && env === "development") {
                    chain.output.publicPath("//localhost:".concat(resolveOptions.server.port, "/"));
                  }
                  var _getDefaultMicroFrontedConfig = getDefaultMicroFrontedConfig((_resolveOptions_deploy1 = resolveOptions.deploy) === null || _resolveOptions_deploy1 === void 0 ? void 0 : _resolveOptions_deploy1.microFrontend), enableHtmlEntry2 = _getDefaultMicroFrontedConfig.enableHtmlEntry, externalBasicLibrary = _getDefaultMicroFrontedConfig.externalBasicLibrary;
                  if (externalBasicLibrary) {
                    chain.externals(externals);
                  }
                  if (!enableHtmlEntry2) {
                    chain.output.filename("index.js");
                    chain.plugins.delete("".concat(CHAIN_ID.PLUGIN.HTML, "-main"));
                    chain.optimization.runtimeChunk(false);
                    chain.optimization.splitChunks({
                      chunks: "async"
                    });
                  }
                }
                var uniqueName = chain.output.get("uniqueName");
                if (!uniqueName) {
                  chain.output.uniqueName(packageName);
                }
                var resolveConfig = chain.toConfig();
                logger("bundlerConfig", {
                  output: resolveConfig.output,
                  externals: resolveConfig.externals,
                  env,
                  alias: (_resolveConfig_resolve = resolveConfig.resolve) === null || _resolveConfig_resolve === void 0 ? void 0 : _resolveConfig_resolve.alias,
                  plugins: resolveConfig.plugins
                });
              }
            }
          };
        },
        addRuntimeExports: function addRuntimeExports() {
          var config = api.useResolvedConfigContext();
          var masterApp = getRuntimeConfig(config).masterApp;
          var _api_useAppContext = api.useAppContext(), internalDirectory = _api_useAppContext.internalDirectory, metaName = _api_useAppContext.metaName;
          var pluginsExportsUtils = createRuntimeExportsUtils(internalDirectory, "plugins");
          if (masterApp) {
            var addExportStatement = "export { default as garfish, default as masterApp } from '".concat(metaName, "/plugin-garfish/runtime'");
            logger("exportStatement", addExportStatement);
            pluginsExportsUtils.addExport(addExportStatement);
          }
        },
        generateEntryCode: function generateEntryCode(param) {
          var entrypoints = param.entrypoints;
          return _async_to_generator(function() {
            var _resolveOptions_deploy, resolveOptions, appContext, resolvedConfig, appendEntryCode2;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  resolveOptions = api.useResolvedConfigContext();
                  if (!(resolveOptions === null || resolveOptions === void 0 ? void 0 : (_resolveOptions_deploy = resolveOptions.deploy) === null || _resolveOptions_deploy === void 0 ? void 0 : _resolveOptions_deploy.microFrontend))
                    return [
                      3,
                      2
                    ];
                  appContext = api.useAppContext();
                  resolvedConfig = api.useResolvedConfigContext();
                  appendEntryCode2 = api.useHookRunners().appendEntryCode;
                  return [
                    4,
                    generateCode(entrypoints, appContext, resolvedConfig, appendEntryCode2)
                  ];
                case 1:
                  _state.sent();
                  _state.label = 2;
                case 2:
                  return [
                    2
                  ];
              }
            });
          })();
        }
      };
    }
  };
};
var cli_default = garfishPlugin;
export {
  cli_default as default,
  externals,
  garfishPlugin,
  getDefaultMicroFrontedConfig
};
