function getRuntimeConfig(config) {
  var _config_runtime;
  if (config === null || config === void 0 ? void 0 : (_config_runtime = config.runtime) === null || _config_runtime === void 0 ? void 0 : _config_runtime.features) {
    var _config_runtime1;
    return config === null || config === void 0 ? void 0 : (_config_runtime1 = config.runtime) === null || _config_runtime1 === void 0 ? void 0 : _config_runtime1.features;
  }
  return (config === null || config === void 0 ? void 0 : config.runtime) || {};
}
function setRuntimeConfig(config, key, value) {
  var _config_runtime_features, _config_runtime, _config_runtime1;
  if (config === null || config === void 0 ? void 0 : (_config_runtime = config.runtime) === null || _config_runtime === void 0 ? void 0 : (_config_runtime_features = _config_runtime.features) === null || _config_runtime_features === void 0 ? void 0 : _config_runtime_features[key]) {
    config.runtime.features[key] = value;
    return void 0;
  }
  if (config === null || config === void 0 ? void 0 : (_config_runtime1 = config.runtime) === null || _config_runtime1 === void 0 ? void 0 : _config_runtime1[key]) {
    config.runtime[key] = value;
    return void 0;
  }
  return void 0;
}
var generateAsyncEntryCode = function() {
  var appendCode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return "\n      export const provider = async (...args) => {\n        const exports = await import('./index.jsx');\n        return exports.provider.apply(null, args);\n      };\n      if (!window.__GARFISH__) { import('./index.jsx'); }\n      if (typeof __GARFISH_EXPORTS__ !== 'undefined') {\n        __GARFISH_EXPORTS__.provider = provider;\n      }\n\n      ".concat(appendCode.join("\n"), "\n    ");
};
export {
  generateAsyncEntryCode,
  getRuntimeConfig,
  setRuntimeConfig
};
