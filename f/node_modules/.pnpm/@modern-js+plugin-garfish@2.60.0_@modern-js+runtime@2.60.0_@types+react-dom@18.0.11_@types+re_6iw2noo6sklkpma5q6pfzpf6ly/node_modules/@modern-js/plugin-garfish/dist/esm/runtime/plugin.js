import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _call_super } from "@swc/helpers/_/_call_super";
import { _ as _class_call_check } from "@swc/helpers/_/_class_call_check";
import { _ as _inherits } from "@swc/helpers/_/_inherits";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { jsx as _jsx } from "react/jsx-runtime";
import { merge } from "@modern-js/runtime-utils/merge";
import GarfishInstance from "garfish";
import React from "react";
import { logger } from "../util";
import { GarfishProvider } from "./utils/Context";
import { generateMApp } from "./utils/MApp";
import { generateApps } from "./utils/apps";
import setExternal from "./utils/setExternal";
function initOptions() {
  return _initOptions.apply(this, arguments);
}
function _initOptions() {
  _initOptions = _async_to_generator(function() {
    var manifest, options, _window_modern_manifest, _window, _window_modern_manifest1, _window1, apps, getAppList, _window_modern_manifest2, _window2;
    var _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          manifest = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : {}, options = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : {};
          apps = options.apps || [];
          if (manifest === null || manifest === void 0 ? void 0 : manifest.modules) {
            if ((manifest === null || manifest === void 0 ? void 0 : manifest.modules.length) > 0) {
              apps = manifest === null || manifest === void 0 ? void 0 : manifest.modules;
            }
            logger("manifest modules", apps);
          }
          if (!(manifest === null || manifest === void 0 ? void 0 : manifest.getAppList))
            return [
              3,
              2
            ];
          return [
            4,
            manifest === null || manifest === void 0 ? void 0 : manifest.getAppList(manifest)
          ];
        case 1:
          getAppList = _state.sent();
          if (getAppList.length > 0) {
            apps = getAppList;
          }
          logger("getAppList modules", apps);
          _state.label = 2;
        case 2:
          if (((_window = window) === null || _window === void 0 ? void 0 : (_window_modern_manifest = _window.modern_manifest) === null || _window_modern_manifest === void 0 ? void 0 : _window_modern_manifest.modules) && ((_window1 = window) === null || _window1 === void 0 ? void 0 : (_window_modern_manifest1 = _window1.modern_manifest) === null || _window_modern_manifest1 === void 0 ? void 0 : _window_modern_manifest1.modules.length) > 0) {
            ;
            apps = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window_modern_manifest2 = _window2.modern_manifest) === null || _window_modern_manifest2 === void 0 ? void 0 : _window_modern_manifest2.modules;
            logger("modern_manifest", apps);
          }
          return [
            2,
            _object_spread_props(_object_spread({}, options), {
              apps
            })
          ];
      }
    });
  });
  return _initOptions.apply(this, arguments);
}
var garfishPlugin = function() {
  var userConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    name: "@modern-js/garfish-plugin",
    setup: function(api) {
      setExternal();
      return {
        wrapRoot: function wrapRoot(App) {
          var pluginConfig = api.useRuntimeConfigContext();
          var config = merge(pluginConfig.garfish || {}, userConfig);
          var manifest = config.manifest, options = _object_without_properties(config, [
            "manifest"
          ]);
          logger("createPlugin", config);
          var promise = initOptions(manifest, options);
          var GetMicroFrontendApp = /* @__PURE__ */ function(_React_Component) {
            "use strict";
            _inherits(GetMicroFrontendApp2, _React_Component);
            function GetMicroFrontendApp2(props) {
              _class_call_check(this, GetMicroFrontendApp2);
              var _this;
              var _this1;
              _this = _call_super(this, GetMicroFrontendApp2, [
                props
              ]), _this1 = _this, _this.state = {
                MApp: function() {
                  logger("MApp init Component Render");
                  return /* @__PURE__ */ React.createElement("div");
                },
                apps: new Proxy({}, {
                  get: function get() {
                    return function() {
                      return /* @__PURE__ */ React.createElement("div");
                    };
                  }
                }),
                appInfoList: []
              };
              var load = function() {
                var _ref = _async_to_generator(function() {
                  var GarfishConfig, _generateApps, appInfoList, apps, MApp;
                  return _ts_generator(this, function(_state) {
                    switch (_state.label) {
                      case 0:
                        GarfishInstance.setOptions(_object_spread_props(_object_spread({}, options), {
                          insulationVariable: _to_consumable_array(options.insulationVariable || []).concat([
                            "_SERVER_DATA"
                          ]),
                          apps: []
                        }));
                        return [
                          4,
                          promise
                        ];
                      case 1:
                        GarfishConfig = _state.sent();
                        _generateApps = generateApps(GarfishConfig, manifest), appInfoList = _generateApps.appInfoList, apps = _generateApps.apps;
                        GarfishInstance.registerApp(appInfoList);
                        MApp = generateMApp(GarfishConfig, manifest);
                        logger("initOptions result", {
                          manifest,
                          GarfishConfig
                        });
                        logger("generateApps", {
                          MApp,
                          apps,
                          appInfoList
                        });
                        _this1.setState({
                          MApp,
                          apps,
                          appInfoList
                        });
                        return [
                          2
                        ];
                    }
                  });
                });
                return function load2() {
                  return _ref.apply(this, arguments);
                };
              }();
              load();
              return _this;
            }
            var _proto = GetMicroFrontendApp2.prototype;
            _proto.render = function render() {
              logger("GarfishProvider state", this.state);
              return /* @__PURE__ */ _jsx(GarfishProvider, {
                value: this.state,
                children: /* @__PURE__ */ _jsx(App, _object_spread({}, this.props))
              });
            };
            return GetMicroFrontendApp2;
          }(React.Component);
          return GetMicroFrontendApp;
        }
      };
    }
  };
};
var plugin_default = garfishPlugin;
export {
  plugin_default as default,
  garfishPlugin
};
