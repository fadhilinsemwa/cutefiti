import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import { _ as _sliced_to_array } from "@swc/helpers/_/_sliced_to_array";
import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { RuntimeReactContext } from "@meta/runtime";
import Garfish from "garfish";
import { useContext, useEffect, useRef, useState } from "react";
import { generateSubAppContainerKey, logger } from "../../util";
import { Loadable } from "../loadable";
function pathJoin() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var res = args.reduce(function(res2, path) {
    var nPath = path;
    if (!nPath || typeof nPath !== "string") {
      return res2;
    }
    if (nPath[0] !== "/") {
      nPath = "/".concat(nPath);
    }
    var lastIndex = nPath.length - 1;
    if (nPath[lastIndex] === "/") {
      nPath = nPath.substring(0, lastIndex);
    }
    return res2 + nPath;
  }, "");
  return res || "/";
}
function getAppInstance(options, appInfo, manifest) {
  var locationHref = "";
  function MicroApp(props) {
    var _context_router, _context_router1, _context_router2, _context_router3, _context_router4;
    var appRef = useRef(null);
    var domId = generateSubAppContainerKey(appInfo);
    var _useState = _sliced_to_array(useState(), 2), SubModuleComponent = _useState[0], setSubModuleComponent = _useState[1];
    var context = useContext(RuntimeReactContext);
    var _props_useRouteMatch;
    var useRouteMatch = (_props_useRouteMatch = props.useRouteMatch) !== null && _props_useRouteMatch !== void 0 ? _props_useRouteMatch : context === null || context === void 0 ? void 0 : (_context_router = context.router) === null || _context_router === void 0 ? void 0 : _context_router.useRouteMatch;
    var _props_useMatches;
    var useMatches = (_props_useMatches = props.useMatches) !== null && _props_useMatches !== void 0 ? _props_useMatches : context === null || context === void 0 ? void 0 : (_context_router1 = context.router) === null || _context_router1 === void 0 ? void 0 : _context_router1.useMatches;
    var _props_useLocation;
    var useLocation = (_props_useLocation = props.useLocation) !== null && _props_useLocation !== void 0 ? _props_useLocation : context === null || context === void 0 ? void 0 : (_context_router2 = context.router) === null || _context_router2 === void 0 ? void 0 : _context_router2.useLocation;
    var _props_useHistory;
    var useHistory = (_props_useHistory = props.useHistory) !== null && _props_useHistory !== void 0 ? _props_useHistory : context === null || context === void 0 ? void 0 : (_context_router3 = context.router) === null || _context_router3 === void 0 ? void 0 : _context_router3.useHistory;
    var _props_useHistory1;
    var useHref = (_props_useHistory1 = props.useHistory) !== null && _props_useHistory1 !== void 0 ? _props_useHistory1 : context === null || context === void 0 ? void 0 : (_context_router4 = context.router) === null || _context_router4 === void 0 ? void 0 : _context_router4.useHref;
    var match = useRouteMatch === null || useRouteMatch === void 0 ? void 0 : useRouteMatch();
    var matchs = useMatches === null || useMatches === void 0 ? void 0 : useMatches();
    if (!useLocation) {
      console.warn(`[@modern-js/plugin-garfish] Detected that the 'router: false' mode is used. In this case, the basename and popStateEvent cannot be correctly passed to the sub-app.
You can manually pass 'useLocation' and 'useHref' props to assist plugin-garfish in calculating the "basename" and sync popStateEvent:
if you are using react-router-V6:
<Component useLocation={useLocation} useHref={useHref} />

else react-router-V5:
<Component useLocation={useLocation} useHistory={useHistory} />

or directly pass the "basename":
<Component basename={basename} useLocation={useLocation} />`);
    }
    var location = useLocation();
    var basename = (options === null || options === void 0 ? void 0 : options.basename) || "/";
    if (useHistory) {
      var _history_createHref;
      var history = useHistory === null || useHistory === void 0 ? void 0 : useHistory();
      basename = history === null || history === void 0 ? void 0 : (_history_createHref = history.createHref) === null || _history_createHref === void 0 ? void 0 : _history_createHref.call(history, {
        pathname: "/"
      });
    } else if (useHref) {
      basename = useHref === null || useHref === void 0 ? void 0 : useHref("/");
    }
    if (matchs && matchs.length > 0) {
      var matchItem = _object_spread({}, matchs[matchs.length - 1]);
      for (var key in matchItem.params) {
        matchItem.pathname = matchItem.pathname.replace(new RegExp("/".concat(matchItem.params[key], "$")), "");
      }
      basename = pathJoin(basename, matchItem.pathname || "/");
    } else if (match) {
      basename = pathJoin(basename, (match === null || match === void 0 ? void 0 : match.path) || "/");
    }
    if (props.basename && typeof props.basename === "string") {
      basename = props.basename;
    }
    useEffect(function() {
      if (location && locationHref !== location.pathname && !Garfish.running) {
        locationHref = location.pathname;
        var popStateEvent = new PopStateEvent("popstate");
        popStateEvent.garfish = true;
        dispatchEvent(popStateEvent);
        logger("MicroApp Garfish.loadApp popstate");
      }
    }, [
      location
    ]);
    useEffect(function() {
      var renderApp = function renderApp2() {
        return _renderApp.apply(this, arguments);
      };
      var setLoadingState = props.setLoadingState, userProps = _object_without_properties(props, [
        "setLoadingState"
      ]);
      var loadAppOptions = _object_spread_props(_object_spread({
        cache: true,
        insulationVariable: _to_consumable_array(appInfo.insulationVariable || []).concat([
          "_SERVER_DATA"
        ]),
        domGetter: "#".concat(domId)
      }, appInfo), {
        basename,
        props: _object_spread({}, appInfo.props, userProps),
        customLoader: function(provider) {
          var render = provider.render, destroy = provider.destroy, SubModuleComponent2 = provider.SubModuleComponent, jupiter_submodule_app_key = provider.jupiter_submodule_app_key;
          var componetRenderMode = (manifest === null || manifest === void 0 ? void 0 : manifest.componentRender) && (SubModuleComponent2 || jupiter_submodule_app_key);
          return {
            mount: function() {
              for (var _len = arguments.length, _$props = new Array(_len), _key = 0; _key < _len; _key++) {
                _$props[_key] = arguments[_key];
              }
              if (componetRenderMode) {
                setSubModuleComponent(SubModuleComponent2);
                return void 0;
              } else {
                logger("MicroApp customer render", _$props);
                return render === null || render === void 0 ? void 0 : render.apply(provider, _$props);
              }
            },
            unmount: function unmount() {
              for (var _len = arguments.length, _$props = new Array(_len), _key = 0; _key < _len; _key++) {
                _$props[_key] = arguments[_key];
              }
              if (componetRenderMode) {
                return void 0;
              }
              logger("MicroApp customer destroy", _$props);
              return destroy === null || destroy === void 0 ? void 0 : destroy.apply(provider, _$props);
            }
          };
        }
      });
      setLoadingState({
        isLoading: true,
        error: null
      });
      logger('MicroApp Garfish.loadApp "'.concat(appInfo.name, '"'), {
        loadAppOptions
      });
      function _renderApp() {
        _renderApp = _async_to_generator(function() {
          var appInstance, error;
          return _ts_generator(this, function(_state) {
            switch (_state.label) {
              case 0:
                _state.trys.push([
                  0,
                  6,
                  ,
                  7
                ]);
                return [
                  4,
                  Garfish.loadApp(appInfo.name, loadAppOptions)
                ];
              case 1:
                appInstance = _state.sent();
                if (!appInstance) {
                  throw new Error('MicroApp Garfish.loadApp "'.concat(appInfo.name, '" result is null'));
                }
                appRef.current = appInstance;
                setLoadingState({
                  isLoading: false
                });
                if (!(appInstance.mounted && appInstance.appInfo.cache))
                  return [
                    3,
                    3
                  ];
                logger('MicroApp Garfish.loadApp "'.concat(appInfo.name, '" show'), {
                  appInfo: appInstance.appInfo,
                  appInstance
                });
                return [
                  4,
                  appInstance === null || appInstance === void 0 ? void 0 : appInstance.show()
                ];
              case 2:
                _state.sent();
                return [
                  3,
                  5
                ];
              case 3:
                logger('MicroApp Garfish.loadApp "'.concat(appInfo.name, '" mount'), {
                  appInfo: appInstance.appInfo,
                  appInstance
                });
                return [
                  4,
                  appInstance === null || appInstance === void 0 ? void 0 : appInstance.mount()
                ];
              case 4:
                _state.sent();
                _state.label = 5;
              case 5:
                return [
                  3,
                  7
                ];
              case 6:
                error = _state.sent();
                setLoadingState({
                  isLoading: true,
                  error
                });
                return [
                  3,
                  7
                ];
              case 7:
                return [
                  2
                ];
            }
          });
        });
        return _renderApp.apply(this, arguments);
      }
      renderApp();
      return function() {
        if (appRef.current) {
          var _$appInfo = appRef.current.appInfo;
          if (_$appInfo.cache) {
            var _appRef_current;
            logger('MicroApp Garfish.loadApp "'.concat(_$appInfo.name, '" hide'));
            (_appRef_current = appRef.current) === null || _appRef_current === void 0 ? void 0 : _appRef_current.hide();
          } else {
            var _appRef_current1;
            logger('MicroApp Garfish.loadApp "'.concat(_$appInfo.name, '" unmount'));
            (_appRef_current1 = appRef.current) === null || _appRef_current1 === void 0 ? void 0 : _appRef_current1.unmount();
          }
        }
      };
    }, []);
    return /* @__PURE__ */ _jsx(_Fragment, {
      children: /* @__PURE__ */ _jsx("div", {
        id: domId,
        children: SubModuleComponent && /* @__PURE__ */ _jsx(SubModuleComponent, {})
      })
    });
  }
  return Loadable(MicroApp)(manifest === null || manifest === void 0 ? void 0 : manifest.loadable);
}
function generateApps(options, manifest) {
  var _options_apps;
  var apps = {};
  (_options_apps = options.apps) === null || _options_apps === void 0 ? void 0 : _options_apps.forEach(function(appInfo) {
    var Component = getAppInstance(options, appInfo, manifest);
    appInfo.Component = Component;
    apps[appInfo.name] = Component;
  });
  return {
    apps,
    appInfoList: options.apps || []
  };
}
export {
  generateApps,
  pathJoin
};
