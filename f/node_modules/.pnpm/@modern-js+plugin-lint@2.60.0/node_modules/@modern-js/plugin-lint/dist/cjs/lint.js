"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var lint_exports = {};
__export(lint_exports, {
  default: () => lint_default
});
module.exports = __toCommonJS(lint_exports);
var import_path = require("path");
var import_utils = require("@modern-js/utils");
var import_cross_spawn = __toESM(require("cross-spawn"));
const ensureOption = (args, name, val) => {
  if (!args.hasOwnProperty(name) || args[name].length < 1) {
    if (Array.isArray(val)) {
      return [
        `--${name}`,
        val.join(",")
      ];
    }
    if (typeof val === "boolean") {
      return val ? [
        `--${name}`
      ] : [
        `--no-${name}`
      ];
    } else {
      return [
        `--${name}`,
        val
      ];
    }
  }
  return [];
};
var lint_default = () => {
  var _args__;
  const rawArgs = process.argv.slice(3);
  const args = (0, import_utils.minimist)(rawArgs);
  const exts = [
    ".js",
    ".jsx",
    ".ts",
    ".tsx",
    ".mjs",
    ".mjsx",
    ".cjs",
    ".cjsx"
  ];
  rawArgs.push(...ensureOption(args, "ext", exts));
  rawArgs.push(...ensureOption(args, "fix", true));
  [
    "node_modules/",
    "dist/",
    "output/",
    "output_resource/"
  ].forEach((pattern) => {
    rawArgs.push(...ensureOption(args, "ignore-pattern", pattern));
  });
  if (args === null || args === void 0 ? void 0 : (_args__ = args._) === null || _args__ === void 0 ? void 0 : _args__.length) {
    rawArgs.push(...args._);
  } else {
    rawArgs.push("./");
  }
  const eslintScript = (0, import_path.join)(require.resolve("eslint/package.json"), "../bin/eslint.js");
  import_utils.logger.info(import_utils.chalk.bold("Lint..."));
  import_utils.logger.info(import_utils.chalk.bold(`NODE_OPTIONS="--max-old-space-size=8192" ${eslintScript} ${rawArgs.join(" ")}`));
  const childprocess = (0, import_cross_spawn.default)(eslintScript, rawArgs, {
    stdio: "inherit"
  });
  childprocess.on("exit", (code) => process.exit(code || 0));
};
