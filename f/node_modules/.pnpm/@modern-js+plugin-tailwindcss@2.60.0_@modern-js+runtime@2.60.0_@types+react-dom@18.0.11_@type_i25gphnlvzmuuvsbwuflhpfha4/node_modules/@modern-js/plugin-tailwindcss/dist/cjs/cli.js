"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cli_exports = {};
__export(cli_exports, {
  default: () => cli_default,
  tailwindcssPlugin: () => tailwindcssPlugin
});
module.exports = __toCommonJS(cli_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_config = require("./config");
var import_cli = require("./design-token/cli");
var import_macro = require("./macro");
var import_utils2 = require("./utils");
const tailwindcssPlugin = ({ pluginName } = {
  pluginName: "@modern-js/plugin-tailwindcss"
}) => ({
  name: "@modern-js/plugin-tailwindcss",
  // support designSystem.supportStyledComponents
  usePlugins: [
    (0, import_cli.designTokenPlugin)({
      pluginName
    })
  ],
  setup: async (api) => {
    const { appDirectory, internalDirectory } = api.useAppContext();
    let internalTwConfigPath = "";
    const haveTwinMacro = await (0, import_macro.checkTwinMacroExist)(appDirectory);
    const tailwindPath = (0, import_utils2.getTailwindPath)(appDirectory);
    const tailwindVersion = (0, import_utils2.getTailwindVersion)(appDirectory);
    const userTailwindConfig = await (0, import_config.loadConfigFile)(appDirectory);
    return {
      prepare() {
        if (haveTwinMacro) {
          const twinMajorVersion = (0, import_macro.getTwinMacroMajorVersion)(appDirectory);
          const useConfigPath = twinMajorVersion && twinMajorVersion < 3;
          if (useConfigPath) {
            internalTwConfigPath = (0, import_macro.getRandomTwConfigFileName)(internalDirectory);
            const globPattern = (0, import_utils.slash)(import_path.default.join(appDirectory, import_utils.CONFIG_CACHE_DIR, "*.cjs"));
            const files = import_utils.globby.sync(globPattern, {
              absolute: true
            });
            if (files.length > 0) {
              import_utils.fs.writeFileSync(internalTwConfigPath, (0, import_macro.template)(files[files.length - 1]), "utf-8");
            }
          }
        }
      },
      config() {
        let tailwindConfig;
        const initTailwindConfig = () => {
          if (!tailwindConfig) {
            var _modernConfig_tools, _modernConfig_source;
            const modernConfig = api.useResolvedConfigContext();
            tailwindConfig = (0, import_config.getTailwindConfig)({
              appDirectory,
              tailwindVersion,
              userConfig: userTailwindConfig,
              extraConfig: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_tools = modernConfig.tools) === null || _modernConfig_tools === void 0 ? void 0 : _modernConfig_tools.tailwindcss,
              designSystem: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_source = modernConfig.source) === null || _modernConfig_source === void 0 ? void 0 : _modernConfig_source.designSystem
            });
          }
        };
        return {
          tools: {
            // TODO: Add interface about postcss config
            // TODO: In module project, also is called, but should not be called.
            postcss: (config) => {
              initTailwindConfig();
              const tailwindPlugin = require(tailwindPath)(tailwindConfig);
              if (Array.isArray(config.postcssOptions.plugins)) {
                config.postcssOptions.plugins.push(tailwindPlugin);
              } else {
                config.postcssOptions.plugins = [
                  tailwindPlugin
                ];
              }
            },
            babel: haveTwinMacro ? (_, { addPlugins }) => {
              const supportCssInJsLibrary = "styled-components";
              initTailwindConfig();
              addPlugins([
                [
                  require.resolve("babel-plugin-macros"),
                  {
                    twin: {
                      preset: supportCssInJsLibrary,
                      config: internalTwConfigPath || tailwindConfig
                    }
                  }
                ]
              ]);
            } : void 0
          }
        };
      },
      beforeBuildTask(config) {
        const modernConfig = api.useResolvedConfigContext();
        const tailwindConfig = (0, import_config.getTailwindConfig)({
          appDirectory,
          tailwindVersion,
          userConfig: userTailwindConfig,
          extraConfig: config.style.tailwindcss,
          designSystem: modernConfig.designSystem
        });
        const tailwindPlugin = require(tailwindPath)(tailwindConfig);
        if (Array.isArray(config.style.postcss.plugins)) {
          config.style.postcss.plugins.push(tailwindPlugin);
        } else {
          config.style.postcss.plugins = [
            tailwindPlugin
          ];
        }
        config.transformCache = false;
        return config;
      }
    };
  }
});
var cli_default = tailwindcssPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  tailwindcssPlugin
});
