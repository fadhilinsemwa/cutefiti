"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var config_exports = {};
__export(config_exports, {
  getTailwindConfig: () => getTailwindConfig,
  loadConfigFile: () => loadConfigFile
});
module.exports = __toCommonJS(config_exports);
var import_path = __toESM(require("path"));
var import_node_bundle_require = require("@modern-js/node-bundle-require");
var import_utils = require("@modern-js/utils");
var import_lodash = require("@modern-js/utils/lodash");
function getDefaultContent(appDirectory) {
  const defaultContent = [
    "./src/**/*.{js,jsx,ts,tsx}"
  ];
  if (import_utils.fs.existsSync(import_path.default.join(appDirectory, "storybook"))) {
    defaultContent.push("./storybook/**/*");
  }
  if (import_utils.fs.existsSync(import_path.default.join(appDirectory, "config/html"))) {
    defaultContent.push("./config/html/**/*.{html,ejs,hbs}");
  }
  return defaultContent;
}
const getPureDesignSystemConfig = (config) => {
  const pureConfig = (0, import_lodash.cloneDeep)(config);
  delete pureConfig.supportStyledComponents;
  return pureConfig;
};
const getV2PurgeConfig = (content) => ({
  enabled: process.env.NODE_ENV === "production",
  layers: [
    "utilities"
  ],
  content
});
async function loadConfigFile(appDirectory) {
  const extensions = [
    "ts",
    "js",
    "cjs",
    "mjs"
  ];
  const configs = extensions.map((ext) => import_path.default.resolve(appDirectory, `tailwind.config.${ext}`));
  const configFile = (0, import_utils.findExists)(configs);
  if (configFile) {
    const mod = await (0, import_node_bundle_require.bundleRequire)(configFile);
    return mod.default || mod;
  }
  return {};
}
const getTailwindConfig = ({ tailwindVersion, appDirectory, userConfig, extraConfig, designSystem }) => {
  const content = getDefaultContent(appDirectory);
  let tailwindConfig = tailwindVersion === "3" ? {
    content
  } : {
    purge: getV2PurgeConfig(content)
  };
  Object.assign(tailwindConfig, userConfig);
  tailwindConfig = extraConfig ? (0, import_utils.applyOptionsChain)(tailwindConfig, extraConfig) : tailwindConfig;
  const designSystemConfig = getPureDesignSystemConfig(designSystem !== null && designSystem !== void 0 ? designSystem : {});
  if (designSystemConfig && Object.keys(designSystemConfig).length > 0) {
    tailwindConfig.theme = designSystemConfig;
  }
  return tailwindConfig;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTailwindConfig,
  loadConfigFile
});
