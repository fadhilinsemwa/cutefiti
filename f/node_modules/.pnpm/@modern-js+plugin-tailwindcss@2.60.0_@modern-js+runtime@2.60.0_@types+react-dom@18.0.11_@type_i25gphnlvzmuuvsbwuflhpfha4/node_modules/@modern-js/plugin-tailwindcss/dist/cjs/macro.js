"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var macro_exports = {};
__export(macro_exports, {
  checkTwinMacroExist: () => checkTwinMacroExist,
  getRandomTwConfigFileName: () => getRandomTwConfigFileName,
  getTwinMacroMajorVersion: () => getTwinMacroMajorVersion,
  template: () => template
});
module.exports = __toCommonJS(macro_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
const template = (configPath) => `
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
const modernConfig = _interopRequireDefault(require('${configPath}')).default;

const theme =
    modernConfig && modernConfig.source && modernConfig.source.designSystem
      ? modernConfig.source.designSystem
      : {};
const tailwindcss =
    modernConfig && modernConfig.tools && modernConfig.tools.tailwindcss
      ? modernConfig.tools.tailwindcss
      : {};

module.exports = {
    theme,
    ...tailwindcss,
};
`;
const TWIN_MACRO_NAME = "twin.macro";
const checkTwinMacroExist = async (appDirectory) => {
  const packageJson = await import_utils.fs.readJSON(import_path.default.join(appDirectory, "package.json"), {
    throws: false
  }) || {};
  return Boolean(typeof packageJson.dependencies === "object" && packageJson.dependencies[TWIN_MACRO_NAME] || typeof packageJson.devDependencies === "object" && packageJson.devDependencies[TWIN_MACRO_NAME]);
};
const getTwinMacroMajorVersion = (appDirectory) => {
  try {
    const pkgJsonPath = require.resolve(`${TWIN_MACRO_NAME}/package.json`, {
      paths: [
        appDirectory
      ]
    });
    const { version } = require(pkgJsonPath);
    return Number(version.split(".")[0]);
  } catch (err) {
    return null;
  }
};
const getRandomTwConfigFileName = (internalDirectory) => {
  return (0, import_utils.slash)(import_path.default.join(internalDirectory, `tailwind.config.${Date.now()}.${(0, import_utils.nanoid)()}.js`));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkTwinMacroExist,
  getRandomTwConfigFileName,
  getTwinMacroMajorVersion,
  template
});
