import path from "path";
import { fs, CONFIG_CACHE_DIR, globby, slash } from "@modern-js/utils";
import { getTailwindConfig, loadConfigFile } from "./config";
import { designTokenPlugin } from "./design-token/cli";
import { checkTwinMacroExist, getRandomTwConfigFileName, getTwinMacroMajorVersion, template } from "./macro";
import { getTailwindPath, getTailwindVersion } from "./utils";
const tailwindcssPlugin = ({ pluginName } = {
  pluginName: "@modern-js/plugin-tailwindcss"
}) => ({
  name: "@modern-js/plugin-tailwindcss",
  // support designSystem.supportStyledComponents
  usePlugins: [
    designTokenPlugin({
      pluginName
    })
  ],
  setup: async (api) => {
    const { appDirectory, internalDirectory } = api.useAppContext();
    let internalTwConfigPath = "";
    const haveTwinMacro = await checkTwinMacroExist(appDirectory);
    const tailwindPath = getTailwindPath(appDirectory);
    const tailwindVersion = getTailwindVersion(appDirectory);
    const userTailwindConfig = await loadConfigFile(appDirectory);
    return {
      prepare() {
        if (haveTwinMacro) {
          const twinMajorVersion = getTwinMacroMajorVersion(appDirectory);
          const useConfigPath = twinMajorVersion && twinMajorVersion < 3;
          if (useConfigPath) {
            internalTwConfigPath = getRandomTwConfigFileName(internalDirectory);
            const globPattern = slash(path.join(appDirectory, CONFIG_CACHE_DIR, "*.cjs"));
            const files = globby.sync(globPattern, {
              absolute: true
            });
            if (files.length > 0) {
              fs.writeFileSync(internalTwConfigPath, template(files[files.length - 1]), "utf-8");
            }
          }
        }
      },
      config() {
        let tailwindConfig;
        const initTailwindConfig = () => {
          if (!tailwindConfig) {
            var _modernConfig_tools, _modernConfig_source;
            const modernConfig = api.useResolvedConfigContext();
            tailwindConfig = getTailwindConfig({
              appDirectory,
              tailwindVersion,
              userConfig: userTailwindConfig,
              extraConfig: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_tools = modernConfig.tools) === null || _modernConfig_tools === void 0 ? void 0 : _modernConfig_tools.tailwindcss,
              designSystem: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_source = modernConfig.source) === null || _modernConfig_source === void 0 ? void 0 : _modernConfig_source.designSystem
            });
          }
        };
        return {
          tools: {
            // TODO: Add interface about postcss config
            // TODO: In module project, also is called, but should not be called.
            postcss: (config) => {
              initTailwindConfig();
              const tailwindPlugin = require(tailwindPath)(tailwindConfig);
              if (Array.isArray(config.postcssOptions.plugins)) {
                config.postcssOptions.plugins.push(tailwindPlugin);
              } else {
                config.postcssOptions.plugins = [
                  tailwindPlugin
                ];
              }
            },
            babel: haveTwinMacro ? (_, { addPlugins }) => {
              const supportCssInJsLibrary = "styled-components";
              initTailwindConfig();
              addPlugins([
                [
                  require.resolve("babel-plugin-macros"),
                  {
                    twin: {
                      preset: supportCssInJsLibrary,
                      config: internalTwConfigPath || tailwindConfig
                    }
                  }
                ]
              ]);
            } : void 0
          }
        };
      },
      beforeBuildTask(config) {
        const modernConfig = api.useResolvedConfigContext();
        const tailwindConfig = getTailwindConfig({
          appDirectory,
          tailwindVersion,
          userConfig: userTailwindConfig,
          extraConfig: config.style.tailwindcss,
          designSystem: modernConfig.designSystem
        });
        const tailwindPlugin = require(tailwindPath)(tailwindConfig);
        if (Array.isArray(config.style.postcss.plugins)) {
          config.style.postcss.plugins.push(tailwindPlugin);
        } else {
          config.style.postcss.plugins = [
            tailwindPlugin
          ];
        }
        config.transformCache = false;
        return config;
      }
    };
  }
});
var cli_default = tailwindcssPlugin;
export {
  cli_default as default,
  tailwindcssPlugin
};
