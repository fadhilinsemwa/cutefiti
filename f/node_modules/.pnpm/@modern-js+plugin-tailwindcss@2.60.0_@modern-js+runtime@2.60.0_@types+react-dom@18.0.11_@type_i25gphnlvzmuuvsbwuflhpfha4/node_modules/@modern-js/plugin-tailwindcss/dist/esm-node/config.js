import path from "path";
import { bundleRequire } from "@modern-js/node-bundle-require";
import { fs, applyOptionsChain, findExists } from "@modern-js/utils";
import { cloneDeep } from "@modern-js/utils/lodash";
function getDefaultContent(appDirectory) {
  const defaultContent = [
    "./src/**/*.{js,jsx,ts,tsx}"
  ];
  if (fs.existsSync(path.join(appDirectory, "storybook"))) {
    defaultContent.push("./storybook/**/*");
  }
  if (fs.existsSync(path.join(appDirectory, "config/html"))) {
    defaultContent.push("./config/html/**/*.{html,ejs,hbs}");
  }
  return defaultContent;
}
const getPureDesignSystemConfig = (config) => {
  const pureConfig = cloneDeep(config);
  delete pureConfig.supportStyledComponents;
  return pureConfig;
};
const getV2PurgeConfig = (content) => ({
  enabled: process.env.NODE_ENV === "production",
  layers: [
    "utilities"
  ],
  content
});
async function loadConfigFile(appDirectory) {
  const extensions = [
    "ts",
    "js",
    "cjs",
    "mjs"
  ];
  const configs = extensions.map((ext) => path.resolve(appDirectory, `tailwind.config.${ext}`));
  const configFile = findExists(configs);
  if (configFile) {
    const mod = await bundleRequire(configFile);
    return mod.default || mod;
  }
  return {};
}
const getTailwindConfig = ({ tailwindVersion, appDirectory, userConfig, extraConfig, designSystem }) => {
  const content = getDefaultContent(appDirectory);
  let tailwindConfig = tailwindVersion === "3" ? {
    content
  } : {
    purge: getV2PurgeConfig(content)
  };
  Object.assign(tailwindConfig, userConfig);
  tailwindConfig = extraConfig ? applyOptionsChain(tailwindConfig, extraConfig) : tailwindConfig;
  const designSystemConfig = getPureDesignSystemConfig(designSystem !== null && designSystem !== void 0 ? designSystem : {});
  if (designSystemConfig && Object.keys(designSystemConfig).length > 0) {
    tailwindConfig.theme = designSystemConfig;
  }
  return tailwindConfig;
};
export {
  getTailwindConfig,
  loadConfigFile
};
