import { createRuntimeExportsUtils, lazyImport } from "@modern-js/utils";
const designTokenPlugin = ({ pluginName } = {
  pluginName: "@modern-js/plugin-tailwindcss"
}) => ({
  name: "@modern-js/plugin-design-token",
  setup(api) {
    const resolveConfig = lazyImport("tailwindcss/resolveConfig", require);
    const PLUGIN_IDENTIFIER = "designToken";
    const getDesignTokens = (designSystem) => {
      const tailwindcssConfig = {};
      tailwindcssConfig.theme = designSystem ? {
        ...designSystem
      } : {};
      if (!designSystem) {
        tailwindcssConfig.presets = [];
      }
      if (designSystem) {
        delete tailwindcssConfig.theme.supportStyledComponents;
      }
      return resolveConfig(tailwindcssConfig).theme || {};
    };
    return {
      _internalRuntimePlugins({ entrypoint, plugins }) {
        var _userConfig_source;
        const userConfig = api.useResolvedConfigContext();
        var _userConfig_source_designSystem;
        const designSystem = (_userConfig_source_designSystem = (_userConfig_source = userConfig.source) === null || _userConfig_source === void 0 ? void 0 : _userConfig_source.designSystem) !== null && _userConfig_source_designSystem !== void 0 ? _userConfig_source_designSystem : {};
        let useSCThemeProvider = true;
        if (designSystem) {
          useSCThemeProvider = (designSystem === null || designSystem === void 0 ? void 0 : designSystem.supportStyledComponents) || false;
        }
        if (typeof designSystem === "object" && designSystem.supportStyledComponents) {
          const designTokens = getDesignTokens(userConfig.source.designSystem);
          plugins.push({
            name: PLUGIN_IDENTIFIER,
            path: `${pluginName}/runtime-design-token`,
            config: {
              token: designTokens,
              useStyledComponentsThemeProvider: Boolean(useSCThemeProvider),
              useDesignTokenContext: false
            }
          });
        }
        return {
          entrypoint,
          plugins
        };
      },
      addRuntimeExports() {
        const appContext = api.useAppContext();
        const pluginsExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, "plugins");
        pluginsExportsUtils.addExport(`export { default as designToken } from '${pluginName}/runtime-design-token'`);
      }
    };
  }
});
export {
  designTokenPlugin
};
