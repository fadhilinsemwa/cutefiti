import { jsx as _jsx } from "react/jsx-runtime";
import { merge } from "@modern-js/runtime-utils/merge";
import React, { useContext } from "react";
const DesignTokenContext = /* @__PURE__ */ React.createContext({});
const useDesignTokens = () => useContext(DesignTokenContext);
const designTokenPlugin = (userConfig = {}) => ({
  name: "@modern-js/plugin-design-token",
  setup: (api) => ({
    wrapRoot(App) {
      const pluginConfig = api.useRuntimeConfigContext();
      const { options } = merge(pluginConfig.designToken || {}, userConfig);
      const DesignTokenAppWrapper = (props) => {
        const { token = {}, useStyledComponentsThemeProvider = false, useDesignTokenContext = false } = options;
        if (useStyledComponentsThemeProvider && useDesignTokenContext) {
          const { ThemeProvider } = require("@modern-js/runtime/styled");
          return /* @__PURE__ */ _jsx(ThemeProvider, {
            theme: token,
            children: /* @__PURE__ */ _jsx(DesignTokenContext.Provider, {
              value: token,
              children: /* @__PURE__ */ _jsx(App, {
                ...props
              })
            })
          });
        } else if (useStyledComponentsThemeProvider) {
          const { ThemeProvider } = require("@modern-js/runtime/styled");
          return /* @__PURE__ */ _jsx(ThemeProvider, {
            theme: token,
            children: /* @__PURE__ */ _jsx(App, {
              ...props
            })
          });
        } else if (useDesignTokenContext) {
          return /* @__PURE__ */ _jsx(DesignTokenContext.Provider, {
            value: token,
            children: /* @__PURE__ */ _jsx(App, {
              ...props
            })
          });
        } else {
          return /* @__PURE__ */ _jsx(App, {
            ...props
          });
        }
      };
      return DesignTokenAppWrapper;
    }
  })
});
var plugin_default = designTokenPlugin;
export {
  DesignTokenContext,
  plugin_default as default,
  designTokenPlugin,
  useDesignTokens
};
