import path from "path";
import { fs, nanoid, slash } from "@modern-js/utils";
const template = (configPath) => `
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
const modernConfig = _interopRequireDefault(require('${configPath}')).default;

const theme =
    modernConfig && modernConfig.source && modernConfig.source.designSystem
      ? modernConfig.source.designSystem
      : {};
const tailwindcss =
    modernConfig && modernConfig.tools && modernConfig.tools.tailwindcss
      ? modernConfig.tools.tailwindcss
      : {};

module.exports = {
    theme,
    ...tailwindcss,
};
`;
const TWIN_MACRO_NAME = "twin.macro";
const checkTwinMacroExist = async (appDirectory) => {
  const packageJson = await fs.readJSON(path.join(appDirectory, "package.json"), {
    throws: false
  }) || {};
  return Boolean(typeof packageJson.dependencies === "object" && packageJson.dependencies[TWIN_MACRO_NAME] || typeof packageJson.devDependencies === "object" && packageJson.devDependencies[TWIN_MACRO_NAME]);
};
const getTwinMacroMajorVersion = (appDirectory) => {
  try {
    const pkgJsonPath = require.resolve(`${TWIN_MACRO_NAME}/package.json`, {
      paths: [
        appDirectory
      ]
    });
    const { version } = require(pkgJsonPath);
    return Number(version.split(".")[0]);
  } catch (err) {
    return null;
  }
};
const getRandomTwConfigFileName = (internalDirectory) => {
  return slash(path.join(internalDirectory, `tailwind.config.${Date.now()}.${nanoid()}.js`));
};
export {
  checkTwinMacroExist,
  getRandomTwConfigFileName,
  getTwinMacroMajorVersion,
  template
};
