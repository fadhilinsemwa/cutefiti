import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import path from "path";
import { fs, CONFIG_CACHE_DIR, globby, slash } from "@modern-js/utils";
import { getTailwindConfig, loadConfigFile } from "./config";
import { designTokenPlugin } from "./design-token/cli";
import { checkTwinMacroExist, getRandomTwConfigFileName, getTwinMacroMajorVersion, template } from "./macro";
import { getTailwindPath, getTailwindVersion } from "./utils";
var tailwindcssPlugin = function() {
  var pluginName = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    pluginName: "@modern-js/plugin-tailwindcss"
  }).pluginName;
  return {
    name: "@modern-js/plugin-tailwindcss",
    // support designSystem.supportStyledComponents
    usePlugins: [
      designTokenPlugin({
        pluginName
      })
    ],
    setup: function() {
      var _ref = _async_to_generator(function(api) {
        var _api_useAppContext, appDirectory, internalDirectory, internalTwConfigPath, haveTwinMacro, tailwindPath, tailwindVersion, userTailwindConfig;
        return _ts_generator(this, function(_state) {
          switch (_state.label) {
            case 0:
              _api_useAppContext = api.useAppContext(), appDirectory = _api_useAppContext.appDirectory, internalDirectory = _api_useAppContext.internalDirectory;
              internalTwConfigPath = "";
              return [
                4,
                checkTwinMacroExist(appDirectory)
              ];
            case 1:
              haveTwinMacro = _state.sent();
              tailwindPath = getTailwindPath(appDirectory);
              tailwindVersion = getTailwindVersion(appDirectory);
              return [
                4,
                loadConfigFile(appDirectory)
              ];
            case 2:
              userTailwindConfig = _state.sent();
              return [
                2,
                {
                  prepare: function prepare() {
                    if (haveTwinMacro) {
                      var twinMajorVersion = getTwinMacroMajorVersion(appDirectory);
                      var useConfigPath = twinMajorVersion && twinMajorVersion < 3;
                      if (useConfigPath) {
                        internalTwConfigPath = getRandomTwConfigFileName(internalDirectory);
                        var globPattern = slash(path.join(appDirectory, CONFIG_CACHE_DIR, "*.cjs"));
                        var files = globby.sync(globPattern, {
                          absolute: true
                        });
                        if (files.length > 0) {
                          fs.writeFileSync(internalTwConfigPath, template(files[files.length - 1]), "utf-8");
                        }
                      }
                    }
                  },
                  config: function config() {
                    var tailwindConfig;
                    var initTailwindConfig = function() {
                      if (!tailwindConfig) {
                        var _modernConfig_tools, _modernConfig_source;
                        var modernConfig = api.useResolvedConfigContext();
                        tailwindConfig = getTailwindConfig({
                          appDirectory,
                          tailwindVersion,
                          userConfig: userTailwindConfig,
                          extraConfig: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_tools = modernConfig.tools) === null || _modernConfig_tools === void 0 ? void 0 : _modernConfig_tools.tailwindcss,
                          designSystem: modernConfig === null || modernConfig === void 0 ? void 0 : (_modernConfig_source = modernConfig.source) === null || _modernConfig_source === void 0 ? void 0 : _modernConfig_source.designSystem
                        });
                      }
                    };
                    return {
                      tools: {
                        // TODO: Add interface about postcss config
                        // TODO: In module project, also is called, but should not be called.
                        postcss: function(config2) {
                          initTailwindConfig();
                          var tailwindPlugin = require(tailwindPath)(tailwindConfig);
                          if (Array.isArray(config2.postcssOptions.plugins)) {
                            config2.postcssOptions.plugins.push(tailwindPlugin);
                          } else {
                            config2.postcssOptions.plugins = [
                              tailwindPlugin
                            ];
                          }
                        },
                        babel: haveTwinMacro ? function(_, param) {
                          var addPlugins = param.addPlugins;
                          var supportCssInJsLibrary = "styled-components";
                          initTailwindConfig();
                          addPlugins([
                            [
                              require.resolve("babel-plugin-macros"),
                              {
                                twin: {
                                  preset: supportCssInJsLibrary,
                                  config: internalTwConfigPath || tailwindConfig
                                }
                              }
                            ]
                          ]);
                        } : void 0
                      }
                    };
                  },
                  beforeBuildTask: function beforeBuildTask(config) {
                    var modernConfig = api.useResolvedConfigContext();
                    var tailwindConfig = getTailwindConfig({
                      appDirectory,
                      tailwindVersion,
                      userConfig: userTailwindConfig,
                      extraConfig: config.style.tailwindcss,
                      designSystem: modernConfig.designSystem
                    });
                    var tailwindPlugin = require(tailwindPath)(tailwindConfig);
                    if (Array.isArray(config.style.postcss.plugins)) {
                      config.style.postcss.plugins.push(tailwindPlugin);
                    } else {
                      config.style.postcss.plugins = [
                        tailwindPlugin
                      ];
                    }
                    config.transformCache = false;
                    return config;
                  }
                }
              ];
          }
        });
      });
      return function(api) {
        return _ref.apply(this, arguments);
      };
    }()
  };
};
var cli_default = tailwindcssPlugin;
export {
  cli_default as default,
  tailwindcssPlugin
};
