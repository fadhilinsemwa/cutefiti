import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import path from "path";
import { bundleRequire } from "@modern-js/node-bundle-require";
import { fs, applyOptionsChain, findExists } from "@modern-js/utils";
import { cloneDeep } from "@modern-js/utils/lodash";
function getDefaultContent(appDirectory) {
  var defaultContent = [
    "./src/**/*.{js,jsx,ts,tsx}"
  ];
  if (fs.existsSync(path.join(appDirectory, "storybook"))) {
    defaultContent.push("./storybook/**/*");
  }
  if (fs.existsSync(path.join(appDirectory, "config/html"))) {
    defaultContent.push("./config/html/**/*.{html,ejs,hbs}");
  }
  return defaultContent;
}
var getPureDesignSystemConfig = function(config) {
  var pureConfig = cloneDeep(config);
  delete pureConfig.supportStyledComponents;
  return pureConfig;
};
var getV2PurgeConfig = function(content) {
  return {
    enabled: process.env.NODE_ENV === "production",
    layers: [
      "utilities"
    ],
    content
  };
};
function loadConfigFile(appDirectory) {
  return _loadConfigFile.apply(this, arguments);
}
function _loadConfigFile() {
  _loadConfigFile = _async_to_generator(function(appDirectory) {
    var extensions, configs, configFile, mod;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          extensions = [
            "ts",
            "js",
            "cjs",
            "mjs"
          ];
          configs = extensions.map(function(ext) {
            return path.resolve(appDirectory, "tailwind.config.".concat(ext));
          });
          configFile = findExists(configs);
          if (!configFile)
            return [
              3,
              2
            ];
          return [
            4,
            bundleRequire(configFile)
          ];
        case 1:
          mod = _state.sent();
          return [
            2,
            mod.default || mod
          ];
        case 2:
          return [
            2,
            {}
          ];
      }
    });
  });
  return _loadConfigFile.apply(this, arguments);
}
var getTailwindConfig = function(param) {
  var tailwindVersion = param.tailwindVersion, appDirectory = param.appDirectory, userConfig = param.userConfig, extraConfig = param.extraConfig, designSystem = param.designSystem;
  var content = getDefaultContent(appDirectory);
  var tailwindConfig = tailwindVersion === "3" ? {
    content
  } : {
    purge: getV2PurgeConfig(content)
  };
  Object.assign(tailwindConfig, userConfig);
  tailwindConfig = extraConfig ? applyOptionsChain(tailwindConfig, extraConfig) : tailwindConfig;
  var designSystemConfig = getPureDesignSystemConfig(designSystem !== null && designSystem !== void 0 ? designSystem : {});
  if (designSystemConfig && Object.keys(designSystemConfig).length > 0) {
    tailwindConfig.theme = designSystemConfig;
  }
  return tailwindConfig;
};
export {
  getTailwindConfig,
  loadConfigFile
};
