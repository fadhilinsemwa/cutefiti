import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _type_of } from "@swc/helpers/_/_type_of";
import { createRuntimeExportsUtils, lazyImport } from "@modern-js/utils";
var designTokenPlugin = function() {
  var pluginName = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    pluginName: "@modern-js/plugin-tailwindcss"
  }).pluginName;
  return {
    name: "@modern-js/plugin-design-token",
    setup: function setup(api) {
      var resolveConfig = lazyImport("tailwindcss/resolveConfig", require);
      var PLUGIN_IDENTIFIER = "designToken";
      var getDesignTokens = function(designSystem) {
        var tailwindcssConfig = {};
        tailwindcssConfig.theme = designSystem ? _object_spread({}, designSystem) : {};
        if (!designSystem) {
          tailwindcssConfig.presets = [];
        }
        if (designSystem) {
          delete tailwindcssConfig.theme.supportStyledComponents;
        }
        return resolveConfig(tailwindcssConfig).theme || {};
      };
      return {
        _internalRuntimePlugins: function _internalRuntimePlugins(param) {
          var entrypoint = param.entrypoint, plugins = param.plugins;
          var _userConfig_source;
          var userConfig = api.useResolvedConfigContext();
          var _userConfig_source_designSystem;
          var designSystem = (_userConfig_source_designSystem = (_userConfig_source = userConfig.source) === null || _userConfig_source === void 0 ? void 0 : _userConfig_source.designSystem) !== null && _userConfig_source_designSystem !== void 0 ? _userConfig_source_designSystem : {};
          var useSCThemeProvider = true;
          if (designSystem) {
            useSCThemeProvider = (designSystem === null || designSystem === void 0 ? void 0 : designSystem.supportStyledComponents) || false;
          }
          if ((typeof designSystem === "undefined" ? "undefined" : _type_of(designSystem)) === "object" && designSystem.supportStyledComponents) {
            var designTokens = getDesignTokens(userConfig.source.designSystem);
            plugins.push({
              name: PLUGIN_IDENTIFIER,
              path: "".concat(pluginName, "/runtime-design-token"),
              config: {
                token: designTokens,
                useStyledComponentsThemeProvider: Boolean(useSCThemeProvider),
                useDesignTokenContext: false
              }
            });
          }
          return {
            entrypoint,
            plugins
          };
        },
        addRuntimeExports: function addRuntimeExports() {
          var appContext = api.useAppContext();
          var pluginsExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, "plugins");
          pluginsExportsUtils.addExport("export { default as designToken } from '".concat(pluginName, "/runtime-design-token'"));
        }
      };
    }
  };
};
export {
  designTokenPlugin
};
