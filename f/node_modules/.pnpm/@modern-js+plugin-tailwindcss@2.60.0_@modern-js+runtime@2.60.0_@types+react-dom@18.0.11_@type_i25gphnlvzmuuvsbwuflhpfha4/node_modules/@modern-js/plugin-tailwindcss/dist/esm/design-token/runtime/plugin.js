import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { jsx as _jsx } from "react/jsx-runtime";
import { merge } from "@modern-js/runtime-utils/merge";
import React, { useContext } from "react";
var DesignTokenContext = /* @__PURE__ */ React.createContext({});
var useDesignTokens = function() {
  return useContext(DesignTokenContext);
};
var designTokenPlugin = function() {
  var userConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    name: "@modern-js/plugin-design-token",
    setup: function(api) {
      return {
        wrapRoot: function wrapRoot(App) {
          var pluginConfig = api.useRuntimeConfigContext();
          var options = merge(pluginConfig.designToken || {}, userConfig).options;
          var DesignTokenAppWrapper = function(props) {
            var _options_token = options.token, token = _options_token === void 0 ? {} : _options_token, _options_useStyledComponentsThemeProvider = options.useStyledComponentsThemeProvider, useStyledComponentsThemeProvider = _options_useStyledComponentsThemeProvider === void 0 ? false : _options_useStyledComponentsThemeProvider, _options_useDesignTokenContext = options.useDesignTokenContext, useDesignTokenContext = _options_useDesignTokenContext === void 0 ? false : _options_useDesignTokenContext;
            if (useStyledComponentsThemeProvider && useDesignTokenContext) {
              var ThemeProvider = require("@modern-js/runtime/styled").ThemeProvider;
              return /* @__PURE__ */ _jsx(ThemeProvider, {
                theme: token,
                children: /* @__PURE__ */ _jsx(DesignTokenContext.Provider, {
                  value: token,
                  children: /* @__PURE__ */ _jsx(App, _object_spread({}, props))
                })
              });
            } else if (useStyledComponentsThemeProvider) {
              var ThemeProvider1 = require("@modern-js/runtime/styled").ThemeProvider;
              return /* @__PURE__ */ _jsx(ThemeProvider1, {
                theme: token,
                children: /* @__PURE__ */ _jsx(App, _object_spread({}, props))
              });
            } else if (useDesignTokenContext) {
              return /* @__PURE__ */ _jsx(DesignTokenContext.Provider, {
                value: token,
                children: /* @__PURE__ */ _jsx(App, _object_spread({}, props))
              });
            } else {
              return /* @__PURE__ */ _jsx(App, _object_spread({}, props));
            }
          };
          return DesignTokenAppWrapper;
        }
      };
    }
  };
};
var plugin_default = designTokenPlugin;
export {
  DesignTokenContext,
  plugin_default as default,
  designTokenPlugin,
  useDesignTokens
};
