import { _ as _async_to_generator } from "@swc/helpers/_/_async_to_generator";
import { _ as _type_of } from "@swc/helpers/_/_type_of";
import { _ as _ts_generator } from "@swc/helpers/_/_ts_generator";
import path from "path";
import { fs, nanoid, slash } from "@modern-js/utils";
var template = function(configPath) {
  return "\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nconst modernConfig = _interopRequireDefault(require('".concat(configPath, "')).default;\n\nconst theme =\n    modernConfig && modernConfig.source && modernConfig.source.designSystem\n      ? modernConfig.source.designSystem\n      : {};\nconst tailwindcss =\n    modernConfig && modernConfig.tools && modernConfig.tools.tailwindcss\n      ? modernConfig.tools.tailwindcss\n      : {};\n\nmodule.exports = {\n    theme,\n    ...tailwindcss,\n};\n");
};
var TWIN_MACRO_NAME = "twin.macro";
var checkTwinMacroExist = function() {
  var _ref = _async_to_generator(function(appDirectory) {
    var packageJson;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return [
            4,
            fs.readJSON(path.join(appDirectory, "package.json"), {
              throws: false
            })
          ];
        case 1:
          packageJson = _state.sent() || {};
          return [
            2,
            Boolean(_type_of(packageJson.dependencies) === "object" && packageJson.dependencies[TWIN_MACRO_NAME] || _type_of(packageJson.devDependencies) === "object" && packageJson.devDependencies[TWIN_MACRO_NAME])
          ];
      }
    });
  });
  return function checkTwinMacroExist2(appDirectory) {
    return _ref.apply(this, arguments);
  };
}();
var getTwinMacroMajorVersion = function(appDirectory) {
  try {
    var pkgJsonPath = require.resolve("".concat(TWIN_MACRO_NAME, "/package.json"), {
      paths: [
        appDirectory
      ]
    });
    var version = require(pkgJsonPath).version;
    return Number(version.split(".")[0]);
  } catch (err) {
    return null;
  }
};
var getRandomTwConfigFileName = function(internalDirectory) {
  return slash(path.join(internalDirectory, "tailwind.config.".concat(Date.now(), ".").concat(nanoid(), ".js")));
};
export {
  checkTwinMacroExist,
  getRandomTwConfigFileName,
  getTwinMacroMajorVersion,
  template
};
