"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var browser_exports = {};
__export(browser_exports, {
  render: () => render
});
module.exports = __toCommonJS(browser_exports);
var import_cookie = __toESM(require("cookie"));
var import_context = require("../context");
var import_runtime = require("../context/runtime");
var import_loaderManager = require("../loader/loaderManager");
var import_runner = require("../plugin/runner");
var import_wrapper = require("../react/wrapper");
var import_hydrate = require("./hydrate");
const IS_REACT18 = process.env.IS_REACT18 === "true";
const getQuery = () => window.location.search.substring(1).split("&").reduce((res, item) => {
  const [key, value] = item.split("=");
  if (key) {
    res[key] = value;
  }
  return res;
}, {});
function getSSRData() {
  var _ssrData_context, _ssrData_context1, _ssrRequest_headers;
  const ssrData = window._SSR_DATA;
  const ssrRequest = ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_context = ssrData.context) === null || _ssrData_context === void 0 ? void 0 : _ssrData_context.request;
  const finalSSRData = {
    ...ssrData || {
      renderLevel: 0,
      mode: "string"
    },
    context: {
      ...(ssrData === null || ssrData === void 0 ? void 0 : ssrData.context) || {},
      request: {
        ...(ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_context1 = ssrData.context) === null || _ssrData_context1 === void 0 ? void 0 : _ssrData_context1.request) || {},
        params: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.params) || {},
        host: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.host) || location.host,
        pathname: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.pathname) || location.pathname,
        headers: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.headers) || {},
        cookieMap: import_cookie.default.parse(document.cookie || "") || {},
        cookie: document.cookie || "",
        userAgent: (ssrRequest === null || ssrRequest === void 0 ? void 0 : (_ssrRequest_headers = ssrRequest.headers) === null || _ssrRequest_headers === void 0 ? void 0 : _ssrRequest_headers["user-agent"]) || navigator.userAgent,
        referer: document.referrer,
        query: {
          ...getQuery(),
          ...(ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.query) || {}
        },
        url: location.href
      }
    }
  };
  return finalSSRData;
}
function isClientArgs(id) {
  return typeof id === "undefined" || typeof id === "string" || typeof HTMLElement !== "undefined" && id instanceof HTMLElement;
}
async function render(App, id) {
  const runner = (0, import_runner.getGlobalRunner)();
  const context = (0, import_runtime.getInitialContext)(runner);
  const runBeforeRender = async (context2) => {
    await runner.beforeRender(context2);
    const init = (0, import_context.getGlobalAppInit)();
    return init === null || init === void 0 ? void 0 : init(context2);
  };
  if (isClientArgs(id)) {
    var _ssrData_data, _ssrData_data1;
    const ssrData = getSSRData();
    const loadersData = (ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_data = ssrData.data) === null || _ssrData_data === void 0 ? void 0 : _ssrData_data.loadersData) || {};
    const initialLoadersState = Object.keys(loadersData).reduce((res, key) => {
      const loaderData = loadersData[key];
      if ((loaderData === null || loaderData === void 0 ? void 0 : loaderData.loading) !== false) {
        return res;
      }
      res[key] = loaderData;
      return res;
    }, {});
    Object.assign(context, {
      loaderManager: (0, import_loaderManager.createLoaderManager)(initialLoadersState, {
        skipStatic: true
      }),
      // garfish plugin params
      _internalRouterBaseName: App.props.basename,
      ...ssrData ? {
        ssrContext: ssrData === null || ssrData === void 0 ? void 0 : ssrData.context
      } : {}
    });
    context.initialData = ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_data1 = ssrData.data) === null || _ssrData_data1 === void 0 ? void 0 : _ssrData_data1.initialData;
    const initialData = await runBeforeRender(context);
    if (initialData) {
      context.initialData = initialData;
    }
    const rootElement = id && typeof id !== "string" ? id : document.getElementById(id || "root");
    async function ModernRender(App2) {
      const renderFunc = IS_REACT18 ? renderWithReact18 : renderWithReact17;
      return renderFunc(App2, rootElement);
    }
    async function ModernHydrate(App2, callback) {
      const hydrateFunc = IS_REACT18 ? hydrateWithReact18 : hydrateWithReact17;
      return hydrateFunc(App2, rootElement, callback);
    }
    if (ssrData) {
      return (0, import_hydrate.hydrateRoot)(App, context, ModernRender, ModernHydrate);
    }
    return ModernRender((0, import_wrapper.wrapRuntimeContextProvider)(App, context));
  }
  throw Error("`render` function needs id in browser environment, it needs to be string or element");
}
async function renderWithReact18(App, rootElement) {
  const ReactDOM = await Promise.resolve().then(() => __toESM(require("react-dom/client")));
  const root = ReactDOM.createRoot(rootElement);
  root.render(App);
  return root;
}
async function renderWithReact17(App, rootElement) {
  const ReactDOM = await Promise.resolve().then(() => __toESM(require("react-dom")));
  ReactDOM.render(App, rootElement);
  return rootElement;
}
async function hydrateWithReact18(App, rootElement) {
  const ReactDOM = await Promise.resolve().then(() => __toESM(require("react-dom/client")));
  const root = ReactDOM.hydrateRoot(rootElement, App);
  return root;
}
async function hydrateWithReact17(App, rootElement, callback) {
  const ReactDOM = await Promise.resolve().then(() => __toESM(require("react-dom")));
  const root = ReactDOM.hydrate(App, rootElement, callback);
  return root;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  render
});
