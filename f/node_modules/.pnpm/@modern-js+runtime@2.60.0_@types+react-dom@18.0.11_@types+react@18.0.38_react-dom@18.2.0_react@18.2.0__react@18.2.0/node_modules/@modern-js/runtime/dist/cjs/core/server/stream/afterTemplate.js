"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var afterTemplate_exports = {};
__export(afterTemplate_exports, {
  buildShellAfterTemplate: () => buildShellAfterTemplate
});
module.exports = __toCommonJS(afterTemplate_exports);
var import_node = require("@modern-js/runtime-utils/node");
var import_constants = require("../constants");
var import_shared = require("../shared");
var import_utils = require("../utils");
function buildShellAfterTemplate(afterAppTemplate, options) {
  const { request, config, ssrConfig, runtimeContext, renderLevel, entryName } = options;
  const callbacks = [
    createReplaceSSRData({
      request,
      ssrConfig,
      nonce: config.nonce,
      runtimeContext,
      renderLevel
    }),
    (template) => injectJs(template, entryName, config.nonce)
  ];
  async function injectJs(template, entryName2, nonce) {
    const { routeManifest } = runtimeContext;
    const { routeAssets } = routeManifest;
    const asyncEntry = routeAssets[`async-${entryName2}`];
    if (asyncEntry) {
      var _assets_filter;
      const { assets } = asyncEntry;
      const jsChunkStr = assets === null || assets === void 0 ? void 0 : (_assets_filter = assets.filter((asset) => asset.endsWith(".js"))) === null || _assets_filter === void 0 ? void 0 : _assets_filter.map((asset) => {
        return `<script src=${asset} nonce="${nonce}"></script>`;
      }).join(" ");
      if (jsChunkStr) {
        return (0, import_utils.safeReplace)(template, "<!--<?- chunksMap.js ?>-->", jsChunkStr);
      }
    }
    return template;
  }
  return (0, import_shared.buildHtml)(afterAppTemplate, callbacks);
}
function createReplaceSSRData(options) {
  const { runtimeContext, nonce, renderLevel, ssrConfig } = options;
  const { request, reporter } = runtimeContext.ssrContext;
  const headers = typeof ssrConfig === "object" && ssrConfig.unsafeHeaders ? Object.fromEntries(Object.entries(request.headers).filter(([key, _]) => {
    var _ssrConfig_unsafeHeaders_map, _ssrConfig_unsafeHeaders;
    return (_ssrConfig_unsafeHeaders = ssrConfig.unsafeHeaders) === null || _ssrConfig_unsafeHeaders === void 0 ? void 0 : (_ssrConfig_unsafeHeaders_map = _ssrConfig_unsafeHeaders.map((header) => header.toLowerCase())) === null || _ssrConfig_unsafeHeaders_map === void 0 ? void 0 : _ssrConfig_unsafeHeaders_map.includes(key.toLowerCase());
  })) : void 0;
  const ssrData = {
    data: {
      initialData: runtimeContext.initialData,
      i18nData: runtimeContext.__i18nData__
    },
    context: {
      reporter: {
        sessionId: reporter === null || reporter === void 0 ? void 0 : reporter.sessionId
      },
      request: {
        query: request.query,
        params: request.params,
        pathname: request.pathname,
        host: request.host,
        url: request.url,
        headers
      }
    },
    mode: "stream",
    renderLevel
  };
  const attrsStr = (0, import_utils.attributesToString)({
    nonce
  });
  const ssrDataScript = `
    <script${attrsStr}>window._SSR_DATA = ${(0, import_node.serializeJson)(ssrData)}</script>
    `;
  return (template) => (0, import_utils.safeReplace)(template, import_constants.SSR_DATA_PLACEHOLDER, ssrDataScript);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildShellAfterTemplate
});
