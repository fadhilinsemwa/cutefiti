"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cli_exports = {};
__export(cli_exports, {
  default: () => cli_default,
  handleFileChange: () => import_handler2.handleFileChange,
  handleModifyEntrypoints: () => import_handler2.handleModifyEntrypoints,
  isRouteEntry: () => import_entry2.isRouteEntry,
  routerPlugin: () => routerPlugin
});
module.exports = __toCommonJS(cli_exports);
var import_node_path = __toESM(require("node:path"));
var import_utils = require("@modern-js/utils");
var import_entry = require("./entry");
var import_handler = require("./handler");
var import_entry2 = require("./entry");
var import_handler2 = require("./handler");
const routerPlugin = () => ({
  name: "@modern-js/plugin-router",
  required: [
    "@modern-js/runtime"
  ],
  setup: (api) => {
    const nestedRoutes = {};
    const nestedRoutesForServer = {};
    return {
      _internalRuntimePlugins({ entrypoint, plugins }) {
        var _getEntryOptions;
        const { packageName, serverRoutes, metaName } = api.useAppContext();
        const serverBase = serverRoutes.filter((route) => route.entryName === entrypoint.entryName).map((route) => route.urlPath).sort((a, b) => a.length - b.length > 0 ? -1 : 1);
        const userConfig = api.useResolvedConfigContext();
        const routerConfig = (_getEntryOptions = (0, import_utils.getEntryOptions)(entrypoint.entryName, entrypoint.isMainEntry, userConfig.runtime, userConfig.runtimeByEntries, packageName)) === null || _getEntryOptions === void 0 ? void 0 : _getEntryOptions.router;
        if (routerConfig && !(0, import_utils.isRouterV5)(userConfig)) {
          plugins.push({
            name: "router",
            path: `@${metaName}/runtime/router`,
            config: typeof routerConfig === "boolean" ? {
              serverBase
            } : {
              ...routerConfig,
              serverBase
            }
          });
        }
        return {
          entrypoint,
          plugins
        };
      },
      checkEntryPoint({ path: path2, entry }) {
        return {
          path: path2,
          entry: entry || (0, import_entry.isRouteEntry)(path2)
        };
      },
      config() {
        return {
          source: {
            include: [
              // react-router v6 is no longer support ie 11
              // so we need to compile these packages to ensure the compatibility
              // https://github.com/remix-run/react-router/commit/f6df0697e1b2064a2b3a12e8b39577326fdd945b
              /node_modules\/react-router/,
              /node_modules\/react-router-dom/,
              /node_modules\/@remix-run\/router/
            ]
          }
        };
      },
      async modifyEntrypoints({ entrypoints }) {
        const newEntryPoints = await (0, import_handler.handleModifyEntrypoints)(api, entrypoints);
        return {
          entrypoints: newEntryPoints
        };
      },
      async generateEntryCode({ entrypoints }) {
        await (0, import_handler.handleGeneratorEntryCode)(api, entrypoints);
      },
      addRuntimeExports() {
        const userConfig = api.useResolvedConfigContext();
        const { internalDirectory, metaName } = api.useAppContext();
        const pluginsExportsUtils = (0, import_utils.createRuntimeExportsUtils)(internalDirectory, "plugins");
        if (!(0, import_utils.isRouterV5)(userConfig)) {
          pluginsExportsUtils.addExport(`export { default as router } from '@${metaName}/runtime/router'`);
        }
      },
      async fileChange(e) {
        await (0, import_handler.handleFileChange)(api, e);
      },
      async modifyFileSystemRoutes({ entrypoint, routes }) {
        nestedRoutes[entrypoint.entryName] = routes;
        nestedRoutesForServer[entrypoint.entryName] = (0, import_utils.filterRoutesForServer)(routes);
        return {
          entrypoint,
          routes
        };
      },
      async beforeGenerateRoutes({ entrypoint, code }) {
        const { distDirectory } = api.useAppContext();
        await import_utils.fs.outputJSON(import_node_path.default.resolve(distDirectory, import_utils.NESTED_ROUTE_SPEC_FILE), nestedRoutesForServer);
        return {
          entrypoint,
          code
        };
      }
    };
  }
});
var cli_default = routerPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handleFileChange,
  handleModifyEntrypoints,
  isRouteEntry,
  routerPlugin
});
