"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DeferredDataScripts_node_exports = {};
__export(DeferredDataScripts_node_exports, {
  default: () => DeferredDataScripts_node_default
});
module.exports = __toCommonJS(DeferredDataScripts_node_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_node = require("@modern-js/runtime-utils/node");
var import_router = require("@modern-js/runtime-utils/router");
var import_react = require("react");
var import_utils = require("./utils");
const setupFnStr = `function s(r,e){_ROUTER_DATA.r=_ROUTER_DATA.r||{},_ROUTER_DATA.r[r]=_ROUTER_DATA.r[r]||{};return new Promise((function(A,R){_ROUTER_DATA.r[r][e]={resolve:A,reject:R}}))};`;
const resolveFnStr = `function r(e,r,o,A){A?_ROUTER_DATA.r[e][r].reject(A):_ROUTER_DATA.r[e][r].resolve(o)};`;
const preResolvedFnStr = `function p(e,r){return void 0!==r?Promise.reject(new Error(r.message)):Promise.resolve(e)};`;
const DeferredDataScripts = (props) => {
  const staticContext = props === null || props === void 0 ? void 0 : props.context;
  const hydratedRef = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    hydratedRef.current = true;
  }, []);
  const deferredScripts = (0, import_react.useMemo)(() => {
    if (!staticContext) {
      return null;
    }
    const activeDeferreds = staticContext.activeDeferreds || [];
    const _ROUTER_DATA = {
      loaderData: staticContext.loaderData,
      errors: (0, import_utils.serializeErrors)(staticContext.errors)
    };
    let initialScripts = [
      `_ROUTER_DATA = ${(0, import_node.serializeJson)(_ROUTER_DATA)};`,
      `_ROUTER_DATA.s = ${setupFnStr}`,
      `_ROUTER_DATA.r = ${resolveFnStr}`,
      `_ROUTER_DATA.p = ${preResolvedFnStr}`
    ].join("\n");
    const deferredDataScripts = [];
    initialScripts += Object.entries(activeDeferreds).map(([routeId, deferredData]) => {
      const pendingKeys = new Set(deferredData.pendingKeys);
      const { deferredKeys } = deferredData;
      const deferredKeyPromiseStr = deferredKeys.map((key) => {
        if (pendingKeys.has(key)) {
          deferredDataScripts.push(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeferredDataScript, {
            nonce: props === null || props === void 0 ? void 0 : props.nonce,
            data: deferredData.data[key],
            dataKey: key,
            routeId
          }, `${routeId} | ${key}`));
          return `${JSON.stringify(key)}: _ROUTER_DATA.s(${JSON.stringify(routeId)},${JSON.stringify(key)}) `;
        } else {
          const trackedPromise = deferredData.data[key];
          if (typeof trackedPromise._error !== "undefined") {
            const error = {
              message: trackedPromise._error.message,
              stack: process.env.NODE_ENV !== "production" ? trackedPromise._error.stack : void 0
            };
            return `${JSON.stringify(key)}: _ROUTER_DATA.p(${void 0}, ${(0, import_node.serializeJson)(error)})`;
          } else {
            if (typeof trackedPromise._data === "undefined") {
              throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise`);
            }
            return `${JSON.stringify(key)}: _ROUTER_DATA.p(${(0, import_node.serializeJson)(trackedPromise._data)})`;
          }
        }
      }).join(",\n");
      return `Object.assign(_ROUTER_DATA.loaderData[${JSON.stringify(routeId)}], {${deferredKeyPromiseStr}});`;
    }).join("\n");
    return [
      initialScripts,
      deferredDataScripts
    ];
  }, []);
  if (!deferredScripts) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      !hydratedRef.current && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("script", {
        async: true,
        nonce: props === null || props === void 0 ? void 0 : props.nonce,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: deferredScripts[0]
        }
      }),
      !hydratedRef.current && deferredScripts[1]
    ]
  });
};
const DeferredDataScript = ({ data, routeId, dataKey, nonce }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.Suspense, {
    children: typeof document === "undefined" && data && dataKey && routeId ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_router.Await, {
      resolve: data,
      errorElement: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ErrorDeferredDataScript, {
        routeId,
        dataKey,
        nonce
      }),
      children: (data2) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("script", {
        async: true,
        nonce,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: `_ROUTER_DATA.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${(0, import_node.serializeJson)(data2)});`
        }
      })
    }) : null
  });
};
const ErrorDeferredDataScript = ({ routeId, dataKey, nonce }) => {
  const error = (0, import_router.useAsyncError)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("script", {
    nonce,
    suppressHydrationWarning: true,
    dangerouslySetInnerHTML: {
      __html: `_ROUTER_DATA.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${void 0}, ${(0, import_node.serializeJson)({
        message: error.message,
        stack: error.stack
      })});`
    }
  });
};
var DeferredDataScripts_node_default = DeferredDataScripts;
