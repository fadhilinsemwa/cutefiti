import cookieTool from "cookie";
import { getGlobalAppInit } from "../context";
import { getInitialContext } from "../context/runtime";
import { createLoaderManager } from "../loader/loaderManager";
import { getGlobalRunner } from "../plugin/runner";
import { wrapRuntimeContextProvider } from "../react/wrapper";
import { hydrateRoot } from "./hydrate";
const IS_REACT18 = process.env.IS_REACT18 === "true";
const getQuery = () => window.location.search.substring(1).split("&").reduce((res, item) => {
  const [key, value] = item.split("=");
  if (key) {
    res[key] = value;
  }
  return res;
}, {});
function getSSRData() {
  var _ssrData_context, _ssrData_context1, _ssrRequest_headers;
  const ssrData = window._SSR_DATA;
  const ssrRequest = ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_context = ssrData.context) === null || _ssrData_context === void 0 ? void 0 : _ssrData_context.request;
  const finalSSRData = {
    ...ssrData || {
      renderLevel: 0,
      mode: "string"
    },
    context: {
      ...(ssrData === null || ssrData === void 0 ? void 0 : ssrData.context) || {},
      request: {
        ...(ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_context1 = ssrData.context) === null || _ssrData_context1 === void 0 ? void 0 : _ssrData_context1.request) || {},
        params: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.params) || {},
        host: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.host) || location.host,
        pathname: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.pathname) || location.pathname,
        headers: (ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.headers) || {},
        cookieMap: cookieTool.parse(document.cookie || "") || {},
        cookie: document.cookie || "",
        userAgent: (ssrRequest === null || ssrRequest === void 0 ? void 0 : (_ssrRequest_headers = ssrRequest.headers) === null || _ssrRequest_headers === void 0 ? void 0 : _ssrRequest_headers["user-agent"]) || navigator.userAgent,
        referer: document.referrer,
        query: {
          ...getQuery(),
          ...(ssrRequest === null || ssrRequest === void 0 ? void 0 : ssrRequest.query) || {}
        },
        url: location.href
      }
    }
  };
  return finalSSRData;
}
function isClientArgs(id) {
  return typeof id === "undefined" || typeof id === "string" || typeof HTMLElement !== "undefined" && id instanceof HTMLElement;
}
async function render(App, id) {
  const runner = getGlobalRunner();
  const context = getInitialContext(runner);
  const runBeforeRender = async (context2) => {
    await runner.beforeRender(context2);
    const init = getGlobalAppInit();
    return init === null || init === void 0 ? void 0 : init(context2);
  };
  if (isClientArgs(id)) {
    var _ssrData_data, _ssrData_data1;
    const ssrData = getSSRData();
    const loadersData = (ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_data = ssrData.data) === null || _ssrData_data === void 0 ? void 0 : _ssrData_data.loadersData) || {};
    const initialLoadersState = Object.keys(loadersData).reduce((res, key) => {
      const loaderData = loadersData[key];
      if ((loaderData === null || loaderData === void 0 ? void 0 : loaderData.loading) !== false) {
        return res;
      }
      res[key] = loaderData;
      return res;
    }, {});
    Object.assign(context, {
      loaderManager: createLoaderManager(initialLoadersState, {
        skipStatic: true
      }),
      // garfish plugin params
      _internalRouterBaseName: App.props.basename,
      ...ssrData ? {
        ssrContext: ssrData === null || ssrData === void 0 ? void 0 : ssrData.context
      } : {}
    });
    context.initialData = ssrData === null || ssrData === void 0 ? void 0 : (_ssrData_data1 = ssrData.data) === null || _ssrData_data1 === void 0 ? void 0 : _ssrData_data1.initialData;
    const initialData = await runBeforeRender(context);
    if (initialData) {
      context.initialData = initialData;
    }
    const rootElement = id && typeof id !== "string" ? id : document.getElementById(id || "root");
    async function ModernRender(App2) {
      const renderFunc = IS_REACT18 ? renderWithReact18 : renderWithReact17;
      return renderFunc(App2, rootElement);
    }
    async function ModernHydrate(App2, callback) {
      const hydrateFunc = IS_REACT18 ? hydrateWithReact18 : hydrateWithReact17;
      return hydrateFunc(App2, rootElement, callback);
    }
    if (ssrData) {
      return hydrateRoot(App, context, ModernRender, ModernHydrate);
    }
    return ModernRender(wrapRuntimeContextProvider(App, context));
  }
  throw Error("`render` function needs id in browser environment, it needs to be string or element");
}
async function renderWithReact18(App, rootElement) {
  const ReactDOM = await import("react-dom/client");
  const root = ReactDOM.createRoot(rootElement);
  root.render(App);
  return root;
}
async function renderWithReact17(App, rootElement) {
  const ReactDOM = await import("react-dom");
  ReactDOM.render(App, rootElement);
  return rootElement;
}
async function hydrateWithReact18(App, rootElement) {
  const ReactDOM = await import("react-dom/client");
  const root = ReactDOM.hydrateRoot(rootElement, App);
  return root;
}
async function hydrateWithReact17(App, rootElement, callback) {
  const ReactDOM = await import("react-dom");
  const root = ReactDOM.hydrate(App, rootElement, callback);
  return root;
}
export {
  render
};
