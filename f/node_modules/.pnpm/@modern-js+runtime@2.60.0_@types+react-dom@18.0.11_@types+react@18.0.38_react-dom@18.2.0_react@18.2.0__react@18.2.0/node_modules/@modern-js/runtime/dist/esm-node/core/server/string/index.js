import { run } from "@modern-js/runtime-utils/node";
import { time } from "@modern-js/runtime-utils/time";
import { parseHeaders } from "@modern-js/runtime-utils/universal/request";
import ReactDomServer from "react-dom/server";
import ReactHelmet from "react-helmet";
import { RenderLevel } from "../../constants";
import { wrapRuntimeContextProvider } from "../../react/wrapper";
import { CHUNK_CSS_PLACEHOLDER, CHUNK_JS_PLACEHOLDER, HTML_PLACEHOLDER, SSR_DATA_PLACEHOLDER } from "../constants";
import { createReplaceHelemt } from "../helmet";
import { buildHtml } from "../shared";
import { SSRErrors, SSRTimings, createOnError, createOnTiming } from "../tracer";
import { getSSRConfigByEntry, safeReplace } from "../utils";
import { LoadableCollector } from "./loadable";
import { prefetch } from "./prefetch";
import { SSRDataCollector } from "./ssrData";
import { StyledCollector } from "./styledComponent";
const renderString = async (request, serverRoot, options) => {
  const headersData = parseHeaders(request);
  return run(headersData, async () => {
    var _runtimeContext_ssrContext;
    const { resource, runtimeContext, config, onError, onTiming } = options;
    const tracer = {
      onError: createOnError(onError),
      onTiming: createOnTiming(onTiming)
    };
    const routerContext = runtimeContext.routerContext;
    const { htmlTemplate, entryName, loadableStats, routeManifest } = resource;
    const ssrConfig = getSSRConfigByEntry(entryName, config.ssr, config.ssrByEntries);
    const chunkSet = {
      renderLevel: RenderLevel.CLIENT_RENDER,
      ssrScripts: "",
      jsChunk: "",
      cssChunk: ""
    };
    let prefetchData = {};
    try {
      prefetchData = await prefetch(serverRoot, request, options, ssrConfig, tracer);
      chunkSet.renderLevel = RenderLevel.SERVER_PREFETCH;
    } catch (e) {
      chunkSet.renderLevel = RenderLevel.CLIENT_RENDER;
      tracer.onError(SSRErrors.PRERENDER, e);
    }
    const collectors = [
      new StyledCollector(chunkSet),
      new LoadableCollector({
        stats: loadableStats,
        nonce: config.nonce,
        routeManifest,
        template: htmlTemplate,
        entryName,
        chunkSet,
        config
      }),
      new SSRDataCollector({
        request,
        prefetchData,
        ssrConfig,
        ssrContext: runtimeContext.ssrContext,
        chunkSet,
        routerContext,
        nonce: config.nonce
      })
    ];
    const rootElement = wrapRuntimeContextProvider(serverRoot, Object.assign(runtimeContext, {
      ssr: true
    }));
    const html = await generateHtml(rootElement, htmlTemplate, chunkSet, collectors, ((_runtimeContext_ssrContext = runtimeContext.ssrContext) === null || _runtimeContext_ssrContext === void 0 ? void 0 : _runtimeContext_ssrContext.htmlModifiers) || [], tracer);
    return html;
  });
};
async function generateHtml(App, htmlTemplate, chunkSet, collectors, htmlModifiers, { onError, onTiming }) {
  let html = "";
  let helmetData;
  const finalApp = collectors.reduce((pre, creator) => {
    var _creator_collect;
    return ((_creator_collect = creator.collect) === null || _creator_collect === void 0 ? void 0 : _creator_collect.call(creator, pre)) || pre;
  }, App);
  try {
    const end = time();
    if (chunkSet.renderLevel >= RenderLevel.SERVER_PREFETCH) {
      html = ReactDomServer.renderToString(finalApp);
      chunkSet.renderLevel = RenderLevel.SERVER_RENDER;
    }
    helmetData = ReactHelmet.renderStatic();
    const cost = end();
    onTiming(SSRTimings.RENDER_HTML, cost);
  } catch (e) {
    chunkSet.renderLevel = RenderLevel.CLIENT_RENDER;
    onError(SSRErrors.RENDER_HTML, e);
  }
  await Promise.all(collectors.map((component) => component.effect()));
  const { ssrScripts, cssChunk, jsChunk } = chunkSet;
  const finalHtml = await buildHtml(htmlTemplate, [
    createReplaceHtml(html),
    createReplaceChunkJs(jsChunk),
    createReplaceChunkCss(cssChunk),
    createReplaceSSRDataScript(ssrScripts),
    createReplaceHelemt(helmetData),
    ...htmlModifiers
  ]);
  return finalHtml;
}
function createReplaceHtml(html) {
  return (template) => safeReplace(template, HTML_PLACEHOLDER, html);
}
function createReplaceSSRDataScript(data) {
  return (template) => safeReplace(template, SSR_DATA_PLACEHOLDER, data);
}
function createReplaceChunkJs(js) {
  return (template) => safeReplace(template, CHUNK_JS_PLACEHOLDER, js);
}
function createReplaceChunkCss(css) {
  return (template) => safeReplace(template, CHUNK_CSS_PLACEHOLDER, css);
}
export {
  renderString
};
