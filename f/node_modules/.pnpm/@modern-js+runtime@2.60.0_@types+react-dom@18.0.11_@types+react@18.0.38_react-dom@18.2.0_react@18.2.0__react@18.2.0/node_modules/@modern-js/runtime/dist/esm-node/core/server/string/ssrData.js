import { _ as _class_private_field_get } from "@swc/helpers/_/_class_private_field_get";
import { _ as _class_private_field_init } from "@swc/helpers/_/_class_private_field_init";
import { _ as _class_private_field_set } from "@swc/helpers/_/_class_private_field_set";
import { _ as _class_private_method_get } from "@swc/helpers/_/_class_private_method_get";
import { _ as _class_private_method_init } from "@swc/helpers/_/_class_private_method_init";
import { serializeJson } from "@modern-js/runtime-utils/node";
import { ROUTER_DATA_JSON_ID, SSR_DATA_JSON_ID } from "../../constants";
import { attributesToString, serializeErrors } from "../utils";
var _options = /* @__PURE__ */ new WeakMap(), _getSSRData = /* @__PURE__ */ new WeakSet(), _getSSRDataScripts = /* @__PURE__ */ new WeakSet();
class SSRDataCollector {
  effect() {
    const { routerContext, chunkSet } = _class_private_field_get(this, _options);
    const ssrData = _class_private_method_get(this, _getSSRData, getSSRData).call(this);
    const routerData = routerContext ? {
      loaderData: routerContext.loaderData,
      errors: serializeErrors(routerContext.errors)
    } : void 0;
    const ssrDataScripts = _class_private_method_get(this, _getSSRDataScripts, getSSRDataScripts).call(this, ssrData, routerData);
    chunkSet.ssrScripts = ssrDataScripts;
  }
  constructor(options) {
    _class_private_method_init(this, _getSSRData);
    _class_private_method_init(this, _getSSRDataScripts);
    _class_private_field_init(this, _options, {
      writable: true,
      value: void 0
    });
    _class_private_field_set(this, _options, options);
  }
}
function getSSRData() {
  const { prefetchData, chunkSet, ssrConfig, ssrContext } = _class_private_field_get(this, _options);
  const { reporter, request } = ssrContext;
  const headers = typeof ssrConfig === "object" && ssrConfig.unsafeHeaders ? Object.fromEntries(Object.entries(request.headers).filter(([key, _]) => {
    var _ssrConfig_unsafeHeaders_map, _ssrConfig_unsafeHeaders;
    return (_ssrConfig_unsafeHeaders = ssrConfig.unsafeHeaders) === null || _ssrConfig_unsafeHeaders === void 0 ? void 0 : (_ssrConfig_unsafeHeaders_map = _ssrConfig_unsafeHeaders.map((header) => header.toLowerCase())) === null || _ssrConfig_unsafeHeaders_map === void 0 ? void 0 : _ssrConfig_unsafeHeaders_map.includes(key.toLowerCase());
  })) : void 0;
  return {
    data: prefetchData,
    context: {
      request: {
        params: request.params,
        query: request.query,
        pathname: request.pathname,
        host: request.host,
        url: request.url,
        headers
      },
      reporter: {
        sessionId: reporter === null || reporter === void 0 ? void 0 : reporter.sessionId
      }
    },
    mode: "string",
    renderLevel: chunkSet.renderLevel
  };
}
function getSSRDataScripts(ssrData, routerData) {
  const { nonce, ssrConfig } = _class_private_field_get(this, _options);
  const inlineScript = typeof ssrConfig === "boolean" ? true : (ssrConfig === null || ssrConfig === void 0 ? void 0 : ssrConfig.inlineScript) !== false;
  const useInlineScript = inlineScript !== false;
  const serializeSSRData = serializeJson(ssrData);
  const attrsStr = attributesToString({
    nonce
  });
  let ssrDataScripts = useInlineScript ? `<script${attrsStr}>window._SSR_DATA = ${serializeSSRData}</script>` : `<script type="application/json" id="${SSR_DATA_JSON_ID}">${serializeSSRData}</script>`;
  if (routerData) {
    const serializedRouterData = serializeJson(routerData);
    ssrDataScripts += useInlineScript ? `
<script${attrsStr}>window._ROUTER_DATA = ${serializedRouterData}</script>` : `
<script type="application/json" id="${ROUTER_DATA_JSON_ID}">${serializedRouterData}</script>`;
  }
  return ssrDataScripts;
}
export {
  SSRDataCollector
};
