/// <reference types="react" />
import type { Store } from '@modern-js-reduck/store';
import type { Router, RouterState, StaticHandlerContext } from '@modern-js/runtime-utils/remix-router';
import type { RouteManifest } from '../../router/runtime/types';
import { createLoaderManager } from '../loader/loaderManager';
import type { PluginRunner, runtime } from '../plugin';
import type { SSRServerContext } from '../types';
export interface BaseRuntimeContext {
    initialData?: Record<string, unknown>;
    loaderManager: ReturnType<typeof createLoaderManager>;
    runner: ReturnType<typeof runtime.init>;
    ssrContext?: SSRServerContext;
    store?: Store;
    routeManifest: RouteManifest;
    routerContext?: StaticHandlerContext;
    /**
     * private method
     */
    remixRouter?: Router;
    /**
     * private
     */
    unstable_getBlockNavState?: () => boolean;
}
export interface RuntimeContext extends BaseRuntimeContext {
    [key: string]: any;
}
export declare const RuntimeReactContext: import("react").Context<RuntimeContext>;
export declare const ServerRouterContext: import("react").Context<any>;
export interface BaseTRuntimeContext extends Partial<BaseRuntimeContext> {
    initialData?: Record<string, unknown>;
    request?: SSRServerContext['request'];
    response?: SSRServerContext['response'];
    store?: Store;
    router?: {
        navigate: Router['navigate'];
        location: RouterState['location'];
    };
}
export interface TRuntimeContext extends BaseTRuntimeContext {
    [key: string]: any;
}
export declare const getInitialContext: (runner: PluginRunner, isBrowser?: boolean, routeManifest?: RouteManifest) => RuntimeContext;
