"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ssrRender_exports = {};
__export(ssrRender_exports, {
  ssrRender: () => ssrRender
});
module.exports = __toCommonJS(ssrRender_exports);
var import_constants = require("@modern-js/utils/universal/constants");
var import_constants2 = require("../../constants");
var import_utils = require("../../utils");
var import_ssrCache = require("./ssrCache");
const SERVER_RUNTIME_ENTRY = "requestHandler";
async function ssrRender(request, { routeInfo, html, config: userConfig, staticGenerate, nodeReq, serverManifest, locals, params, loaderContext, reporter, cacheConfig, logger, metrics, onError, onTiming }) {
  var _serverManifest_renderBundles;
  const { entryName } = routeInfo;
  const loadableStats = serverManifest.loadableStats || {};
  const routeManifest = serverManifest.routeManifest || {};
  const headers = (0, import_utils.parseHeaders)(request);
  if (nodeReq) {
    for (const key in nodeReq.headers) {
      if (!headers[key]) {
        headers[key] = nodeReq.headers[key];
      }
    }
  }
  const renderBundle = (_serverManifest_renderBundles = serverManifest.renderBundles) === null || _serverManifest_renderBundles === void 0 ? void 0 : _serverManifest_renderBundles[entryName || import_constants.MAIN_ENTRY_NAME];
  if (!renderBundle) {
    throw new Error(`Can't found renderBundle ${entryName || import_constants.MAIN_ENTRY_NAME}`);
  }
  const requestHandler = await renderBundle[SERVER_RUNTIME_ENTRY];
  const config = createRequestHandlerConfig(userConfig);
  const requestHandlerOptions = {
    resource: {
      route: routeInfo,
      loadableStats,
      routeManifest,
      htmlTemplate: html,
      entryName: entryName || import_constants.MAIN_ENTRY_NAME
    },
    params,
    loaderContext,
    config,
    locals,
    reporter,
    staticGenerate,
    logger,
    metrics,
    onError,
    onTiming
  };
  const cacheControl = await (0, import_ssrCache.matchCacheControl)(cacheConfig === null || cacheConfig === void 0 ? void 0 : cacheConfig.strategy, nodeReq || new IncomingMessgeProxy(request));
  let response;
  if (cacheControl) {
    response = await (0, import_ssrCache.getCacheResult)(request, {
      cacheControl,
      container: cacheConfig === null || cacheConfig === void 0 ? void 0 : cacheConfig.container,
      requestHandler,
      requestHandlerOptions
    });
  } else {
    response = await requestHandler(request, requestHandlerOptions);
  }
  response.headers.set(import_constants2.X_MODERNJS_RENDER, "server");
  response.headers.set("content-type", "text/html; charset=UTF-8");
  return response;
}
class IncomingMessgeProxy {
  constructor(req) {
    this.headers = {};
    req.headers.forEach((value, key) => {
      this.headers[key] = value;
    });
    this.method = req.method;
    this.url = (0, import_utils.getPathname)(req);
  }
}
function createRequestHandlerConfig(userConfig) {
  const { output, server, security, html } = userConfig;
  return {
    ssr: server === null || server === void 0 ? void 0 : server.ssr,
    ssrByEntries: server === null || server === void 0 ? void 0 : server.ssrByEntries,
    nonce: security === null || security === void 0 ? void 0 : security.nonce,
    enableInlineScripts: output === null || output === void 0 ? void 0 : output.enableInlineScripts,
    enableInlineStyles: output === null || output === void 0 ? void 0 : output.enableInlineStyles,
    crossorigin: html === null || html === void 0 ? void 0 : html.crossorigin,
    scriptLoading: html === null || html === void 0 ? void 0 : html.scriptLoading
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ssrRender
});
