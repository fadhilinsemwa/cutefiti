"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var typescript_exports = {};
__export(typescript_exports, {
  compileByTs: () => compileByTs
});
module.exports = __toCommonJS(typescript_exports);
var import_path = __toESM(require("path"));
var import_utils = require("@modern-js/utils");
var import_tsconfigPathsPlugin = require("./tsconfigPathsPlugin");
var import_typescriptLoader = require("./typescriptLoader");
const readTsConfigByFile = (tsConfigFile, tsInstance) => {
  const parsedCmd = tsInstance.getParsedCommandLineOfConfigFile(tsConfigFile, void 0, tsInstance.sys);
  const { options, fileNames, projectReferences } = parsedCmd;
  return {
    options,
    fileNames,
    projectReferences
  };
};
const copyFiles = async (from, to, appDirectory, tsconfigPath) => {
  if (await import_utils.fs.pathExists(from)) {
    const relativePath = import_path.default.relative(appDirectory, from);
    const targetDir = import_path.default.join(to, relativePath);
    await import_utils.fs.copy(from, targetDir, {
      filter: (src) => ![
        ".ts",
        ".js"
      ].includes(import_path.default.extname(src)) && src !== tsconfigPath
    });
  }
};
const compileByTs = async (appDirectory, config, compileOptions) => {
  import_utils.logger.info(`Running ts compile...`);
  const { sourceDirs, distDir, tsconfigPath } = compileOptions;
  if (!tsconfigPath) {
    return;
  }
  const ts = new import_typescriptLoader.TypescriptLoader({
    appDirectory
  }).load();
  const createProgram = ts.createIncrementalProgram || ts.createProgram;
  const formatHost = getFormatHost(ts);
  const { alias } = config;
  const aliasOption = (0, import_utils.getAliasConfig)(alias, {
    appDirectory,
    tsconfigPath
  });
  const { paths = {}, absoluteBaseUrl = "./" } = aliasOption;
  const { options, fileNames, projectReferences } = readTsConfigByFile(tsconfigPath, ts);
  const sourcePosixPaths = sourceDirs.map((sourceDir) => sourceDir.split(import_path.default.sep).join(import_path.default.posix.sep));
  const rootNames = fileNames.filter((fileName) => {
    return fileName.endsWith(".d.ts") || sourcePosixPaths.some((sourceDir) => {
      return fileName.includes(sourceDir);
    });
  });
  const program = createProgram.call(ts, {
    rootNames,
    projectReferences,
    options: {
      rootDir: appDirectory,
      outDir: distDir,
      ...options
    }
  });
  const tsconfigPathsPlugin = (0, import_tsconfigPathsPlugin.tsconfigPathsBeforeHookFactory)(ts, absoluteBaseUrl, paths);
  const emitResult = program.emit(void 0, void 0, void 0, void 0, {
    before: [
      tsconfigPathsPlugin
    ]
  });
  const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
  const { noEmitOnError } = options;
  if (allDiagnostics.length > 0) {
    import_utils.logger.error(ts.formatDiagnosticsWithColorAndContext([
      ...new Set(allDiagnostics)
    ], formatHost));
    if (typeof noEmitOnError === "undefined" || noEmitOnError === true) {
      process.exit(1);
    }
  }
  for (const source of sourceDirs) {
    await copyFiles(source, distDir, appDirectory, tsconfigPath);
  }
  import_utils.logger.info(`Ts compile succeed`);
};
const getFormatHost = (ts) => {
  return {
    getCanonicalFileName: (path2) => path2,
    getCurrentDirectory: ts.sys.getCurrentDirectory,
    getNewLine: () => ts.sys.newLine
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compileByTs
});
