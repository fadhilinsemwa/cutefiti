import path from "path";
import { fs, getAliasConfig, logger } from "@modern-js/utils";
import { tsconfigPathsBeforeHookFactory } from "./tsconfigPathsPlugin";
import { TypescriptLoader } from "./typescriptLoader";
const readTsConfigByFile = (tsConfigFile, tsInstance) => {
  const parsedCmd = tsInstance.getParsedCommandLineOfConfigFile(tsConfigFile, void 0, tsInstance.sys);
  const { options, fileNames, projectReferences } = parsedCmd;
  return {
    options,
    fileNames,
    projectReferences
  };
};
const copyFiles = async (from, to, appDirectory, tsconfigPath) => {
  if (await fs.pathExists(from)) {
    const relativePath = path.relative(appDirectory, from);
    const targetDir = path.join(to, relativePath);
    await fs.copy(from, targetDir, {
      filter: (src) => ![
        ".ts",
        ".js"
      ].includes(path.extname(src)) && src !== tsconfigPath
    });
  }
};
const compileByTs = async (appDirectory, config, compileOptions) => {
  logger.info(`Running ts compile...`);
  const { sourceDirs, distDir, tsconfigPath } = compileOptions;
  if (!tsconfigPath) {
    return;
  }
  const ts = new TypescriptLoader({
    appDirectory
  }).load();
  const createProgram = ts.createIncrementalProgram || ts.createProgram;
  const formatHost = getFormatHost(ts);
  const { alias } = config;
  const aliasOption = getAliasConfig(alias, {
    appDirectory,
    tsconfigPath
  });
  const { paths = {}, absoluteBaseUrl = "./" } = aliasOption;
  const { options, fileNames, projectReferences } = readTsConfigByFile(tsconfigPath, ts);
  const sourcePosixPaths = sourceDirs.map((sourceDir) => sourceDir.split(path.sep).join(path.posix.sep));
  const rootNames = fileNames.filter((fileName) => {
    return fileName.endsWith(".d.ts") || sourcePosixPaths.some((sourceDir) => {
      return fileName.includes(sourceDir);
    });
  });
  const program = createProgram.call(ts, {
    rootNames,
    projectReferences,
    options: {
      rootDir: appDirectory,
      outDir: distDir,
      ...options
    }
  });
  const tsconfigPathsPlugin = tsconfigPathsBeforeHookFactory(ts, absoluteBaseUrl, paths);
  const emitResult = program.emit(void 0, void 0, void 0, void 0, {
    before: [
      tsconfigPathsPlugin
    ]
  });
  const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
  const { noEmitOnError } = options;
  if (allDiagnostics.length > 0) {
    logger.error(ts.formatDiagnosticsWithColorAndContext([
      ...new Set(allDiagnostics)
    ], formatHost));
    if (typeof noEmitOnError === "undefined" || noEmitOnError === true) {
      process.exit(1);
    }
  }
  for (const source of sourceDirs) {
    await copyFiles(source, distDir, appDirectory, tsconfigPath);
  }
  logger.info(`Ts compile succeed`);
};
const getFormatHost = (ts) => {
  return {
    getCanonicalFileName: (path2) => path2,
    getCurrentDirectory: ts.sys.getCurrentDirectory,
    getNewLine: () => ts.sys.newLine
  };
};
export {
  compileByTs
};
