"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var htmlMinify_exports = {};
__export(htmlMinify_exports, {
  pluginHtmlMinifierTerser: () => pluginHtmlMinifierTerser
});
module.exports = __toCommonJS(htmlMinify_exports);
var import_ts_deepmerge = require("ts-deepmerge");
function applyRemoveConsole(options, config) {
  const { removeConsole } = config.performance;
  const compressOptions = typeof options.compress === "boolean" ? {} : options.compress || {};
  if (removeConsole === true) {
    options.compress = {
      ...compressOptions,
      drop_console: true
    };
  } else if (Array.isArray(removeConsole)) {
    const pureFuncs = removeConsole.map((method) => `console.${method}`);
    options.compress = {
      ...compressOptions,
      pure_funcs: pureFuncs
    };
  }
  return options;
}
function getTerserMinifyOptions(config) {
  const options = {
    mangle: {
      safari10: true
    },
    format: {
      ascii_only: config.output.charset === "ascii"
    }
  };
  if (config.output.legalComments === "none") {
    var _options;
    (_options = options).format || (_options.format = {});
    options.format.comments = false;
  }
  const finalOptions = applyRemoveConsole(options, config);
  return finalOptions;
}
function getMinifyOptions(config) {
  const minifyJS = getTerserMinifyOptions(config);
  return {
    removeComments: false,
    useShortDoctype: true,
    keepClosingSlash: true,
    collapseWhitespace: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeEmptyAttributes: true,
    minifyJS,
    minifyCSS: true,
    minifyURLs: true
  };
}
const pluginHtmlMinifierTerser = () => ({
  name: "uni-builder:plugin-html-minifier-terser",
  setup(api) {
    api.modifyBundlerChain(async (chain, { isProd, environment }) => {
      const { output, tools: { htmlPlugin } } = environment.config;
      const disableHtmlMinify = !isProd || output.minify === false || htmlPlugin === false;
      const { minify } = await Promise.resolve().then(() => __toESM(require("html-minifier-terser")));
      const pluginRecord = chain.plugins.entries();
      const minifyOptions = getMinifyOptions(environment.config);
      for (const id of Object.keys(pluginRecord)) {
        if (!id.startsWith("html-")) {
          continue;
        }
        const values = pluginRecord[id].values();
        const isHtmlRspackPlugin = values.some((item) => {
          var _item_constructor;
          const name = (item === null || item === void 0 ? void 0 : item.name) || ((_item_constructor = item.constructor) === null || _item_constructor === void 0 ? void 0 : _item_constructor.name);
          return name === "HtmlRspackPlugin";
        });
        if (isHtmlRspackPlugin && !disableHtmlMinify) {
          chain.plugin(id).tap((options) => {
            if (!options.length) {
              return options;
            }
            const userMinifyOption = options[0].minify;
            const minifyFn = (html) => minify(html, userMinifyOption ? (0, import_ts_deepmerge.merge)(minifyOptions, userMinifyOption) : minifyOptions);
            options[0].minify = minifyFn;
            return options;
          });
          continue;
        }
        const isHtmlWebpackPlugin = values.some((item) => {
          var _item_constructor;
          const name = (item === null || item === void 0 ? void 0 : item.name) || ((_item_constructor = item.constructor) === null || _item_constructor === void 0 ? void 0 : _item_constructor.name);
          return name === "HtmlWebpackPlugin";
        });
        if (isHtmlWebpackPlugin) {
          chain.plugin(id).tap((options) => {
            if (!options.length || options[0].minify) {
              return options;
            }
            if (disableHtmlMinify) {
              options[0].minify = false;
              return options;
            }
            const userMinifyOption = options[0].minify;
            options[0].minify = userMinifyOption ? (0, import_ts_deepmerge.merge)(minifyOptions, userMinifyOption) : minifyOptions;
            return options;
          });
        }
      }
    });
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  pluginHtmlMinifierTerser
});
