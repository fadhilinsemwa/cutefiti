"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
const _tsd = require("tsd");
const _model = require("@modern-js/runtime/model");
const _ = require("..");
const counterManual = (0, _.model)("counter").define({
  state: {
    count: 1
  },
  actions: {
    add(state, n) {
      (0, _tsd.expectType)(state);
      return {
        count: state.count + n,
        name: "a"
      };
    },
    empty(state) {
      (0, _tsd.expectType)(state);
    },
    test: {
      a(s) {
        return s;
      }
    }
  }
});
const counterInfer = (0, _.model)("counter").define({
  state: {
    count: 1,
    name: "a"
  },
  actions: {
    add(state, n) {
      (0, _tsd.expectType)(state);
      return {
        count: state.count + n,
        name: "b"
      };
    },
    empty(state) {
      (0, _tsd.expectType)(state);
    },
    test: {
      a(state) {
        (0, _tsd.expectType)(state);
        return state;
      }
    }
  }
});
describe("action and state manually type", () => {
  (0, _tsd.expectType)(counterManual.name);
  (0, _tsd.expectAssignable)(counterManual._.actions.add);
  (0, _tsd.expectType)(counterManual._.actions.empty);
  const [state, actions] = (0, _model.useModel)(counterManual);
  (0, _tsd.expectType)(state);
  (0, _tsd.expectType)(actions.add);
});
describe("action and state auto infer", () => {
  (0, _tsd.expectType)(counterInfer.name);
  (0, _tsd.expectType)(counterInfer._.actions.add);
  (0, _tsd.expectType)(counterInfer._.actions.empty);
  const [state, actions] = (0, _model.useModel)(counterInfer);
  (0, _tsd.expectType)(state);
  (0, _tsd.expectType)(actions.add);
});
describe("action and state union type", () => {
  const [state] = (0, _model.useModel)(counterManual);
  (0, _tsd.expectType)(state.name);
});
describe("action and state function Initial", () => {
  const counter = (0, _.model)("counter").define(() => ({
    state: {
      c: 1
    },
    actions: {
      add(state2, payload) {
        (0, _tsd.expectType)(state2.c);
        return {
          c: state2.c + payload
        };
      },
      test: {
        a(s) {
          return s;
        },
        b(s, p) {
          return {
            ...s,
            c: s.c + p
          };
        }
      }
    }
  }));
  const [state, actions] = (0, _model.useModel)(counter);
  (0, _tsd.expectType)(counter._.actions.add);
  (0, _tsd.expectType)(state.c);
  (0, _tsd.expectType)(actions.test.a);
  (0, _tsd.expectType)(actions.test.b);
});
