import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { expectType, expectAssignable } from "tsd";
import { useModel } from "@modern-js/runtime/model";
import { model } from "..";
const counterManual = model("counter").define({
  state: {
    count: 1
  },
  actions: {
    add(state, n) {
      expectType(state);
      return {
        count: state.count + n,
        name: "a"
      };
    },
    empty(state) {
      expectType(state);
    },
    test: {
      a(s) {
        return s;
      }
    }
  }
});
const counterInfer = model("counter").define({
  state: {
    count: 1,
    name: "a"
  },
  actions: {
    add(state, n) {
      expectType(state);
      return {
        count: state.count + n,
        name: "b"
      };
    },
    empty(state) {
      expectType(state);
    },
    test: {
      a(state) {
        expectType(state);
        return state;
      }
    }
  }
});
describe("action and state manually type", () => {
  expectType(counterManual.name);
  expectAssignable(counterManual._.actions.add);
  expectType(counterManual._.actions.empty);
  const [state, actions] = useModel(counterManual);
  expectType(state);
  expectType(actions.add);
});
describe("action and state auto infer", () => {
  expectType(counterInfer.name);
  expectType(counterInfer._.actions.add);
  expectType(counterInfer._.actions.empty);
  const [state, actions] = useModel(counterInfer);
  expectType(state);
  expectType(actions.add);
});
describe("action and state union type", () => {
  const [state] = useModel(counterManual);
  expectType(state.name);
});
describe("action and state function Initial", () => {
  const counter = model("counter").define(() => ({
    state: {
      c: 1
    },
    actions: {
      add(state2, payload) {
        expectType(state2.c);
        return {
          c: state2.c + payload
        };
      },
      test: {
        a(s) {
          return s;
        },
        b(s, p) {
          return _object_spread_props(_object_spread({}, s), {
            c: s.c + p
          });
        }
      }
    }
  }));
  const [state, actions] = useModel(counter);
  expectType(counter._.actions.add);
  expectType(state.c);
  expectType(actions.test.a);
  expectType(actions.test.b);
});
