"use strict";

// rsbuild/runtime/initial-chunk-retry

var TAG_TYPE = {
  link: HTMLLinkElement,
  script: HTMLScriptElement,
  img: HTMLImageElement
};
var TYPES = Object.keys(TAG_TYPE);
function findCurrentDomain(url, domainList) {
  var domain = '';
  for (var i = 0; i < domainList.length; i++) {
    if (url.indexOf(domainList[i]) !== -1) {
      domain = domainList[i];
      break;
    }
  }
  return domain || window.origin;
}
function findNextDomain(url, domainList) {
  var currentDomain = findCurrentDomain(url, domainList);
  var index = domainList.indexOf(currentDomain);
  return domainList[(index + 1) % domainList.length] || url;
}
function getRequestUrl(element) {
  if (element instanceof HTMLScriptElement || element instanceof HTMLImageElement) {
    return element.src;
  }
  if (element instanceof HTMLLinkElement) {
    return element.href;
  }
  return null;
}
var defaultConfig = {
  max: 3,
  type: TYPES,
  domain: [],
  crossOrigin: false
};
function validateTargetInfo(config, e) {
  var _target$tagName;
  var target = e.target;
  var tagName = (_target$tagName = target.tagName) === null || _target$tagName === void 0 ? void 0 : _target$tagName.toLocaleLowerCase();
  var allowTags = config.type;
  var url = getRequestUrl(target);
  if (!tagName || allowTags.indexOf(tagName) === -1 || !TAG_TYPE[tagName] || !(target instanceof TAG_TYPE[tagName]) || !url) {
    return false;
  }
  return {
    target: target,
    tagName: tagName,
    url: url
  };
}
var postfixRE = /[?#].*$/;
function cleanUrl(url) {
  return url.replace(postfixRE, '');
}
function getQueryFromUrl(url) {
  var parts = url.split('?')[1];
  return parts ? "?".concat(parts.split('#')[0]) : '';
}
function createElement(origin, attributes) {
  var crossOrigin = attributes.crossOrigin === true ? 'anonymous' : attributes.crossOrigin;
  var crossOriginAttr = crossOrigin ? "crossorigin=\"".concat(crossOrigin, "\"") : '';
  var retryTimesAttr = attributes.times ? "data-rsbuild-retry-times=\"".concat(attributes.times, "\"") : '';
  var originalQueryAttr = attributes.originalQuery ? "data-rsbuild-original-query=\"".concat(attributes.originalQuery, "\"") : '';
  var isAsyncAttr = attributes.isAsync ? 'data-rsbuild-async' : '';
  if (origin instanceof HTMLScriptElement) {
    var script = document.createElement('script');
    script.src = attributes.url;
    if (crossOrigin) {
      script.crossOrigin = crossOrigin;
    }
    if (attributes.times) {
      script.dataset.rsbuildRetryTimes = String(attributes.times);
    }
    if (attributes.isAsync) {
      script.dataset.rsbuildAsync = '';
    }
    if (attributes.originalQuery !== undefined) {
      script.dataset.rsbuildOriginalQuery = attributes.originalQuery;
    }
    return {
      element: script,
      str:
      // biome-ignore lint/style/useTemplate: use "</" + "script>" instead of script tag to avoid syntax error when inlining in html
      "<script src=\"".concat(attributes.url, "\" ").concat(crossOriginAttr, " ").concat(retryTimesAttr, " ").concat(isAsyncAttr, " ").concat(originalQueryAttr, ">") + '</' + 'script>'
    };
  }
  if (origin instanceof HTMLLinkElement) {
    var link = document.createElement('link');
    link.rel = origin.rel || 'stylesheet';
    if (origin.as) {
      link.as = origin.as;
    }
    link.href = attributes.url;
    if (crossOrigin) {
      link.crossOrigin = crossOrigin;
    }
    if (attributes.times) {
      link.dataset.rsbuildRetryTimes = String(attributes.times);
    }
    if (attributes.originalQuery !== undefined) {
      link.dataset.rsbuildOriginalQuery = attributes.originalQuery;
    }
    return {
      element: link,
      str: "<link rel=\"".concat(link.rel, "\" href=\"").concat(attributes.url, "\" ").concat(crossOriginAttr, " ").concat(retryTimesAttr, " ").concat(link.as ? "as=\"".concat(link.as, "\"") : '', " ").concat(originalQueryAttr, "></link>")
    };
  }
}
function reloadElementResource(origin, fresh, attributes) {
  if (origin instanceof HTMLScriptElement) {
    if (attributes.isAsync) {
      document.body.appendChild(fresh.element);
    } else {
      document.write(fresh.str);
    }
  }
  if (origin instanceof HTMLLinkElement) {
    document.getElementsByTagName('head')[0].appendChild(fresh.element);
  }
  if (origin instanceof HTMLImageElement) {
    origin.src = attributes.url;
    origin.dataset.rsbuildRetryTimes = String(attributes.times);
    origin.dataset.rsbuildOriginalQuery = String(attributes.originalQuery);
  }
}
function retry(config, e) {
  var _target$dataset$rsbui;
  var targetInfo = validateTargetInfo(config, e);
  if (targetInfo === false) {
    return;
  }
  var target = targetInfo.target,
    tagName = targetInfo.tagName,
    url = targetInfo.url;

  // If the requested failed chunk is async chunkï¼Œskip it, because async chunk will be retried by asyncChunkRetry runtime
  if (typeof window !== 'undefined' && Object.keys(window.__RB_ASYNC_CHUNKS__ || {}).some(function (chunkName) {
    return url.indexOf(chunkName) !== -1;
  })) {
    return;
  }

  // Filter by config.test and config.domain
  var tester = config.test;
  if (tester) {
    if (typeof tester === 'string') {
      var regexp = new RegExp(tester);
      tester = function tester(str) {
        return regexp.test(str);
      };
    }
    if (typeof tester !== 'function' || !tester(url)) {
      return;
    }
  }
  var domain = findCurrentDomain(url, config.domain);
  if (config.domain && config.domain.length > 0 && config.domain.indexOf(domain) === -1) {
    return;
  }

  // If the retry times has exceeded the maximum, fail
  var existRetryTimes = Number(target.dataset.rsbuildRetryTimes) || 0;
  if (existRetryTimes === config.max) {
    if (typeof config.onFail === 'function') {
      var context = {
        times: existRetryTimes,
        domain: domain,
        url: url,
        tagName: tagName,
        isAsyncChunk: false
      };
      config.onFail(context);
    }
    return;
  }

  // Then, we will start to retry
  var nextDomain = findNextDomain(domain, config.domain);

  // if the initial request is "/static/js/async/src_Hello_tsx.js?q=1", retry url would be "/static/js/async/src_Hello_tsx.js?q=1&retry=1"
  var originalQuery = (_target$dataset$rsbui = target.dataset.rsbuildOriginalQuery) !== null && _target$dataset$rsbui !== void 0 ? _target$dataset$rsbui : getQueryFromUrl(url);
  function getUrlRetryQuery(existRetryTimes) {
    if (config.addQuery === true) {
      return originalQuery !== '' ? "".concat(originalQuery, "&retry=").concat(existRetryTimes) : "?retry=".concat(existRetryTimes);
    }
    if (typeof config.addQuery === 'function') {
      return config.addQuery({
        times: existRetryTimes,
        originalQuery: originalQuery
      });
    }
    return '';
  }
  var isAsync = Boolean(target.dataset.rsbuildAsync) || target.async || target.defer;
  var attributes = {
    url: cleanUrl(url.replace(domain, nextDomain)) + getUrlRetryQuery(existRetryTimes + 1),
    times: existRetryTimes + 1,
    crossOrigin: config.crossOrigin,
    isAsync: isAsync,
    originalQuery: originalQuery
  };
  var element = createElement(target, attributes);
  if (config.onRetry && typeof config.onRetry === 'function') {
    var _context = {
      times: existRetryTimes,
      domain: domain,
      url: url,
      tagName: tagName,
      isAsyncChunk: false
    };
    config.onRetry(_context);
  }
  reloadElementResource(target, element, attributes);
}
function load(config, e) {
  var targetInfo = validateTargetInfo(config, e);
  if (targetInfo === false) {
    return;
  }
  var target = targetInfo.target,
    tagName = targetInfo.tagName,
    url = targetInfo.url;
  var domain = findCurrentDomain(url, config.domain);
  var retryTimes = Number(target.dataset.rsbuildRetryTimes) || 0;
  if (retryTimes === 0) {
    return;
  }
  if (typeof config.onSuccess === 'function') {
    var context = {
      times: retryTimes,
      domain: domain,
      url: url,
      tagName: tagName,
      isAsyncChunk: false
    };
    config.onSuccess(context);
  }
}
function resourceMonitor(error, success) {
  if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {
    document.addEventListener('error', function (e) {
      if (e && e.target instanceof Element) {
        error(e);
      }
    }, true);
    document.addEventListener('load', function (e) {
      if (e && e.target instanceof Element) {
        success(e);
      }
    }, true);
  }
}

// @ts-expect-error init is a global function, ignore ts(6133)
function init(options) {
  var config = {};
  for (var key in defaultConfig) {
    // @ts-ignore
    config[key] = defaultConfig[key];
  }
  for (var _key in options) {
    // @ts-ignore
    config[_key] = options[_key];
  }

  // Normalize config
  if (!Array.isArray(config.type) || config.type.length === 0) {
    config.type = defaultConfig.type;
  }
  if (!Array.isArray(config.domain) || config.domain.length === 0) {
    config.domain = defaultConfig.domain;
  }
  if (Array.isArray(config.domain)) {
    config.domain = config.domain.filter(Boolean);
  }

  // init global variables shared with async chunk
  if (typeof window !== 'undefined' && !window.__RB_ASYNC_CHUNKS__) {
    window.__RB_ASYNC_CHUNKS__ = {};
  }
  // Bind event in window
  try {
    resourceMonitor(function (e) {
      try {
        retry(config, e);
      } catch (err) {
        console.error('retry error captured', err);
      }
    }, function (e) {
      try {
        load(config, e);
      } catch (err) {
        console.error('load error captured', err);
      }
    });
  } catch (err) {
    console.error('monitor error captured', err);
  }
}