import { createRequire } from 'module';
var require = createRequire(import.meta['url']);

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// ../../node_modules/.pnpm/@modern-js+module-tools@2.59.0_typescript@5.5.2/node_modules/@modern-js/module-tools/shims/esm.js
import path from "path";
import { fileURLToPath } from "url";
var getFilename = () => fileURLToPath(import.meta.url);
var getDirname = () => path.dirname(getFilename());
var __dirname = /* @__PURE__ */ getDirname();

// src/plugin.ts
import fs from "fs";
import path2, { isAbsolute as isAbsolute2, join } from "path";
import deepmerge from "deepmerge";

// src/helper.ts
import { isAbsolute, normalize, sep } from "path";
import { reduceConfigsWithContext } from "reduce-configs";
import upath from "upath";
var BABEL_JS_RULE = "babel-js";
var castArray = (arr) => {
  if (arr === void 0) {
    return [];
  }
  return Array.isArray(arr) ? arr : [arr];
};
var normalizeToPosixPath = (p) => upath.normalizeSafe(normalize(p || "")).replace(/^([a-zA-Z]+):/, (_, m) => `/${m.toLowerCase()}`);
var formatPath = (originPath) => {
  if (isAbsolute(originPath)) {
    return originPath.split(sep).join("/");
  }
  return originPath;
};
var getPluginItemName = (item) => {
  if (typeof item === "string") {
    return formatPath(item);
  }
  if (Array.isArray(item) && typeof item[0] === "string") {
    return formatPath(item[0]);
  }
  return null;
};
var addPlugins = (plugins, config) => {
  if (config.plugins) {
    config.plugins.push(...plugins);
  } else {
    config.plugins = plugins;
  }
};
var addPresets = (presets, config) => {
  if (config.presets) {
    config.presets.push(...presets);
  } else {
    config.presets = presets;
  }
};
var removePlugins = (plugins, config) => {
  if (!config.plugins) {
    return;
  }
  const removeList = castArray(plugins);
  config.plugins = config.plugins.filter((item) => {
    const name = getPluginItemName(item);
    if (name) {
      return !removeList.find((removeItem) => name.includes(removeItem));
    }
    return true;
  });
};
var removePresets = (presets, config) => {
  if (!config.presets) {
    return;
  }
  const removeList = castArray(presets);
  config.presets = config.presets.filter((item) => {
    const name = getPluginItemName(item);
    if (name) {
      return !removeList.find((removeItem) => name.includes(removeItem));
    }
    return true;
  });
};
var modifyPresetOptions = (presetName, options, presets = []) => {
  presets.forEach((preset, index) => {
    if (Array.isArray(preset)) {
      if (typeof preset[0] === "string" && normalizeToPosixPath(preset[0]).includes(presetName)) {
        preset[1] = {
          ...preset[1] || {},
          ...options
          // `options` is specific to different presets
        };
      }
    } else if (typeof preset === "string" && normalizeToPosixPath(preset).includes(presetName)) {
      presets[index] = [preset, options];
    }
  });
};
var getBabelUtils = (config) => {
  const noop = () => {
  };
  return {
    addPlugins: (plugins) => addPlugins(plugins, config),
    addPresets: (presets) => addPresets(presets, config),
    removePlugins: (plugins) => removePlugins(plugins, config),
    removePresets: (presets) => removePresets(presets, config),
    // `addIncludes` and `addExcludes` are noop functions by default,
    // It can be overridden by `extraBabelUtils`.
    addIncludes: noop,
    addExcludes: noop,
    // Compat `presetEnvOptions` and `presetReactOptions` in Modern.js
    modifyPresetEnvOptions: (options) => modifyPresetOptions("@babel/preset-env", options, config.presets || []),
    modifyPresetReactOptions: (options) => modifyPresetOptions("@babel/preset-react", options, config.presets || [])
  };
};
var applyUserBabelConfig = (defaultOptions, userBabelConfig, extraBabelUtils) => {
  if (userBabelConfig) {
    const babelUtils = {
      ...getBabelUtils(defaultOptions),
      ...extraBabelUtils
    };
    return reduceConfigsWithContext({
      initial: defaultOptions,
      config: userBabelConfig,
      ctx: babelUtils
    });
  }
  return defaultOptions;
};
var modifyBabelLoaderOptions = ({
  chain,
  CHAIN_ID,
  modifier
}) => {
  const ruleIds = [CHAIN_ID.RULE.JS, CHAIN_ID.RULE.JS_DATA_URI, BABEL_JS_RULE];
  for (const ruleId of ruleIds) {
    if (chain.module.rules.has(ruleId)) {
      const rule = chain.module.rule(ruleId);
      if (rule.uses.has(CHAIN_ID.USE.BABEL)) {
        rule.use(CHAIN_ID.USE.BABEL).tap(modifier);
      }
    }
  }
};

// src/plugin.ts
var PLUGIN_BABEL_NAME = "rsbuild:babel";
var SCRIPT_REGEX = /\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)$/;
var DEFAULT_BABEL_PRESET_TYPESCRIPT_OPTIONS = {
  allowNamespaces: true,
  allExtensions: true,
  allowDeclareFields: true,
  // aligns Babel's behavior with TypeScript's default behavior.
  // https://babeljs.io/docs/en/babel-preset-typescript#optimizeconstenums
  optimizeConstEnums: true,
  isTSX: true
};
function getCacheDirectory(context, cacheDirectory) {
  if (cacheDirectory) {
    return isAbsolute2(cacheDirectory) ? cacheDirectory : join(context.rootPath, cacheDirectory);
  }
  return join(context.cachePath);
}
async function getCacheIdentifier(options) {
  let identifier = `${process.env.NODE_ENV}${JSON.stringify(options)}`;
  const { version: coreVersion } = await import("@babel/core");
  const rawPkgJson = await fs.promises.readFile(
    join(__dirname, "../compiled/babel-loader/package.json"),
    "utf-8"
  );
  const loaderVersion = JSON.parse(rawPkgJson).version ?? "";
  identifier += `@babel/core@${coreVersion}`;
  identifier += `babel-loader@${loaderVersion}`;
  return identifier;
}
var getDefaultBabelOptions = (config, context) => {
  const isLegacyDecorators = config.source.decorators.version === "legacy";
  const options = {
    babelrc: false,
    configFile: false,
    compact: config.mode === "production",
    plugins: [
      [
        __require.resolve("@babel/plugin-proposal-decorators"),
        config.source.decorators
      ],
      // If you are using @babel/preset-env and legacy decorators, you must ensure the class elements transform is enabled regardless of your targets, because Babel only supports compiling legacy decorators when also compiling class properties:
      // see https://babeljs.io/docs/babel-plugin-proposal-decorators#legacy
      ...isLegacyDecorators ? [__require.resolve("@babel/plugin-transform-class-properties")] : []
    ],
    presets: [
      // TODO: only apply preset-typescript for ts file (isTSX & allExtensions false)
      [
        __require.resolve("@babel/preset-typescript"),
        DEFAULT_BABEL_PRESET_TYPESCRIPT_OPTIONS
      ]
    ]
  };
  const { buildCache } = config.performance;
  if (buildCache && context.bundlerType === "rspack") {
    const cacheDirectory = getCacheDirectory(
      context,
      typeof buildCache === "boolean" ? void 0 : buildCache.cacheDirectory
    );
    options.cacheCompression = false;
    options.cacheDirectory = join(cacheDirectory, "babel-loader");
  }
  return options;
};
var pluginBabel = (options = {}) => ({
  name: PLUGIN_BABEL_NAME,
  setup(api) {
    const getBabelOptions = async (environment) => {
      const { config } = environment;
      const baseOptions = getDefaultBabelOptions(config, api.context);
      const mergedOptions = applyUserBabelConfig(
        deepmerge({}, baseOptions),
        options.babelLoaderOptions
      );
      if (mergedOptions.cacheDirectory && !mergedOptions.cacheIdentifier) {
        mergedOptions.cacheIdentifier = await getCacheIdentifier(mergedOptions);
      }
      return mergedOptions;
    };
    api.modifyBundlerChain({
      order: "pre",
      handler: async (chain, { CHAIN_ID, environment }) => {
        const babelOptions = await getBabelOptions(environment);
        const babelLoader = path2.resolve(
          __dirname,
          "../compiled/babel-loader/index.js"
        );
        const { include, exclude } = options;
        if (include || exclude) {
          const rule = chain.module.rule(BABEL_JS_RULE).after(CHAIN_ID.RULE.JS);
          if (include) {
            for (const condition of castArray(include)) {
              rule.include.add(condition);
            }
          }
          if (exclude) {
            for (const condition of castArray(exclude)) {
              rule.exclude.add(condition);
            }
          }
          rule.test(SCRIPT_REGEX).use(CHAIN_ID.USE.BABEL).loader(babelLoader).options(babelOptions);
        } else {
          const rule = chain.module.rule(CHAIN_ID.RULE.JS);
          rule.test(SCRIPT_REGEX).use(CHAIN_ID.USE.BABEL).after(CHAIN_ID.USE.SWC).loader(babelLoader).options(babelOptions);
        }
      }
    });
  }
});
export {
  PLUGIN_BABEL_NAME,
  getBabelUtils,
  getDefaultBabelOptions,
  modifyBabelLoaderOptions,
  pluginBabel
};
