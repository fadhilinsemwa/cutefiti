import { createRequire } from 'module';
var require = createRequire(import.meta['url']);


// ../../node_modules/.pnpm/@modern-js+module-tools@2.59.0_typescript@5.5.2/node_modules/@modern-js/module-tools/shims/esm.js
import path from "path";
import { fileURLToPath } from "url";
var getFilename = () => fileURLToPath(import.meta.url);
var getDirname = () => path.dirname(getFilename());
var __dirname = /* @__PURE__ */ getDirname();

// src/index.ts
import path2 from "path";
import deepmerge from "deepmerge";
import { reduceConfigsWithContext } from "reduce-configs";
var PLUGIN_LESS_NAME = "rsbuild:less";
var getLessLoaderOptions = (userOptions, isUseCssSourceMap, rootPath) => {
  const excludes = [];
  const addExcludes = (items) => {
    excludes.push(...Array.isArray(items) ? items : [items]);
  };
  const defaultLessLoaderOptions = {
    lessOptions: {
      javascriptEnabled: true,
      // let less resolve from node_modules in the current root directory,
      // Avoid resolving from wrong node_modules.
      paths: [path2.join(rootPath, "node_modules")]
    },
    sourceMap: isUseCssSourceMap,
    implementation: path2.join(__dirname, "../compiled/less/index.js")
  };
  const mergeFn = (defaults, userOptions2) => {
    const getLessOptions = () => {
      if (defaults.lessOptions && userOptions2.lessOptions) {
        return deepmerge(defaults.lessOptions, userOptions2.lessOptions);
      }
      return userOptions2.lessOptions || defaults.lessOptions;
    };
    return {
      ...defaults,
      ...userOptions2,
      lessOptions: getLessOptions()
    };
  };
  const mergedOptions = reduceConfigsWithContext({
    initial: defaultLessLoaderOptions,
    config: userOptions,
    ctx: { addExcludes },
    mergeFn
  });
  return {
    options: mergedOptions,
    excludes
  };
};
var pluginLess = (pluginOptions = {}) => ({
  name: PLUGIN_LESS_NAME,
  setup(api) {
    api.modifyBundlerChain(async (chain, { CHAIN_ID, environment }) => {
      const { config } = environment;
      const rule = chain.module.rule(CHAIN_ID.RULE.LESS).test(/\.less$/).merge({ sideEffects: true }).resolve.preferRelative(true).end();
      const { excludes, options } = getLessLoaderOptions(
        pluginOptions.lessLoaderOptions,
        config.output.sourceMap.css,
        api.context.rootPath
      );
      for (const item of excludes) {
        rule.exclude.add(item);
      }
      if (pluginOptions.exclude) {
        rule.exclude.add(pluginOptions.exclude);
      }
      const cssRule = chain.module.rules.get(CHAIN_ID.RULE.CSS);
      for (const id of Object.keys(cssRule.uses.entries())) {
        const loader = cssRule.uses.get(id);
        const options2 = loader.get("options") ?? {};
        const clonedOptions = deepmerge({}, options2);
        if (id === CHAIN_ID.USE.CSS) {
          clonedOptions.importLoaders += 1;
        }
        rule.use(id).loader(loader.get("loader")).options(clonedOptions);
      }
      rule.use(CHAIN_ID.USE.LESS).loader(path2.join(__dirname, "../compiled/less-loader/index.js")).options(options);
    });
  }
});
export {
  PLUGIN_LESS_NAME,
  pluginLess
};
