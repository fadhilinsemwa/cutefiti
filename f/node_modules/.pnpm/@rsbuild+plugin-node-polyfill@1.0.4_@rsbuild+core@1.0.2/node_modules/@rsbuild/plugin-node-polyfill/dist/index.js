import {
  __export
} from "./chunk-6C3VEZWH.js";

// src/libs.ts
var libs_exports = {};
__export(libs_exports, {
  _stream_duplex: () => _stream_duplex,
  _stream_passthrough: () => _stream_passthrough,
  _stream_readable: () => _stream_readable,
  _stream_transform: () => _stream_transform,
  _stream_writable: () => _stream_writable,
  assert: () => assert,
  buffer: () => buffer,
  child_process: () => child_process,
  cluster: () => cluster,
  console: () => console,
  constants: () => constants,
  crypto: () => crypto,
  dgram: () => dgram,
  dns: () => dns,
  domain: () => domain,
  events: () => events,
  fs: () => fs,
  http: () => http,
  https: () => https,
  module: () => module,
  net: () => net,
  os: () => os,
  path: () => path,
  process: () => process,
  punycode: () => punycode,
  querystring: () => querystring,
  readline: () => readline,
  repl: () => repl,
  stream: () => stream,
  string_decoder: () => string_decoder,
  sys: () => sys,
  timers: () => timers,
  tls: () => tls,
  tty: () => tty,
  url: () => url,
  util: () => util,
  vm: () => vm,
  zlib: () => zlib
});
import { createRequire } from "node:module";
var require2 = createRequire(import.meta.url);
var assert = require2.resolve("assert/");
var buffer = require2.resolve("buffer/");
var child_process = null;
var cluster = null;
var console = require2.resolve("console-browserify");
var constants = require2.resolve("constants-browserify");
var crypto = require2.resolve("crypto-browserify");
var dgram = null;
var dns = null;
var domain = require2.resolve("domain-browser");
var events = require2.resolve("events/");
var fs = null;
var http = require2.resolve("stream-http");
var https = require2.resolve("https-browserify");
var module = null;
var net = null;
var os = require2.resolve("os-browserify/browser.js");
var path = require2.resolve("path-browserify");
var punycode = require2.resolve("punycode/");
var process = require2.resolve("process/browser.js");
var querystring = require2.resolve("querystring-es3/");
var readline = null;
var repl = null;
var stream = require2.resolve("stream-browserify");
var _stream_duplex = require2.resolve(
  "readable-stream/lib/_stream_duplex.js"
);
var _stream_passthrough = require2.resolve(
  "readable-stream/lib/_stream_passthrough.js"
);
var _stream_readable = require2.resolve(
  "readable-stream/lib/_stream_readable.js"
);
var _stream_transform = require2.resolve(
  "readable-stream/lib/_stream_transform.js"
);
var _stream_writable = require2.resolve(
  "readable-stream/lib/_stream_writable.js"
);
var string_decoder = require2.resolve("string_decoder/");
var sys = require2.resolve("util/util.js");
var timers = require2.resolve("timers-browserify");
var tls = null;
var tty = require2.resolve("tty-browserify");
var url = require2.resolve("url/");
var util = require2.resolve("util/util.js");
var vm = require2.resolve("vm-browserify");
var zlib = require2.resolve("browserify-zlib");

// src/index.ts
var getResolveFallback = (protocolImports) => {
  const fallback = {};
  for (const name of Object.keys(libs_exports)) {
    const libPath = libs_exports[name];
    fallback[name] = libPath ?? false;
    if (protocolImports) {
      fallback[`node:${name}`] = fallback[name];
    }
  }
  return fallback;
};
var getProvideGlobals = async (globals) => {
  const result = {};
  if (globals?.Buffer !== false) {
    result.Buffer = [buffer, "Buffer"];
  }
  if (globals?.process !== false) {
    result.process = [process];
  }
  return result;
};
var PLUGIN_NODE_POLYFILL_NAME = "rsbuild:node-polyfill";
function pluginNodePolyfill(options = {}) {
  const { protocolImports = true } = options;
  return {
    name: PLUGIN_NODE_POLYFILL_NAME,
    setup(api) {
      api.modifyBundlerChain(async (chain, { isServer, bundler }) => {
        if (isServer) {
          return;
        }
        chain.resolve.fallback.merge(getResolveFallback(protocolImports));
        const provideGlobals = await getProvideGlobals(options.globals);
        if (Object.keys(provideGlobals).length) {
          chain.plugin("node-polyfill-provide").use(bundler.ProvidePlugin, [provideGlobals]);
        }
        if (protocolImports) {
          const { ProtocolImportsPlugin } = await import("./ProtocolImportsPlugin-HUSWFIAE.js");
          chain.plugin("protocol-imports").use(ProtocolImportsPlugin);
        }
      });
    }
  };
}
export {
  PLUGIN_NODE_POLYFILL_NAME,
  pluginNodePolyfill
};
