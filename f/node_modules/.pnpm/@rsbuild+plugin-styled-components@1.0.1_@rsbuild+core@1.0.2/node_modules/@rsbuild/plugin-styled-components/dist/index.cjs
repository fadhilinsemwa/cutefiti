"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PLUGIN_STYLED_COMPONENTS_NAME: () => PLUGIN_STYLED_COMPONENTS_NAME,
  pluginStyledComponents: () => pluginStyledComponents
});
module.exports = __toCommonJS(src_exports);

// node_modules/.pnpm/tsup@8.2.3_postcss@8.4.38_typescript@5.5.4/node_modules/tsup/assets/cjs_shims.js
var getImportMetaUrl = () => typeof document === "undefined" ? new URL(`file:${__filename}`).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
var importMetaUrl = /* @__PURE__ */ getImportMetaUrl();

// src/index.ts
var import_node_module = require("module");
var import_reduce_configs = require("reduce-configs");
var require2 = (0, import_node_module.createRequire)(importMetaUrl);
function isServerTarget(target) {
  return Array.isArray(target) ? target.includes("node") : target === "node";
}
var getDefaultStyledComponentsConfig = (isProd, ssr) => {
  return {
    ssr,
    // "pure" is used to improve dead code elimination in production.
    // we don't need to enable it in development because it will slow down the build process.
    pure: isProd,
    displayName: true,
    transpileTemplateLiterals: true
  };
};
var PLUGIN_STYLED_COMPONENTS_NAME = "rsbuild:styled-components";
var pluginStyledComponents = (pluginOptions = {}) => ({
  name: PLUGIN_STYLED_COMPONENTS_NAME,
  setup(api) {
    if (api.context.bundlerType === "webpack") {
      return;
    }
    const getMergedOptions = (useSSR, config) => {
      const isProd = config.mode === "production";
      return (0, import_reduce_configs.reduceConfigs)({
        initial: getDefaultStyledComponentsConfig(isProd, useSSR),
        config: pluginOptions
      });
    };
    api.modifyEnvironmentConfig((userConfig, { mergeEnvironmentConfig }) => {
      const rsbuildConfig = api.getRsbuildConfig();
      const targets = rsbuildConfig.environments ? Object.values(rsbuildConfig.environments).map(
        (e) => e.output?.target || userConfig.output?.target || "web"
      ) : [userConfig.output?.target || "web"];
      const useSSR = isServerTarget(targets);
      const mergedOptions = getMergedOptions(useSSR, userConfig);
      if (!mergedOptions) {
        return userConfig;
      }
      const extraConfig = {
        tools: {
          swc: {
            jsc: {
              experimental: {
                plugins: [
                  [
                    require2.resolve("@swc/plugin-styled-components"),
                    mergedOptions
                  ]
                ]
              }
            }
          }
        }
      };
      return mergeEnvironmentConfig(extraConfig, userConfig);
    });
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PLUGIN_STYLED_COMPONENTS_NAME,
  pluginStyledComponents
});
