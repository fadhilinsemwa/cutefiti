// src/index.ts
import { createRequire } from "node:module";
import { reduceConfigs } from "reduce-configs";
var require2 = createRequire(import.meta.url);
function isServerTarget(target) {
  return Array.isArray(target) ? target.includes("node") : target === "node";
}
var getDefaultStyledComponentsConfig = (isProd, ssr) => {
  return {
    ssr,
    // "pure" is used to improve dead code elimination in production.
    // we don't need to enable it in development because it will slow down the build process.
    pure: isProd,
    displayName: true,
    transpileTemplateLiterals: true
  };
};
var PLUGIN_STYLED_COMPONENTS_NAME = "rsbuild:styled-components";
var pluginStyledComponents = (pluginOptions = {}) => ({
  name: PLUGIN_STYLED_COMPONENTS_NAME,
  setup(api) {
    if (api.context.bundlerType === "webpack") {
      return;
    }
    const getMergedOptions = (useSSR, config) => {
      const isProd = config.mode === "production";
      return reduceConfigs({
        initial: getDefaultStyledComponentsConfig(isProd, useSSR),
        config: pluginOptions
      });
    };
    api.modifyEnvironmentConfig((userConfig, { mergeEnvironmentConfig }) => {
      const rsbuildConfig = api.getRsbuildConfig();
      const targets = rsbuildConfig.environments ? Object.values(rsbuildConfig.environments).map(
        (e) => e.output?.target || userConfig.output?.target || "web"
      ) : [userConfig.output?.target || "web"];
      const useSSR = isServerTarget(targets);
      const mergedOptions = getMergedOptions(useSSR, userConfig);
      if (!mergedOptions) {
        return userConfig;
      }
      const extraConfig = {
        tools: {
          swc: {
            jsc: {
              experimental: {
                plugins: [
                  [
                    require2.resolve("@swc/plugin-styled-components"),
                    mergedOptions
                  ]
                ]
              }
            }
          }
        }
      };
      return mergeEnvironmentConfig(extraConfig, userConfig);
    });
  }
});
export {
  PLUGIN_STYLED_COMPONENTS_NAME,
  pluginStyledComponents
};
