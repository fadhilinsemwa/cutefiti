"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PLUGIN_TYPE_CHECK_NAME: () => PLUGIN_TYPE_CHECK_NAME,
  pluginTypeCheck: () => pluginTypeCheck
});
module.exports = __toCommonJS(src_exports);

// node_modules/.pnpm/tsup@8.2.4_postcss@8.4.38_typescript@5.5.4/node_modules/tsup/assets/cjs_shims.js
var getImportMetaUrl = () => typeof document === "undefined" ? new URL(`file:${__filename}`).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
var importMetaUrl = /* @__PURE__ */ getImportMetaUrl();

// src/index.ts
var import_node_fs = __toESM(require("fs"), 1);
var import_node_module = require("module");
var import_core = require("@rsbuild/core");
var import_deepmerge = __toESM(require("deepmerge"), 1);
var import_fork_ts_checker_webpack_plugin = __toESM(require("fork-ts-checker-webpack-plugin"), 1);
var import_json5 = __toESM(require("json5"), 1);
var import_reduce_configs = require("reduce-configs");
var require2 = (0, import_node_module.createRequire)(importMetaUrl);
var PLUGIN_TYPE_CHECK_NAME = "rsbuild:type-check";
var pluginTypeCheck = (options = {}) => {
  return {
    name: PLUGIN_TYPE_CHECK_NAME,
    setup(api) {
      const NODE_MODULES_REGEX = /[\\/]node_modules[\\/]/;
      const checkedTsconfig = /* @__PURE__ */ new Map();
      api.modifyBundlerChain(
        async (chain, { isProd, environment, CHAIN_ID }) => {
          const { enable = true, forkTsCheckerOptions } = options;
          const { tsconfigPath } = environment;
          if (!tsconfigPath || enable === false) {
            return;
          }
          if (checkedTsconfig.has(tsconfigPath) && checkedTsconfig.get(tsconfigPath) !== environment.name) {
            return;
          }
          checkedTsconfig.set(tsconfigPath, environment.name);
          let typescriptPath;
          try {
            typescriptPath = require2.resolve("typescript", {
              paths: [api.context.rootPath]
            });
          } catch (err) {
            import_core.logger.warn(
              '"typescript" is not found in current project, Type checker will not work.'
            );
            return;
          }
          const { references } = import_json5.default.parse(
            import_node_fs.default.readFileSync(tsconfigPath, "utf-8")
          );
          const useReference = Array.isArray(references) && references.length > 0;
          const defaultOptions = {
            typescript: {
              // set 'readonly' to avoid emitting tsbuildinfo,
              // as the generated tsbuildinfo will break fork-ts-checker
              mode: "readonly",
              // enable build when using project reference
              build: useReference,
              // avoid OOM issue
              memoryLimit: 8192,
              // use tsconfig of user project
              configFile: tsconfigPath,
              // use typescript of user project
              typescriptPath
            },
            issue: {
              // ignore types errors from node_modules
              exclude: [({ file = "" }) => NODE_MODULES_REGEX.test(file)]
            },
            logger: {
              log() {
              },
              error(message) {
                console.error(message.replace(/ERROR/g, "Type Error"));
              }
            }
          };
          const typeCheckerOptions = (0, import_reduce_configs.reduceConfigs)({
            initial: defaultOptions,
            config: forkTsCheckerOptions,
            mergeFn: import_deepmerge.default
          });
          if (isProd) {
            import_core.logger.info("Type checker is enabled. It may take some time.");
          }
          chain.plugin(CHAIN_ID.PLUGIN.TS_CHECKER).use(import_fork_ts_checker_webpack_plugin.default, [typeCheckerOptions]);
        }
      );
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PLUGIN_TYPE_CHECK_NAME,
  pluginTypeCheck
});
