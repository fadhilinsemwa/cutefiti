// src/index.ts
import fs from "node:fs";
import { createRequire } from "node:module";
import { logger } from "@rsbuild/core";
import deepmerge from "deepmerge";
import ForkTSCheckerPlugin from "fork-ts-checker-webpack-plugin";
import json5 from "json5";
import { reduceConfigs } from "reduce-configs";
var require2 = createRequire(import.meta.url);
var PLUGIN_TYPE_CHECK_NAME = "rsbuild:type-check";
var pluginTypeCheck = (options = {}) => {
  return {
    name: PLUGIN_TYPE_CHECK_NAME,
    setup(api) {
      const NODE_MODULES_REGEX = /[\\/]node_modules[\\/]/;
      const checkedTsconfig = /* @__PURE__ */ new Map();
      api.modifyBundlerChain(
        async (chain, { isProd, environment, CHAIN_ID }) => {
          const { enable = true, forkTsCheckerOptions } = options;
          const { tsconfigPath } = environment;
          if (!tsconfigPath || enable === false) {
            return;
          }
          if (checkedTsconfig.has(tsconfigPath) && checkedTsconfig.get(tsconfigPath) !== environment.name) {
            return;
          }
          checkedTsconfig.set(tsconfigPath, environment.name);
          let typescriptPath;
          try {
            typescriptPath = require2.resolve("typescript", {
              paths: [api.context.rootPath]
            });
          } catch (err) {
            logger.warn(
              '"typescript" is not found in current project, Type checker will not work.'
            );
            return;
          }
          const { references } = json5.parse(
            fs.readFileSync(tsconfigPath, "utf-8")
          );
          const useReference = Array.isArray(references) && references.length > 0;
          const defaultOptions = {
            typescript: {
              // set 'readonly' to avoid emitting tsbuildinfo,
              // as the generated tsbuildinfo will break fork-ts-checker
              mode: "readonly",
              // enable build when using project reference
              build: useReference,
              // avoid OOM issue
              memoryLimit: 8192,
              // use tsconfig of user project
              configFile: tsconfigPath,
              // use typescript of user project
              typescriptPath
            },
            issue: {
              // ignore types errors from node_modules
              exclude: [({ file = "" }) => NODE_MODULES_REGEX.test(file)]
            },
            logger: {
              log() {
              },
              error(message) {
                console.error(message.replace(/ERROR/g, "Type Error"));
              }
            }
          };
          const typeCheckerOptions = reduceConfigs({
            initial: defaultOptions,
            config: forkTsCheckerOptions,
            mergeFn: deepmerge
          });
          if (isProd) {
            logger.info("Type checker is enabled. It may take some time.");
          }
          chain.plugin(CHAIN_ID.PLUGIN.TS_CHECKER).use(ForkTSCheckerPlugin, [typeCheckerOptions]);
        }
      );
    }
  };
};
export {
  PLUGIN_TYPE_CHECK_NAME,
  pluginTypeCheck
};
